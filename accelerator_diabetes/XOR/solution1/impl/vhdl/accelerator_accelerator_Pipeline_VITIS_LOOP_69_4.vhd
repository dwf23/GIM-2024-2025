-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accelerator_accelerator_Pipeline_VITIS_LOOP_69_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bias_2_local_1_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_2_local_0_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_1_local_1_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_1_local_0_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    w2_local_1_1_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    w2_local_1_0_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    w2_local_0_1_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    w2_local_0_0_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    w1_local_1_1_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    w1_local_1_0_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    w1_local_0_1_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    w1_local_0_0_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_array_inference_3_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_array_inference_2_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_array_inference_1_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_array_inference_0_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    training : IN STD_LOGIC_VECTOR (15 downto 0);
    cmp_i_i116 : IN STD_LOGIC_VECTOR (0 downto 0);
    bias_2_local_1_3_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_2_local_1_3_out_ap_vld : OUT STD_LOGIC;
    bias_2_local_0_3_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_2_local_0_3_out_ap_vld : OUT STD_LOGIC;
    bias_1_local_1_3_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_1_local_1_3_out_ap_vld : OUT STD_LOGIC;
    bias_1_local_0_3_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_1_local_0_3_out_ap_vld : OUT STD_LOGIC;
    w2_local_1_1_3_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    w2_local_1_1_3_out_ap_vld : OUT STD_LOGIC;
    w2_local_1_0_3_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    w2_local_1_0_3_out_ap_vld : OUT STD_LOGIC;
    w2_local_0_1_3_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    w2_local_0_1_3_out_ap_vld : OUT STD_LOGIC;
    w2_local_0_0_3_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    w2_local_0_0_3_out_ap_vld : OUT STD_LOGIC;
    w1_local_1_1_3_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    w1_local_1_1_3_out_ap_vld : OUT STD_LOGIC;
    w1_local_1_0_3_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    w1_local_1_0_3_out_ap_vld : OUT STD_LOGIC;
    w1_local_0_1_3_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    w1_local_0_1_3_out_ap_vld : OUT STD_LOGIC;
    w1_local_0_0_3_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    w1_local_0_0_3_out_ap_vld : OUT STD_LOGIC;
    output_array_inference_3_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_array_inference_3_1_out_ap_vld : OUT STD_LOGIC;
    output_array_inference_2_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_array_inference_2_1_out_ap_vld : OUT STD_LOGIC;
    output_array_inference_1_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_array_inference_1_1_out_ap_vld : OUT STD_LOGIC;
    output_array_inference_0_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_array_inference_0_1_out_ap_vld : OUT STD_LOGIC;
    select_ln96_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    select_ln96_1_out_ap_vld : OUT STD_LOGIC;
    select_ln96_3_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    select_ln96_3_out_ap_vld : OUT STD_LOGIC;
    select_ln96_5_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    select_ln96_5_out_ap_vld : OUT STD_LOGIC;
    select_ln96_7_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    select_ln96_7_out_ap_vld : OUT STD_LOGIC;
    array_back2_weight_changes_0_0_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    array_back2_weight_changes_0_0_out_ap_vld : OUT STD_LOGIC;
    array_back2_weight_changes_0_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    array_back2_weight_changes_0_1_out_ap_vld : OUT STD_LOGIC;
    array_back2_weight_changes_1_0_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    array_back2_weight_changes_1_0_out_ap_vld : OUT STD_LOGIC;
    array_back2_weight_changes_1_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    array_back2_weight_changes_1_1_out_ap_vld : OUT STD_LOGIC;
    array_back2_bias_change_0_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    array_back2_bias_change_0_out_ap_vld : OUT STD_LOGIC;
    array_back2_bias_change_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    array_back2_bias_change_1_out_ap_vld : OUT STD_LOGIC;
    array_back1_weight_changes_0_0_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    array_back1_weight_changes_0_0_out_ap_vld : OUT STD_LOGIC;
    array_back1_weight_changes_0_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    array_back1_weight_changes_0_1_out_ap_vld : OUT STD_LOGIC;
    array_back1_weight_changes_1_0_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    array_back1_weight_changes_1_0_out_ap_vld : OUT STD_LOGIC;
    array_back1_weight_changes_1_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    array_back1_weight_changes_1_1_out_ap_vld : OUT STD_LOGIC;
    array_back1_bias_change_0_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    array_back1_bias_change_0_out_ap_vld : OUT STD_LOGIC;
    array_back1_bias_change_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    array_back1_bias_change_1_out_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of accelerator_accelerator_Pipeline_VITIS_LOOP_69_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage21 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage22 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_pp0_stage23 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage24 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_FFCB : STD_LOGIC_VECTOR (15 downto 0) := "1111111111001011";
    constant ap_const_lv27_199 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000110011001";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv16_1000 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln69_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1740 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln69_fu_860_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln69_reg_1744 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_fu_662_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal w1_local_0_0_load_1_reg_1749 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_load_fu_667_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal w1_local_0_1_load_1_reg_1755 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_load_fu_672_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal w1_local_1_0_load_1_reg_1761 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_load_fu_677_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal w1_local_1_1_load_1_reg_1767 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_load_fu_682_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_1_local_0_load_1_reg_1773 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_load_fu_687_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_1_local_1_load_1_reg_1779 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln72_fu_866_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln72_reg_1785 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln33_fu_884_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln33_reg_1796 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln33_1_fu_903_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln33_1_reg_1801 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln144_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln144_reg_1806 : STD_LOGIC_VECTOR (0 downto 0);
    signal array_out1_output_k_0_reg_1810 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal array_out1_output_k_1_reg_1815 : STD_LOGIC_VECTOR (15 downto 0);
    signal w2_local_0_0_load_1_reg_1820 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal w2_local_0_1_load_1_reg_1826 : STD_LOGIC_VECTOR (15 downto 0);
    signal w2_local_1_0_load_1_reg_1832 : STD_LOGIC_VECTOR (15 downto 0);
    signal w2_local_1_1_load_1_reg_1838 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_2_local_0_load_1_reg_1844 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_2_local_1_load_1_reg_1850 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_2_reg_1856 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state13_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal tmp_6_reg_1865 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_fu_931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1871 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_state14_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal select_ln93_fu_941_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln93_reg_1877 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln93_1_fu_977_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln93_1_reg_1883 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln93_2_fu_1001_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln93_2_reg_1890 : STD_LOGIC_VECTOR (15 downto 0);
    signal bit_select30_i_i1_fu_1013_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal bit_select30_i_i1_reg_1895 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln93_2_fu_1021_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln93_2_reg_1900 : STD_LOGIC_VECTOR (10 downto 0);
    signal delta_2_2_fu_1084_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal delta_2_2_reg_1905 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln_fu_1154_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln_reg_1910 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_state15_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal zext_ln93_fu_1162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_reg_1915 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln93_3_fu_1165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_3_reg_1920 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln93_fu_1180_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln93_reg_1925 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln93_2_fu_1186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln93_2_reg_1930 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln93_1_reg_1935 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_state16_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal tmp_10_reg_1940 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_5_fu_1242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_5_reg_1945 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln756_fu_1288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln756_reg_1950 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_state17_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal icmp_ln93_4_fu_1293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_4_reg_1955 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1960 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage16 : signal is "none";
    signal ap_block_state18_pp0_stage16_iter0 : BOOLEAN;
    signal ap_block_pp0_stage16_11001 : BOOLEAN;
    signal tmp_5_reg_1965 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage17 : signal is "none";
    signal ap_block_state19_pp0_stage17_iter0 : BOOLEAN;
    signal ap_block_pp0_stage17_11001 : BOOLEAN;
    signal array_back2_delta_kmin1_0_reg_1970 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage18 : signal is "none";
    signal ap_block_state20_pp0_stage18_iter0 : BOOLEAN;
    signal ap_block_pp0_stage18_11001 : BOOLEAN;
    signal array_back2_delta_kmin1_1_reg_1975 : STD_LOGIC_VECTOR (15 downto 0);
    signal array_back2_weight_changes_0_0_reg_1980 : STD_LOGIC_VECTOR (15 downto 0);
    signal array_back2_weight_changes_0_1_reg_1986 : STD_LOGIC_VECTOR (15 downto 0);
    signal array_back2_weight_changes_1_0_reg_1992 : STD_LOGIC_VECTOR (15 downto 0);
    signal array_back2_weight_changes_1_1_reg_1998 : STD_LOGIC_VECTOR (15 downto 0);
    signal array_back2_bias_change_0_reg_2004 : STD_LOGIC_VECTOR (15 downto 0);
    signal array_back2_bias_change_1_reg_2010 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_array_inference_0_1_load_1_reg_2016 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage24 : signal is "none";
    signal ap_block_state26_pp0_stage24_iter0 : BOOLEAN;
    signal ap_block_pp0_stage24_11001 : BOOLEAN;
    signal output_array_inference_1_1_load_1_reg_2021 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_array_inference_2_1_load_1_reg_2026 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_array_inference_3_1_load_1_reg_2031 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln96_1_fu_1414_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln96_1_reg_2036 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln96_3_fu_1453_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln96_3_reg_2041 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln96_5_fu_1492_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln96_5_reg_2046 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln96_7_fu_1531_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln96_7_reg_2051 : STD_LOGIC_VECTOR (15 downto 0);
    signal array_back1_weight_changes_0_0_reg_2056 : STD_LOGIC_VECTOR (15 downto 0);
    signal array_back1_weight_changes_0_1_reg_2062 : STD_LOGIC_VECTOR (15 downto 0);
    signal array_back1_weight_changes_1_0_reg_2068 : STD_LOGIC_VECTOR (15 downto 0);
    signal array_back1_weight_changes_1_1_reg_2074 : STD_LOGIC_VECTOR (15 downto 0);
    signal array_back1_bias_change_0_reg_2080 : STD_LOGIC_VECTOR (15 downto 0);
    signal array_back1_bias_change_1_reg_2086 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage24_subdone : BOOLEAN;
    signal ap_predicate_tran26to28_state26 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state26 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_model_array_fu_640_p_read10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_model_array_fu_640_p_read11 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_model_array_fu_640_p_read12 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_model_array_fu_640_p_read13 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_model_array_fu_640_biases_0_0_val : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_model_array_fu_640_biases_0_1_val : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_model_array_fu_640_output_kmin1_0_0_val : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_model_array_fu_640_output_kmin1_0_1_val : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_model_array_fu_640_delta_k_0_0_val : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_model_array_fu_640_delta_k_0_1_val : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_model_array_fu_640_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_model_array_fu_640_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_model_array_fu_640_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_model_array_fu_640_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_model_array_fu_640_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_model_array_fu_640_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_model_array_fu_640_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_model_array_fu_640_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_model_array_fu_640_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_model_array_fu_640_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_model_array_fu_640_ap_ce : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0_ignore_call24 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter1_ignore_call24 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp98 : BOOLEAN;
    signal ap_block_state3_pp0_stage1_iter0_ignore_call24 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp102 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0_ignore_call24 : BOOLEAN;
    signal ap_block_pp0_stage2_11001_ignoreCallOp103 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0_ignore_call24 : BOOLEAN;
    signal ap_block_pp0_stage3_11001_ignoreCallOp104 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0_ignore_call24 : BOOLEAN;
    signal ap_block_pp0_stage4_11001_ignoreCallOp105 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state7_pp0_stage5_iter0_ignore_call24 : BOOLEAN;
    signal ap_block_pp0_stage5_11001_ignoreCallOp106 : BOOLEAN;
    signal ap_block_state8_pp0_stage6_iter0_ignore_call27 : BOOLEAN;
    signal ap_block_pp0_stage6_11001_ignoreCallOp115 : BOOLEAN;
    signal ap_block_state9_pp0_stage7_iter0_ignore_call27 : BOOLEAN;
    signal ap_block_pp0_stage7_11001_ignoreCallOp116 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state10_pp0_stage8_iter0_ignore_call27 : BOOLEAN;
    signal ap_block_pp0_stage8_11001_ignoreCallOp117 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state11_pp0_stage9_iter0_ignore_call27 : BOOLEAN;
    signal ap_block_pp0_stage9_11001_ignoreCallOp118 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state12_pp0_stage10_iter0_ignore_call27 : BOOLEAN;
    signal ap_block_pp0_stage10_11001_ignoreCallOp119 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state13_pp0_stage11_iter0_ignore_call27 : BOOLEAN;
    signal ap_block_pp0_stage11_11001_ignoreCallOp120 : BOOLEAN;
    signal ap_block_state15_pp0_stage13_iter0_ignore_call131 : BOOLEAN;
    signal ap_block_pp0_stage13_11001_ignoreCallOp167 : BOOLEAN;
    signal ap_block_state16_pp0_stage14_iter0_ignore_call131 : BOOLEAN;
    signal ap_block_pp0_stage14_11001_ignoreCallOp177 : BOOLEAN;
    signal ap_block_state17_pp0_stage15_iter0_ignore_call131 : BOOLEAN;
    signal ap_block_pp0_stage15_11001_ignoreCallOp187 : BOOLEAN;
    signal ap_block_state18_pp0_stage16_iter0_ignore_call131 : BOOLEAN;
    signal ap_block_pp0_stage16_11001_ignoreCallOp190 : BOOLEAN;
    signal ap_block_state19_pp0_stage17_iter0_ignore_call131 : BOOLEAN;
    signal ap_block_pp0_stage17_11001_ignoreCallOp192 : BOOLEAN;
    signal ap_block_state20_pp0_stage18_iter0_ignore_call131 : BOOLEAN;
    signal ap_block_pp0_stage18_11001_ignoreCallOp193 : BOOLEAN;
    signal ap_block_state21_pp0_stage19_iter0_ignore_call140 : BOOLEAN;
    signal ap_block_pp0_stage19_11001_ignoreCallOp202 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage19 : signal is "none";
    signal ap_block_state22_pp0_stage20_iter0_ignore_call140 : BOOLEAN;
    signal ap_block_pp0_stage20_11001_ignoreCallOp203 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage20 : signal is "none";
    signal ap_block_state23_pp0_stage21_iter0_ignore_call140 : BOOLEAN;
    signal ap_block_pp0_stage21_11001_ignoreCallOp204 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage21 : signal is "none";
    signal ap_block_state24_pp0_stage22_iter0_ignore_call140 : BOOLEAN;
    signal ap_block_pp0_stage22_11001_ignoreCallOp205 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage22 : signal is "none";
    signal ap_block_state25_pp0_stage23_iter0_ignore_call140 : BOOLEAN;
    signal ap_block_pp0_stage23_11001_ignoreCallOp206 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage23 : signal is "none";
    signal ap_block_state26_pp0_stage24_iter0_ignore_call140 : BOOLEAN;
    signal ap_block_pp0_stage24_11001_ignoreCallOp252 : BOOLEAN;
    signal ap_phi_mux_UnifiedRetVal_phi_fu_632_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal UnifiedRetVal_reg_628 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal ap_block_pp0_stage19 : BOOLEAN;
    signal j_fu_228 : STD_LOGIC_VECTOR (2 downto 0);
    signal output_array_inference_0_1_fu_232 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage24 : BOOLEAN;
    signal output_array_inference_1_1_fu_236 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_array_inference_2_1_fu_240 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_array_inference_3_1_fu_244 : STD_LOGIC_VECTOR (15 downto 0);
    signal w1_local_0_0_fu_248 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_w1_local_0_0_load_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal w1_local_0_1_fu_252 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_w1_local_0_1_load_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal w1_local_1_0_fu_256 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_w1_local_1_0_load_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal w1_local_1_1_fu_260 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_w1_local_1_1_load_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal w2_local_0_0_fu_264 : STD_LOGIC_VECTOR (15 downto 0);
    signal w2_local_0_1_fu_268 : STD_LOGIC_VECTOR (15 downto 0);
    signal w2_local_1_0_fu_272 : STD_LOGIC_VECTOR (15 downto 0);
    signal w2_local_1_1_fu_276 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_1_local_0_fu_280 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_bias_1_local_0_load_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_1_local_1_fu_284 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_bias_1_local_1_load_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_2_local_0_fu_288 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_2_local_1_fu_292 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_657_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal ap_block_pp0_stage16 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal ap_block_pp0_stage18 : BOOLEAN;
    signal output_0_fu_870_p6 : STD_LOGIC_VECTOR (12 downto 0);
    signal output_0_1_fu_889_p6 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln144_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_923_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal sub_ln93_fu_936_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_947_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_957_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln93_fu_965_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_969_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln93_1_fu_987_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln93_4_fu_991_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln93_5_fu_997_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln93_fu_983_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln93_1_fu_1007_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln112_cast_fu_1033_p6 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln112_fu_1030_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln112_fu_1046_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln112_fu_1050_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln114_fu_1064_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln114_fu_1064_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal delta_2_1_fu_1070_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln111_fu_1025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal delta_2_fu_1056_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln114_1_fu_1080_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln93_fu_1092_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1097_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal and_ln93_4_fu_1113_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln93_1_fu_1107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_2_fu_1117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_1129_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln93_1_fu_1137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln93_1_fu_1143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln93_fu_1123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln93_fu_1148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln93_2_fu_1171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln93_1_fu_1176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal zext_ln93_2_fu_1191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln93_fu_1194_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln93_1_fu_1199_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_3_fu_1205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln93_3_fu_1208_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln93_3_fu_1232_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal select_ln93_2_fu_1251_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln93_3_fu_1258_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln93_4_fu_1263_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln93_4_fu_1248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_1269_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal LD_fu_1276_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln93_1_fu_1307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln93_2_fu_1311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln93_fu_1321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln93_3_fu_1326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_fu_1332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_1_fu_1337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_2_fu_1342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_1_fu_1353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_fu_1347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln96_fu_1316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln96_fu_1365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln96_1_fu_1371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln96_fu_1377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln96_3_fu_1388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln96_2_fu_1382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln96_4_fu_1394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_2_fu_1359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln96_1_fu_1408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln96_fu_1400_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln94_3_fu_1422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln96_5_fu_1433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_3_fu_1427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln96_2_fu_1447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln96_2_fu_1439_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln94_4_fu_1461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln96_6_fu_1472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_4_fu_1466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln96_3_fu_1486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln96_4_fu_1478_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln94_5_fu_1500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln96_7_fu_1511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_5_fu_1505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln96_4_fu_1525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln96_6_fu_1517_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_657_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage15_00001 : BOOLEAN;
    signal ap_block_pp0_stage16_00001 : BOOLEAN;
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_state10_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_state11_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_state12_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage18_subdone : BOOLEAN;
    signal ap_block_state21_pp0_stage19_iter0 : BOOLEAN;
    signal ap_block_pp0_stage19_subdone : BOOLEAN;
    signal ap_block_state22_pp0_stage20_iter0 : BOOLEAN;
    signal ap_block_pp0_stage20_subdone : BOOLEAN;
    signal ap_block_state23_pp0_stage21_iter0 : BOOLEAN;
    signal ap_block_pp0_stage21_subdone : BOOLEAN;
    signal ap_block_state24_pp0_stage22_iter0 : BOOLEAN;
    signal ap_block_pp0_stage22_subdone : BOOLEAN;
    signal ap_block_state25_pp0_stage23_iter0 : BOOLEAN;
    signal ap_block_pp0_stage23_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_1559 : BOOLEAN;
    signal ap_condition_1563 : BOOLEAN;
    signal ap_condition_1567 : BOOLEAN;
    signal ap_condition_1571 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component accelerator_model_array IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_read10 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_0_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_0_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
        output_kmin1_0_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
        output_kmin1_0_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
        delta_k_0_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
        delta_k_0_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
        training_val : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component accelerator_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component accelerator_mux_4_2_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        din3 : IN STD_LOGIC_VECTOR (12 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component accelerator_mul_17s_10ns_27_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;



begin
    grp_model_array_fu_640 : component accelerator_model_array
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        p_read10 => grp_model_array_fu_640_p_read10,
        p_read11 => grp_model_array_fu_640_p_read11,
        p_read12 => grp_model_array_fu_640_p_read12,
        p_read13 => grp_model_array_fu_640_p_read13,
        biases_0_0_val => grp_model_array_fu_640_biases_0_0_val,
        biases_0_1_val => grp_model_array_fu_640_biases_0_1_val,
        output_kmin1_0_0_val => grp_model_array_fu_640_output_kmin1_0_0_val,
        output_kmin1_0_1_val => grp_model_array_fu_640_output_kmin1_0_1_val,
        delta_k_0_0_val => grp_model_array_fu_640_delta_k_0_0_val,
        delta_k_0_1_val => grp_model_array_fu_640_delta_k_0_1_val,
        training_val => training,
        ap_return_0 => grp_model_array_fu_640_ap_return_0,
        ap_return_1 => grp_model_array_fu_640_ap_return_1,
        ap_return_2 => grp_model_array_fu_640_ap_return_2,
        ap_return_3 => grp_model_array_fu_640_ap_return_3,
        ap_return_4 => grp_model_array_fu_640_ap_return_4,
        ap_return_5 => grp_model_array_fu_640_ap_return_5,
        ap_return_6 => grp_model_array_fu_640_ap_return_6,
        ap_return_7 => grp_model_array_fu_640_ap_return_7,
        ap_return_8 => grp_model_array_fu_640_ap_return_8,
        ap_return_9 => grp_model_array_fu_640_ap_return_9,
        ap_ce => grp_model_array_fu_640_ap_ce);

    dcmp_64ns_64ns_1_2_no_dsp_1_U56 : component accelerator_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_657_p0,
        din1 => ap_const_lv64_3FE0000000000000,
        ce => ap_const_logic_1,
        opcode => grp_fu_657_opcode,
        dout => grp_fu_657_p2);

    mux_4_2_13_1_1_U57 : component accelerator_mux_4_2_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        din2_WIDTH => 13,
        din3_WIDTH => 13,
        din4_WIDTH => 2,
        dout_WIDTH => 13)
    port map (
        din0 => ap_const_lv13_0,
        din1 => ap_const_lv13_0,
        din2 => ap_const_lv13_1000,
        din3 => ap_const_lv13_1000,
        din4 => trunc_ln72_fu_866_p1,
        dout => output_0_fu_870_p6);

    mux_4_2_13_1_1_U58 : component accelerator_mux_4_2_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        din2_WIDTH => 13,
        din3_WIDTH => 13,
        din4_WIDTH => 2,
        dout_WIDTH => 13)
    port map (
        din0 => ap_const_lv13_0,
        din1 => ap_const_lv13_1000,
        din2 => ap_const_lv13_0,
        din3 => ap_const_lv13_1000,
        din4 => trunc_ln72_fu_866_p1,
        dout => output_0_1_fu_889_p6);

    mux_4_2_13_1_1_U59 : component accelerator_mux_4_2_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        din2_WIDTH => 13,
        din3_WIDTH => 13,
        din4_WIDTH => 2,
        dout_WIDTH => 13)
    port map (
        din0 => ap_const_lv13_0,
        din1 => ap_const_lv13_1000,
        din2 => ap_const_lv13_1000,
        din3 => ap_const_lv13_0,
        din4 => trunc_ln72_reg_1785,
        dout => zext_ln112_cast_fu_1033_p6);

    mul_17s_10ns_27_1_1_U60 : component accelerator_mul_17s_10ns_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 10,
        dout_WIDTH => 27)
    port map (
        din0 => sub_ln112_fu_1050_p2,
        din1 => mul_ln114_fu_1064_p1,
        dout => mul_ln114_fu_1064_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state26) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state26) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state26);
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_632_p4;
                end if; 
            end if;
        end if;
    end process;


    UnifiedRetVal_reg_628_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
                UnifiedRetVal_reg_628 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                UnifiedRetVal_reg_628 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    bias_1_local_0_fu_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                bias_1_local_0_fu_280 <= bias_1_local_0_2;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                bias_1_local_0_fu_280 <= array_back1_bias_change_0_reg_2080;
            end if; 
        end if;
    end process;

    bias_1_local_1_fu_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                bias_1_local_1_fu_284 <= bias_1_local_1_2;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                bias_1_local_1_fu_284 <= array_back1_bias_change_1_reg_2086;
            end if; 
        end if;
    end process;

    bias_2_local_0_fu_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                bias_2_local_0_fu_288 <= bias_2_local_0_2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_lv1_0 = and_ln144_reg_1806) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
                bias_2_local_0_fu_288 <= array_back2_bias_change_0_reg_2004;
            end if; 
        end if;
    end process;

    bias_2_local_1_fu_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                bias_2_local_1_fu_292 <= bias_2_local_1_2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_lv1_0 = and_ln144_reg_1806) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
                bias_2_local_1_fu_292 <= array_back2_bias_change_1_reg_2010;
            end if; 
        end if;
    end process;

    j_fu_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_fu_228 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_lv1_0 = and_ln144_reg_1806) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
                j_fu_228 <= add_ln69_reg_1744;
            end if; 
        end if;
    end process;

    output_array_inference_0_1_fu_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                output_array_inference_0_1_fu_232 <= output_array_inference_0_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_lv1_0 = and_ln144_reg_1806) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
                output_array_inference_0_1_fu_232 <= select_ln96_7_fu_1531_p3;
            end if; 
        end if;
    end process;

    output_array_inference_1_1_fu_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                output_array_inference_1_1_fu_236 <= output_array_inference_1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_lv1_0 = and_ln144_reg_1806) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
                output_array_inference_1_1_fu_236 <= select_ln96_5_fu_1492_p3;
            end if; 
        end if;
    end process;

    output_array_inference_2_1_fu_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                output_array_inference_2_1_fu_240 <= output_array_inference_2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_lv1_0 = and_ln144_reg_1806) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
                output_array_inference_2_1_fu_240 <= select_ln96_3_fu_1453_p3;
            end if; 
        end if;
    end process;

    output_array_inference_3_1_fu_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                output_array_inference_3_1_fu_244 <= output_array_inference_3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_lv1_0 = and_ln144_reg_1806) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
                output_array_inference_3_1_fu_244 <= select_ln96_1_fu_1414_p3;
            end if; 
        end if;
    end process;

    w1_local_0_0_fu_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w1_local_0_0_fu_248 <= w1_local_0_0_2;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                w1_local_0_0_fu_248 <= array_back1_weight_changes_0_0_reg_2056;
            end if; 
        end if;
    end process;

    w1_local_0_1_fu_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w1_local_0_1_fu_252 <= w1_local_0_1_2;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                w1_local_0_1_fu_252 <= array_back1_weight_changes_1_0_reg_2068;
            end if; 
        end if;
    end process;

    w1_local_1_0_fu_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w1_local_1_0_fu_256 <= w1_local_1_0_2;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                w1_local_1_0_fu_256 <= array_back1_weight_changes_0_1_reg_2062;
            end if; 
        end if;
    end process;

    w1_local_1_1_fu_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w1_local_1_1_fu_260 <= w1_local_1_1_2;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                w1_local_1_1_fu_260 <= array_back1_weight_changes_1_1_reg_2074;
            end if; 
        end if;
    end process;

    w2_local_0_0_fu_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w2_local_0_0_fu_264 <= w2_local_0_0_2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_lv1_0 = and_ln144_reg_1806) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
                w2_local_0_0_fu_264 <= array_back2_weight_changes_0_0_reg_1980;
            end if; 
        end if;
    end process;

    w2_local_0_1_fu_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w2_local_0_1_fu_268 <= w2_local_0_1_2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_lv1_0 = and_ln144_reg_1806) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
                w2_local_0_1_fu_268 <= array_back2_weight_changes_1_0_reg_1992;
            end if; 
        end if;
    end process;

    w2_local_1_0_fu_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w2_local_1_0_fu_272 <= w2_local_1_0_2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_lv1_0 = and_ln144_reg_1806) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
                w2_local_1_0_fu_272 <= array_back2_weight_changes_0_1_reg_1986;
            end if; 
        end if;
    end process;

    w2_local_1_1_fu_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w2_local_1_1_fu_276 <= w2_local_1_1_2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_lv1_0 = and_ln144_reg_1806) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
                w2_local_1_1_fu_276 <= array_back2_weight_changes_1_1_reg_1998;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln69_reg_1744 <= add_ln69_fu_860_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_fu_854_p2 = ap_const_lv1_0))) then
                and_ln144_reg_1806 <= and_ln144_fu_914_p2;
                trunc_ln72_reg_1785 <= trunc_ln72_fu_866_p1;
                    zext_ln33_1_reg_1801(12 downto 0) <= zext_ln33_1_fu_903_p1(12 downto 0);
                    zext_ln33_reg_1796(12 downto 0) <= zext_ln33_fu_884_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then
                array_back1_bias_change_0_reg_2080 <= grp_model_array_fu_640_ap_return_8;
                array_back1_bias_change_1_reg_2086 <= grp_model_array_fu_640_ap_return_9;
                array_back1_weight_changes_0_0_reg_2056 <= grp_model_array_fu_640_ap_return_4;
                array_back1_weight_changes_0_1_reg_2062 <= grp_model_array_fu_640_ap_return_5;
                array_back1_weight_changes_1_0_reg_2068 <= grp_model_array_fu_640_ap_return_6;
                array_back1_weight_changes_1_1_reg_2074 <= grp_model_array_fu_640_ap_return_7;
                output_array_inference_0_1_load_1_reg_2016 <= output_array_inference_0_1_fu_232;
                output_array_inference_1_1_load_1_reg_2021 <= output_array_inference_1_1_fu_236;
                output_array_inference_2_1_load_1_reg_2026 <= output_array_inference_2_1_fu_240;
                output_array_inference_3_1_load_1_reg_2031 <= output_array_inference_3_1_fu_244;
                select_ln96_1_reg_2036 <= select_ln96_1_fu_1414_p3;
                select_ln96_3_reg_2041 <= select_ln96_3_fu_1453_p3;
                select_ln96_5_reg_2046 <= select_ln96_5_fu_1492_p3;
                select_ln96_7_reg_2051 <= select_ln96_7_fu_1531_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then
                array_back2_bias_change_0_reg_2004 <= grp_model_array_fu_640_ap_return_8;
                array_back2_bias_change_1_reg_2010 <= grp_model_array_fu_640_ap_return_9;
                array_back2_weight_changes_0_0_reg_1980 <= grp_model_array_fu_640_ap_return_4;
                array_back2_weight_changes_0_1_reg_1986 <= grp_model_array_fu_640_ap_return_5;
                array_back2_weight_changes_1_0_reg_1992 <= grp_model_array_fu_640_ap_return_6;
                array_back2_weight_changes_1_1_reg_1998 <= grp_model_array_fu_640_ap_return_7;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then
                array_back2_delta_kmin1_0_reg_1970 <= grp_model_array_fu_640_ap_return_2;
                array_back2_delta_kmin1_1_reg_1975 <= grp_model_array_fu_640_ap_return_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then
                array_out1_output_k_0_reg_1810 <= grp_model_array_fu_640_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then
                array_out1_output_k_1_reg_1815 <= grp_model_array_fu_640_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_fu_854_p2 = ap_const_lv1_0))) then
                bias_1_local_0_load_1_reg_1773 <= grp_load_fu_682_p1;
                bias_1_local_1_load_1_reg_1779 <= grp_load_fu_687_p1;
                w1_local_0_0_load_1_reg_1749 <= grp_load_fu_662_p1;
                w1_local_0_1_load_1_reg_1755 <= grp_load_fu_667_p1;
                w1_local_1_0_load_1_reg_1761 <= grp_load_fu_672_p1;
                w1_local_1_1_load_1_reg_1767 <= grp_load_fu_677_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then
                bias_2_local_0_load_1_reg_1844 <= bias_2_local_0_fu_288;
                bias_2_local_1_load_1_reg_1850 <= bias_2_local_1_fu_292;
                w2_local_0_0_load_1_reg_1820 <= w2_local_0_0_fu_264;
                w2_local_0_1_load_1_reg_1826 <= w2_local_0_1_fu_268;
                w2_local_1_0_load_1_reg_1832 <= w2_local_1_0_fu_272;
                w2_local_1_1_load_1_reg_1838 <= w2_local_1_1_fu_276;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then
                bit_select30_i_i1_reg_1895 <= bit_select30_i_i1_fu_1013_p3;
                delta_2_2_reg_1905 <= delta_2_2_fu_1084_p3;
                icmp_ln93_reg_1871 <= icmp_ln93_fu_931_p2;
                lshr_ln93_2_reg_1890 <= lshr_ln93_2_fu_1001_p2;
                select_ln93_reg_1877 <= select_ln93_fu_941_p3;
                sub_ln93_1_reg_1883 <= sub_ln93_1_fu_977_p2;
                trunc_ln93_2_reg_1900 <= trunc_ln93_2_fu_1021_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then
                bitcast_ln756_reg_1950 <= bitcast_ln756_fu_1288_p1;
                icmp_ln93_4_reg_1955 <= icmp_ln93_4_fu_1293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                icmp_ln69_reg_1740 <= icmp_ln69_fu_854_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then
                icmp_ln93_3_reg_1920 <= icmp_ln93_3_fu_1165_p2;
                lshr_ln93_reg_1925 <= lshr_ln93_fu_1180_p2;
                    or_ln_reg_1910(0) <= or_ln_fu_1154_p3(0);
                sub_ln93_2_reg_1930 <= sub_ln93_2_fu_1186_p2;
                    zext_ln93_reg_1915(15 downto 0) <= zext_ln93_fu_1162_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then
                icmp_ln93_5_reg_1945 <= icmp_ln93_5_fu_1242_p2;
                lshr_ln93_1_reg_1935 <= add_ln93_3_fu_1208_p2(63 downto 1);
                tmp_10_reg_1940 <= add_ln93_3_fu_1208_p2(54 downto 54);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then
                output_2_reg_1856 <= grp_model_array_fu_640_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then
                tmp_4_reg_1960 <= grp_fu_657_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then
                tmp_5_reg_1965 <= grp_fu_657_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then
                tmp_6_reg_1865 <= tmp_6_fu_923_p1(15 downto 15);
            end if;
        end if;
    end process;
    zext_ln33_reg_1796(15 downto 13) <= "000";
    zext_ln33_1_reg_1801(15 downto 13) <= "000";
    or_ln_reg_1910(1) <= '0';
    zext_ln93_reg_1915(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln69_reg_1740, ap_enable_reg_pp0_iter0, ap_block_pp0_stage24_subdone, ap_predicate_tran26to28_state26, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage18_subdone, ap_block_pp0_stage19_subdone, ap_block_pp0_stage20_subdone, ap_block_pp0_stage21_subdone, ap_block_pp0_stage22_subdone, ap_block_pp0_stage23_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when ap_ST_fsm_pp0_stage21 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage21_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                end if;
            when ap_ST_fsm_pp0_stage22 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage22_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                end if;
            when ap_ST_fsm_pp0_stage23 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage23_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                end if;
            when ap_ST_fsm_pp0_stage24 => 
                if ((not((((ap_predicate_tran26to28_state26 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage24_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage24_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_1)))) and (ap_const_boolean_0 = ap_block_pp0_stage24_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage24_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                elsif (((ap_predicate_tran26to28_state26 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage24_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    LD_fu_1276_p5 <= (tmp_8_fu_1269_p3 & zext_ln93_4_fu_1248_p1(51 downto 0));
    add_ln69_fu_860_p2 <= std_logic_vector(unsigned(j_fu_228) + unsigned(ap_const_lv3_1));
    add_ln93_1_fu_1007_p2 <= std_logic_vector(unsigned(trunc_ln93_fu_983_p1) + unsigned(ap_const_lv16_FFCB));
    add_ln93_2_fu_1171_p2 <= std_logic_vector(unsigned(sub_ln93_1_reg_1883) + unsigned(ap_const_lv32_FFFFFFCA));
    add_ln93_3_fu_1208_p2 <= std_logic_vector(unsigned(select_ln93_1_fu_1199_p3) + unsigned(zext_ln93_3_fu_1205_p1));
    add_ln93_4_fu_1263_p2 <= std_logic_vector(unsigned(select_ln93_2_fu_1251_p3) + unsigned(sub_ln93_3_fu_1258_p2));
    add_ln93_fu_1092_p2 <= std_logic_vector(unsigned(sub_ln93_1_reg_1883) + unsigned(ap_const_lv32_FFFFFFCB));
    and_ln144_fu_914_p2 <= (icmp_ln144_fu_908_p2 and cmp_i_i116);
    and_ln93_1_fu_1143_p2 <= (xor_ln93_1_fu_1137_p2 and bit_select30_i_i1_reg_1895);
    and_ln93_2_fu_1311_p2 <= (tmp_4_reg_1960 and or_ln93_1_fu_1307_p2);
    and_ln93_3_fu_1326_p2 <= (xor_ln93_fu_1321_p2 and and_ln93_2_fu_1311_p2);
    and_ln93_4_fu_1113_p2 <= (select_ln93_reg_1877 and lshr_ln93_2_reg_1890);
    and_ln93_fu_1123_p2 <= (icmp_ln93_2_fu_1117_p2 and icmp_ln93_1_fu_1107_p2);
    and_ln94_1_fu_1353_p2 <= (icmp_ln94_2_fu_1342_p2 and icmp_ln94_1_fu_1337_p2);
    and_ln94_2_fu_1359_p2 <= (and_ln94_fu_1347_p2 and and_ln94_1_fu_1353_p2);
    and_ln94_3_fu_1427_p2 <= (icmp_ln94_3_fu_1422_p2 and and_ln93_3_fu_1326_p2);
    and_ln94_4_fu_1466_p2 <= (icmp_ln94_4_fu_1461_p2 and and_ln93_3_fu_1326_p2);
    and_ln94_5_fu_1505_p2 <= (icmp_ln94_5_fu_1500_p2 and and_ln93_3_fu_1326_p2);
    and_ln94_fu_1347_p2 <= (icmp_ln94_fu_1332_p2 and and_ln93_3_fu_1326_p2);
    and_ln96_1_fu_1371_p2 <= (xor_ln96_fu_1365_p2 and and_ln96_fu_1316_p2);
    and_ln96_2_fu_1382_p2 <= (icmp_ln94_fu_1332_p2 and icmp_ln94_1_fu_1337_p2);
    and_ln96_3_fu_1388_p2 <= (or_ln96_fu_1377_p2 and icmp_ln94_2_fu_1342_p2);
    and_ln96_4_fu_1394_p2 <= (and_ln96_3_fu_1388_p2 and and_ln96_2_fu_1382_p2);
    and_ln96_5_fu_1433_p2 <= (or_ln96_fu_1377_p2 and icmp_ln94_3_fu_1422_p2);
    and_ln96_6_fu_1472_p2 <= (or_ln96_fu_1377_p2 and icmp_ln94_4_fu_1461_p2);
    and_ln96_7_fu_1511_p2 <= (or_ln96_fu_1377_p2 and icmp_ln94_5_fu_1500_p2);
    and_ln96_fu_1316_p2 <= (tmp_5_reg_1965 and or_ln93_1_fu_1307_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage16 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage17 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage18 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage19 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage20 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage21 <= ap_CS_fsm(22);
    ap_CS_fsm_pp0_stage22 <= ap_CS_fsm(23);
    ap_CS_fsm_pp0_stage23 <= ap_CS_fsm(24);
    ap_CS_fsm_pp0_stage24 <= ap_CS_fsm(25);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state28 <= ap_CS_fsm(26);
    ap_CS_fsm_state29 <= ap_CS_fsm(27);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp98 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001_ignoreCallOp119 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001_ignoreCallOp120 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001_ignoreCallOp167 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001_ignoreCallOp177 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001_ignoreCallOp187 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_11001_ignoreCallOp190 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_11001_ignoreCallOp192 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_11001_ignoreCallOp193 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_11001_ignoreCallOp202 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001_ignoreCallOp102 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_11001_ignoreCallOp203 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_11001_ignoreCallOp204 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_11001_ignoreCallOp205 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_11001_ignoreCallOp206 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_11001_ignoreCallOp252 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001_ignoreCallOp103 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001_ignoreCallOp104 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001_ignoreCallOp105 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001_ignoreCallOp106 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001_ignoreCallOp115 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001_ignoreCallOp116 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001_ignoreCallOp117 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001_ignoreCallOp118 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage8_iter0_ignore_call27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage9_iter0_ignore_call27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage10_iter0_ignore_call27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage11_iter0_ignore_call27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage13_iter0_ignore_call131 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage14_iter0_ignore_call131 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage15_iter0_ignore_call131 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage16_iter0_ignore_call131 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage17_iter0_ignore_call131 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage18_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage18_iter0_ignore_call131 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage19_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage19_iter0_ignore_call140 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage20_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage20_iter0_ignore_call140 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage21_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage21_iter0_ignore_call140 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage22_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage22_iter0_ignore_call140 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage23_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage23_iter0_ignore_call140 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage24_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage24_iter0_ignore_call140 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter1_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0_ignore_call27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage7_iter0_ignore_call27 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1559_assign_proc : process(icmp_ln69_fu_854_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
                ap_condition_1559 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln69_fu_854_p2 = ap_const_lv1_0));
    end process;


    ap_condition_1563_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6)
    begin
                ap_condition_1563 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (icmp_ln69_reg_1740 = ap_const_lv1_0));
    end process;


    ap_condition_1567_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13)
    begin
                ap_condition_1567 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (icmp_ln69_reg_1740 = ap_const_lv1_0));
    end process;


    ap_condition_1571_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage19)
    begin
                ap_condition_1571 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19) and (icmp_ln69_reg_1740 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state26_assign_proc : process(icmp_ln69_reg_1740, ap_predicate_tran26to28_state26)
    begin
        if (((ap_predicate_tran26to28_state26 = ap_const_boolean_1) or (icmp_ln69_reg_1740 = ap_const_lv1_1))) then 
            ap_condition_pp0_exit_iter0_state26 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_UnifiedRetVal_phi_fu_632_p4_assign_proc : process(icmp_ln69_reg_1740, UnifiedRetVal_reg_628, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_632_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_UnifiedRetVal_phi_fu_632_p4 <= UnifiedRetVal_reg_628;
        end if; 
    end process;


    ap_predicate_tran26to28_state26_assign_proc : process(icmp_ln69_reg_1740, and_ln144_reg_1806)
    begin
                ap_predicate_tran26to28_state26 <= ((ap_const_lv1_1 = and_ln144_reg_1806) and (icmp_ln69_reg_1740 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_UnifiedRetVal_phi_fu_632_p4, ap_CS_fsm_state28, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            ap_return <= ap_phi_mux_UnifiedRetVal_phi_fu_632_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_allocacmp_bias_1_local_0_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, array_back1_bias_change_0_reg_2080, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, bias_1_local_0_fu_280)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_bias_1_local_0_load_1 <= array_back1_bias_change_0_reg_2080;
        else 
            ap_sig_allocacmp_bias_1_local_0_load_1 <= bias_1_local_0_fu_280;
        end if; 
    end process;


    ap_sig_allocacmp_bias_1_local_1_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, array_back1_bias_change_1_reg_2086, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, bias_1_local_1_fu_284)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_bias_1_local_1_load_1 <= array_back1_bias_change_1_reg_2086;
        else 
            ap_sig_allocacmp_bias_1_local_1_load_1 <= bias_1_local_1_fu_284;
        end if; 
    end process;


    ap_sig_allocacmp_w1_local_0_0_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, array_back1_weight_changes_0_0_reg_2056, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, w1_local_0_0_fu_248)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_w1_local_0_0_load_1 <= array_back1_weight_changes_0_0_reg_2056;
        else 
            ap_sig_allocacmp_w1_local_0_0_load_1 <= w1_local_0_0_fu_248;
        end if; 
    end process;


    ap_sig_allocacmp_w1_local_0_1_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, array_back1_weight_changes_1_0_reg_2068, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, w1_local_0_1_fu_252)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_w1_local_0_1_load_1 <= array_back1_weight_changes_1_0_reg_2068;
        else 
            ap_sig_allocacmp_w1_local_0_1_load_1 <= w1_local_0_1_fu_252;
        end if; 
    end process;


    ap_sig_allocacmp_w1_local_1_0_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, array_back1_weight_changes_0_1_reg_2062, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, w1_local_1_0_fu_256)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_w1_local_1_0_load_1 <= array_back1_weight_changes_0_1_reg_2062;
        else 
            ap_sig_allocacmp_w1_local_1_0_load_1 <= w1_local_1_0_fu_256;
        end if; 
    end process;


    ap_sig_allocacmp_w1_local_1_1_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, array_back1_weight_changes_1_1_reg_2074, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, w1_local_1_1_fu_260)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_w1_local_1_1_load_1 <= array_back1_weight_changes_1_1_reg_2074;
        else 
            ap_sig_allocacmp_w1_local_1_1_load_1 <= w1_local_1_1_fu_260;
        end if; 
    end process;

    array_back1_bias_change_0_out <= array_back1_bias_change_0_reg_2080;

    array_back1_bias_change_0_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            array_back1_bias_change_0_out_ap_vld <= ap_const_logic_1;
        else 
            array_back1_bias_change_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    array_back1_bias_change_1_out <= array_back1_bias_change_1_reg_2086;

    array_back1_bias_change_1_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            array_back1_bias_change_1_out_ap_vld <= ap_const_logic_1;
        else 
            array_back1_bias_change_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    array_back1_weight_changes_0_0_out <= array_back1_weight_changes_0_0_reg_2056;

    array_back1_weight_changes_0_0_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            array_back1_weight_changes_0_0_out_ap_vld <= ap_const_logic_1;
        else 
            array_back1_weight_changes_0_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    array_back1_weight_changes_0_1_out <= array_back1_weight_changes_0_1_reg_2062;

    array_back1_weight_changes_0_1_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            array_back1_weight_changes_0_1_out_ap_vld <= ap_const_logic_1;
        else 
            array_back1_weight_changes_0_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    array_back1_weight_changes_1_0_out <= array_back1_weight_changes_1_0_reg_2068;

    array_back1_weight_changes_1_0_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            array_back1_weight_changes_1_0_out_ap_vld <= ap_const_logic_1;
        else 
            array_back1_weight_changes_1_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    array_back1_weight_changes_1_1_out <= array_back1_weight_changes_1_1_reg_2074;

    array_back1_weight_changes_1_1_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            array_back1_weight_changes_1_1_out_ap_vld <= ap_const_logic_1;
        else 
            array_back1_weight_changes_1_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    array_back2_bias_change_0_out <= array_back2_bias_change_0_reg_2004;

    array_back2_bias_change_0_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            array_back2_bias_change_0_out_ap_vld <= ap_const_logic_1;
        else 
            array_back2_bias_change_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    array_back2_bias_change_1_out <= array_back2_bias_change_1_reg_2010;

    array_back2_bias_change_1_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            array_back2_bias_change_1_out_ap_vld <= ap_const_logic_1;
        else 
            array_back2_bias_change_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    array_back2_weight_changes_0_0_out <= array_back2_weight_changes_0_0_reg_1980;

    array_back2_weight_changes_0_0_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            array_back2_weight_changes_0_0_out_ap_vld <= ap_const_logic_1;
        else 
            array_back2_weight_changes_0_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    array_back2_weight_changes_0_1_out <= array_back2_weight_changes_0_1_reg_1986;

    array_back2_weight_changes_0_1_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            array_back2_weight_changes_0_1_out_ap_vld <= ap_const_logic_1;
        else 
            array_back2_weight_changes_0_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    array_back2_weight_changes_1_0_out <= array_back2_weight_changes_1_0_reg_1992;

    array_back2_weight_changes_1_0_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            array_back2_weight_changes_1_0_out_ap_vld <= ap_const_logic_1;
        else 
            array_back2_weight_changes_1_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    array_back2_weight_changes_1_1_out <= array_back2_weight_changes_1_1_reg_1998;

    array_back2_weight_changes_1_1_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            array_back2_weight_changes_1_1_out_ap_vld <= ap_const_logic_1;
        else 
            array_back2_weight_changes_1_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    bias_1_local_0_3_out_assign_proc : process(icmp_ln69_reg_1740, grp_load_fu_682_p1, bias_1_local_0_load_1_reg_1773, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            bias_1_local_0_3_out <= grp_load_fu_682_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            bias_1_local_0_3_out <= bias_1_local_0_load_1_reg_1773;
        else 
            bias_1_local_0_3_out <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bias_1_local_0_3_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0)))) then 
            bias_1_local_0_3_out_ap_vld <= ap_const_logic_1;
        else 
            bias_1_local_0_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    bias_1_local_1_3_out_assign_proc : process(icmp_ln69_reg_1740, grp_load_fu_687_p1, bias_1_local_1_load_1_reg_1779, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            bias_1_local_1_3_out <= grp_load_fu_687_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            bias_1_local_1_3_out <= bias_1_local_1_load_1_reg_1779;
        else 
            bias_1_local_1_3_out <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bias_1_local_1_3_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0)))) then 
            bias_1_local_1_3_out_ap_vld <= ap_const_logic_1;
        else 
            bias_1_local_1_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    bias_2_local_0_3_out_assign_proc : process(icmp_ln69_reg_1740, bias_2_local_0_load_1_reg_1844, ap_CS_fsm_state29, ap_CS_fsm_state28, bias_2_local_0_fu_288)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            bias_2_local_0_3_out <= bias_2_local_0_fu_288;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            bias_2_local_0_3_out <= bias_2_local_0_load_1_reg_1844;
        else 
            bias_2_local_0_3_out <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bias_2_local_0_3_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0)))) then 
            bias_2_local_0_3_out_ap_vld <= ap_const_logic_1;
        else 
            bias_2_local_0_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    bias_2_local_1_3_out_assign_proc : process(icmp_ln69_reg_1740, bias_2_local_1_load_1_reg_1850, ap_CS_fsm_state29, ap_CS_fsm_state28, bias_2_local_1_fu_292)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            bias_2_local_1_3_out <= bias_2_local_1_fu_292;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            bias_2_local_1_3_out <= bias_2_local_1_load_1_reg_1850;
        else 
            bias_2_local_1_3_out <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bias_2_local_1_3_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0)))) then 
            bias_2_local_1_3_out_ap_vld <= ap_const_logic_1;
        else 
            bias_2_local_1_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bit_select30_i_i1_fu_1013_p3 <= select_ln93_fu_941_p3(to_integer(unsigned(add_ln93_1_fu_1007_p2)) downto to_integer(unsigned(add_ln93_1_fu_1007_p2))) when (to_integer(unsigned(add_ln93_1_fu_1007_p2)) >= 0 and to_integer(unsigned(add_ln93_1_fu_1007_p2)) <=15) else "-";
    bitcast_ln756_fu_1288_p1 <= LD_fu_1276_p5;
    delta_2_1_fu_1070_p4 <= mul_ln114_fu_1064_p2(26 downto 12);
    delta_2_2_fu_1084_p3 <= 
        delta_2_fu_1056_p1 when (icmp_ln111_fu_1025_p2(0) = '1') else 
        sext_ln114_1_fu_1080_p1;
    delta_2_fu_1056_p1 <= sub_ln112_fu_1050_p2(16 - 1 downto 0);

    grp_fu_657_opcode_assign_proc : process(icmp_ln69_reg_1740, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage15_00001, ap_block_pp0_stage16_00001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_00001))) then 
                grp_fu_657_opcode <= ap_const_lv5_5;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_00001))) then 
                grp_fu_657_opcode <= ap_const_lv5_2;
            else 
                grp_fu_657_opcode <= "XXXXX";
            end if;
        else 
            grp_fu_657_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_657_p0_assign_proc : process(ap_enable_reg_pp0_iter0, bitcast_ln756_fu_1288_p1, bitcast_ln756_reg_1950, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage15, ap_block_pp0_stage16)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16))) then 
                grp_fu_657_p0 <= bitcast_ln756_reg_1950;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15))) then 
                grp_fu_657_p0 <= bitcast_ln756_fu_1288_p1;
            else 
                grp_fu_657_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_657_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_load_fu_662_p1_assign_proc : process(icmp_ln69_fu_854_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state29, ap_block_pp0_stage0, w1_local_0_0_fu_248, ap_sig_allocacmp_w1_local_0_0_load_1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_load_fu_662_p1 <= w1_local_0_0_fu_248;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_fu_854_p2 = ap_const_lv1_0))) then 
            grp_load_fu_662_p1 <= ap_sig_allocacmp_w1_local_0_0_load_1;
        else 
            grp_load_fu_662_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_load_fu_667_p1_assign_proc : process(icmp_ln69_fu_854_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state29, ap_block_pp0_stage0, w1_local_0_1_fu_252, ap_sig_allocacmp_w1_local_0_1_load_1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_load_fu_667_p1 <= w1_local_0_1_fu_252;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_fu_854_p2 = ap_const_lv1_0))) then 
            grp_load_fu_667_p1 <= ap_sig_allocacmp_w1_local_0_1_load_1;
        else 
            grp_load_fu_667_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_load_fu_672_p1_assign_proc : process(icmp_ln69_fu_854_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state29, ap_block_pp0_stage0, w1_local_1_0_fu_256, ap_sig_allocacmp_w1_local_1_0_load_1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_load_fu_672_p1 <= w1_local_1_0_fu_256;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_fu_854_p2 = ap_const_lv1_0))) then 
            grp_load_fu_672_p1 <= ap_sig_allocacmp_w1_local_1_0_load_1;
        else 
            grp_load_fu_672_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_load_fu_677_p1_assign_proc : process(icmp_ln69_fu_854_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state29, ap_block_pp0_stage0, w1_local_1_1_fu_260, ap_sig_allocacmp_w1_local_1_1_load_1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_load_fu_677_p1 <= w1_local_1_1_fu_260;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_fu_854_p2 = ap_const_lv1_0))) then 
            grp_load_fu_677_p1 <= ap_sig_allocacmp_w1_local_1_1_load_1;
        else 
            grp_load_fu_677_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_load_fu_682_p1_assign_proc : process(icmp_ln69_fu_854_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state29, ap_block_pp0_stage0, bias_1_local_0_fu_280, ap_sig_allocacmp_bias_1_local_0_load_1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_load_fu_682_p1 <= bias_1_local_0_fu_280;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_fu_854_p2 = ap_const_lv1_0))) then 
            grp_load_fu_682_p1 <= ap_sig_allocacmp_bias_1_local_0_load_1;
        else 
            grp_load_fu_682_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_load_fu_687_p1_assign_proc : process(icmp_ln69_fu_854_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state29, ap_block_pp0_stage0, bias_1_local_1_fu_284, ap_sig_allocacmp_bias_1_local_1_load_1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_load_fu_687_p1 <= bias_1_local_1_fu_284;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_fu_854_p2 = ap_const_lv1_0))) then 
            grp_load_fu_687_p1 <= ap_sig_allocacmp_bias_1_local_1_load_1;
        else 
            grp_load_fu_687_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_model_array_fu_640_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage17, ap_CS_fsm_pp0_stage18, ap_CS_fsm_pp0_stage24, ap_block_pp0_stage0_11001_ignoreCallOp98, ap_block_pp0_stage1_11001_ignoreCallOp102, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage2_11001_ignoreCallOp103, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage3_11001_ignoreCallOp104, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage4_11001_ignoreCallOp105, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage5_11001_ignoreCallOp106, ap_block_pp0_stage6_11001_ignoreCallOp115, ap_block_pp0_stage7_11001_ignoreCallOp116, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage8_11001_ignoreCallOp117, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage9_11001_ignoreCallOp118, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage10_11001_ignoreCallOp119, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage11_11001_ignoreCallOp120, ap_block_pp0_stage13_11001_ignoreCallOp167, ap_block_pp0_stage14_11001_ignoreCallOp177, ap_block_pp0_stage15_11001_ignoreCallOp187, ap_block_pp0_stage16_11001_ignoreCallOp190, ap_block_pp0_stage17_11001_ignoreCallOp192, ap_block_pp0_stage18_11001_ignoreCallOp193, ap_block_pp0_stage19_11001_ignoreCallOp202, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage20_11001_ignoreCallOp203, ap_CS_fsm_pp0_stage20, ap_block_pp0_stage21_11001_ignoreCallOp204, ap_CS_fsm_pp0_stage21, ap_block_pp0_stage22_11001_ignoreCallOp205, ap_CS_fsm_pp0_stage22, ap_block_pp0_stage23_11001_ignoreCallOp206, ap_CS_fsm_pp0_stage23, ap_block_pp0_stage24_11001_ignoreCallOp252)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23_11001_ignoreCallOp206)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22_11001_ignoreCallOp205)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_const_boolean_0 = ap_block_pp0_stage21_11001_ignoreCallOp204)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001_ignoreCallOp203)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19_11001_ignoreCallOp202)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001_ignoreCallOp119)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001_ignoreCallOp118)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001_ignoreCallOp117)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001_ignoreCallOp116)) 
    or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001_ignoreCallOp105)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001_ignoreCallOp104)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_ignoreCallOp103)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp102)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001_ignoreCallOp252)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001_ignoreCallOp193)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001_ignoreCallOp192)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001_ignoreCallOp190)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001_ignoreCallOp187)) 
    or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001_ignoreCallOp177)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001_ignoreCallOp167)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001_ignoreCallOp120)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001_ignoreCallOp115)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001_ignoreCallOp106)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp98)))) then 
            grp_model_array_fu_640_ap_ce <= ap_const_logic_1;
        else 
            grp_model_array_fu_640_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_model_array_fu_640_biases_0_0_val_assign_proc : process(ap_enable_reg_pp0_iter0, grp_load_fu_682_p1, bias_1_local_0_load_1_reg_1773, bias_2_local_0_load_1_reg_1844, bias_2_local_0_fu_288, ap_condition_1559, ap_condition_1563, ap_condition_1567, ap_condition_1571)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_1571)) then 
                grp_model_array_fu_640_biases_0_0_val <= bias_1_local_0_load_1_reg_1773;
            elsif ((ap_const_boolean_1 = ap_condition_1567)) then 
                grp_model_array_fu_640_biases_0_0_val <= bias_2_local_0_load_1_reg_1844;
            elsif ((ap_const_boolean_1 = ap_condition_1563)) then 
                grp_model_array_fu_640_biases_0_0_val <= bias_2_local_0_fu_288;
            elsif ((ap_const_boolean_1 = ap_condition_1559)) then 
                grp_model_array_fu_640_biases_0_0_val <= grp_load_fu_682_p1;
            else 
                grp_model_array_fu_640_biases_0_0_val <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_model_array_fu_640_biases_0_0_val <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_model_array_fu_640_biases_0_1_val_assign_proc : process(ap_enable_reg_pp0_iter0, grp_load_fu_687_p1, bias_1_local_1_load_1_reg_1779, bias_2_local_1_load_1_reg_1850, bias_2_local_1_fu_292, ap_condition_1559, ap_condition_1563, ap_condition_1567, ap_condition_1571)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_1571)) then 
                grp_model_array_fu_640_biases_0_1_val <= bias_1_local_1_load_1_reg_1779;
            elsif ((ap_const_boolean_1 = ap_condition_1567)) then 
                grp_model_array_fu_640_biases_0_1_val <= bias_2_local_1_load_1_reg_1850;
            elsif ((ap_const_boolean_1 = ap_condition_1563)) then 
                grp_model_array_fu_640_biases_0_1_val <= bias_2_local_1_fu_292;
            elsif ((ap_const_boolean_1 = ap_condition_1559)) then 
                grp_model_array_fu_640_biases_0_1_val <= grp_load_fu_687_p1;
            else 
                grp_model_array_fu_640_biases_0_1_val <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_model_array_fu_640_biases_0_1_val <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_model_array_fu_640_delta_k_0_0_val_assign_proc : process(icmp_ln69_fu_854_p2, icmp_ln69_reg_1740, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, delta_2_2_reg_1905, ap_CS_fsm_pp0_stage13, array_back2_delta_kmin1_0_reg_1970, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage0, ap_block_pp0_stage6, ap_block_pp0_stage13, ap_block_pp0_stage19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            grp_model_array_fu_640_delta_k_0_0_val <= array_back2_delta_kmin1_0_reg_1970;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            grp_model_array_fu_640_delta_k_0_0_val <= delta_2_2_reg_1905;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_fu_854_p2 = ap_const_lv1_0)))) then 
            grp_model_array_fu_640_delta_k_0_0_val <= ap_const_lv16_0;
        else 
            grp_model_array_fu_640_delta_k_0_0_val <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_model_array_fu_640_delta_k_0_1_val_assign_proc : process(icmp_ln69_fu_854_p2, icmp_ln69_reg_1740, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage13, array_back2_delta_kmin1_1_reg_1975, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage0, ap_block_pp0_stage6, ap_block_pp0_stage13, ap_block_pp0_stage19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            grp_model_array_fu_640_delta_k_0_1_val <= array_back2_delta_kmin1_1_reg_1975;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_fu_854_p2 = ap_const_lv1_0)))) then 
            grp_model_array_fu_640_delta_k_0_1_val <= ap_const_lv16_0;
        else 
            grp_model_array_fu_640_delta_k_0_1_val <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_model_array_fu_640_output_kmin1_0_0_val_assign_proc : process(icmp_ln69_fu_854_p2, icmp_ln69_reg_1740, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln33_fu_884_p1, zext_ln33_reg_1796, array_out1_output_k_0_reg_1810, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage0, ap_block_pp0_stage6, ap_block_pp0_stage13, ap_block_pp0_stage19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            grp_model_array_fu_640_output_kmin1_0_0_val <= zext_ln33_reg_1796;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0)))) then 
            grp_model_array_fu_640_output_kmin1_0_0_val <= array_out1_output_k_0_reg_1810;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_fu_854_p2 = ap_const_lv1_0))) then 
            grp_model_array_fu_640_output_kmin1_0_0_val <= zext_ln33_fu_884_p1;
        else 
            grp_model_array_fu_640_output_kmin1_0_0_val <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_model_array_fu_640_output_kmin1_0_1_val_assign_proc : process(icmp_ln69_fu_854_p2, icmp_ln69_reg_1740, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln33_1_fu_903_p1, zext_ln33_1_reg_1801, array_out1_output_k_1_reg_1815, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage0, ap_block_pp0_stage6, ap_block_pp0_stage13, ap_block_pp0_stage19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            grp_model_array_fu_640_output_kmin1_0_1_val <= zext_ln33_1_reg_1801;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_1740 = ap_const_lv1_0)))) then 
            grp_model_array_fu_640_output_kmin1_0_1_val <= array_out1_output_k_1_reg_1815;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_fu_854_p2 = ap_const_lv1_0))) then 
            grp_model_array_fu_640_output_kmin1_0_1_val <= zext_ln33_1_fu_903_p1;
        else 
            grp_model_array_fu_640_output_kmin1_0_1_val <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_model_array_fu_640_p_read10_assign_proc : process(ap_enable_reg_pp0_iter0, grp_load_fu_662_p1, w1_local_0_0_load_1_reg_1749, w2_local_0_0_load_1_reg_1820, w2_local_0_0_fu_264, ap_condition_1559, ap_condition_1563, ap_condition_1567, ap_condition_1571)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_1571)) then 
                grp_model_array_fu_640_p_read10 <= w1_local_0_0_load_1_reg_1749;
            elsif ((ap_const_boolean_1 = ap_condition_1567)) then 
                grp_model_array_fu_640_p_read10 <= w2_local_0_0_load_1_reg_1820;
            elsif ((ap_const_boolean_1 = ap_condition_1563)) then 
                grp_model_array_fu_640_p_read10 <= w2_local_0_0_fu_264;
            elsif ((ap_const_boolean_1 = ap_condition_1559)) then 
                grp_model_array_fu_640_p_read10 <= grp_load_fu_662_p1;
            else 
                grp_model_array_fu_640_p_read10 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_model_array_fu_640_p_read10 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_model_array_fu_640_p_read11_assign_proc : process(ap_enable_reg_pp0_iter0, grp_load_fu_667_p1, w1_local_0_1_load_1_reg_1755, w2_local_0_1_load_1_reg_1826, w2_local_0_1_fu_268, ap_condition_1559, ap_condition_1563, ap_condition_1567, ap_condition_1571)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_1571)) then 
                grp_model_array_fu_640_p_read11 <= w1_local_0_1_load_1_reg_1755;
            elsif ((ap_const_boolean_1 = ap_condition_1567)) then 
                grp_model_array_fu_640_p_read11 <= w2_local_0_1_load_1_reg_1826;
            elsif ((ap_const_boolean_1 = ap_condition_1563)) then 
                grp_model_array_fu_640_p_read11 <= w2_local_0_1_fu_268;
            elsif ((ap_const_boolean_1 = ap_condition_1559)) then 
                grp_model_array_fu_640_p_read11 <= grp_load_fu_667_p1;
            else 
                grp_model_array_fu_640_p_read11 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_model_array_fu_640_p_read11 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_model_array_fu_640_p_read12_assign_proc : process(ap_enable_reg_pp0_iter0, grp_load_fu_672_p1, w1_local_1_0_load_1_reg_1761, w2_local_1_0_load_1_reg_1832, w2_local_1_0_fu_272, ap_condition_1559, ap_condition_1563, ap_condition_1567, ap_condition_1571)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_1571)) then 
                grp_model_array_fu_640_p_read12 <= w1_local_1_0_load_1_reg_1761;
            elsif ((ap_const_boolean_1 = ap_condition_1567)) then 
                grp_model_array_fu_640_p_read12 <= w2_local_1_0_load_1_reg_1832;
            elsif ((ap_const_boolean_1 = ap_condition_1563)) then 
                grp_model_array_fu_640_p_read12 <= w2_local_1_0_fu_272;
            elsif ((ap_const_boolean_1 = ap_condition_1559)) then 
                grp_model_array_fu_640_p_read12 <= grp_load_fu_672_p1;
            else 
                grp_model_array_fu_640_p_read12 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_model_array_fu_640_p_read12 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_model_array_fu_640_p_read13_assign_proc : process(ap_enable_reg_pp0_iter0, grp_load_fu_677_p1, w1_local_1_1_load_1_reg_1767, w2_local_1_1_load_1_reg_1838, w2_local_1_1_fu_276, ap_condition_1559, ap_condition_1563, ap_condition_1567, ap_condition_1571)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_1571)) then 
                grp_model_array_fu_640_p_read13 <= w1_local_1_1_load_1_reg_1767;
            elsif ((ap_const_boolean_1 = ap_condition_1567)) then 
                grp_model_array_fu_640_p_read13 <= w2_local_1_1_load_1_reg_1838;
            elsif ((ap_const_boolean_1 = ap_condition_1563)) then 
                grp_model_array_fu_640_p_read13 <= w2_local_1_1_fu_276;
            elsif ((ap_const_boolean_1 = ap_condition_1559)) then 
                grp_model_array_fu_640_p_read13 <= grp_load_fu_677_p1;
            else 
                grp_model_array_fu_640_p_read13 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_model_array_fu_640_p_read13 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln111_fu_1025_p2 <= "1" when (signed(output_2_reg_1856) > signed(ap_const_lv16_0)) else "0";
    icmp_ln144_fu_908_p2 <= "1" when (j_fu_228 = ap_const_lv3_3) else "0";
    icmp_ln69_fu_854_p2 <= "1" when (j_fu_228 = ap_const_lv3_4) else "0";
    icmp_ln93_1_fu_1107_p2 <= "1" when (signed(tmp_7_fu_1097_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln93_2_fu_1117_p2 <= "0" when (and_ln93_4_fu_1113_p2 = ap_const_lv16_0) else "1";
    icmp_ln93_3_fu_1165_p2 <= "1" when (signed(add_ln93_fu_1092_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln93_4_fu_1293_p2 <= "0" when (add_ln93_4_fu_1263_p2 = ap_const_lv11_7FF) else "1";
    icmp_ln93_5_fu_1242_p2 <= "1" when (trunc_ln93_3_fu_1232_p4 = ap_const_lv52_0) else "0";
    icmp_ln93_fu_931_p2 <= "1" when (output_2_reg_1856 = ap_const_lv16_0) else "0";
    icmp_ln94_1_fu_1337_p2 <= "0" when (trunc_ln72_reg_1785 = ap_const_lv2_1) else "1";
    icmp_ln94_2_fu_1342_p2 <= "0" when (trunc_ln72_reg_1785 = ap_const_lv2_2) else "1";
    icmp_ln94_3_fu_1422_p2 <= "1" when (trunc_ln72_reg_1785 = ap_const_lv2_2) else "0";
    icmp_ln94_4_fu_1461_p2 <= "1" when (trunc_ln72_reg_1785 = ap_const_lv2_1) else "0";
    icmp_ln94_5_fu_1500_p2 <= "1" when (trunc_ln72_reg_1785 = ap_const_lv2_0) else "0";
    icmp_ln94_fu_1332_p2 <= "0" when (trunc_ln72_reg_1785 = ap_const_lv2_0) else "1";
    lshr_ln93_2_fu_1001_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln93_5_fu_997_p1(16-1 downto 0)))));
    lshr_ln93_fu_1180_p2 <= std_logic_vector(shift_right(unsigned(zext_ln93_fu_1162_p1),to_integer(unsigned('0' & zext_ln93_1_fu_1176_p1(31-1 downto 0)))));
    mul_ln114_fu_1064_p1 <= ap_const_lv27_199(10 - 1 downto 0);
    or_ln93_1_fu_1307_p2 <= (icmp_ln93_5_reg_1945 or icmp_ln93_4_reg_1955);
    or_ln93_fu_1148_p2 <= (and_ln93_fu_1123_p2 or and_ln93_1_fu_1143_p2);
    or_ln96_1_fu_1408_p2 <= (and_ln96_4_fu_1394_p2 or and_ln94_2_fu_1359_p2);
    or_ln96_2_fu_1447_p2 <= (and_ln96_5_fu_1433_p2 or and_ln94_3_fu_1427_p2);
    or_ln96_3_fu_1486_p2 <= (and_ln96_6_fu_1472_p2 or and_ln94_4_fu_1466_p2);
    or_ln96_4_fu_1525_p2 <= (and_ln96_7_fu_1511_p2 or and_ln94_5_fu_1505_p2);
    or_ln96_fu_1377_p2 <= (icmp_ln93_reg_1871 or and_ln96_1_fu_1371_p2);
    or_ln_fu_1154_p3 <= (ap_const_lv1_0 & or_ln93_fu_1148_p2);

    output_array_inference_0_1_out_assign_proc : process(icmp_ln69_reg_1740, output_array_inference_0_1_load_1_reg_2016, ap_CS_fsm_state29, ap_CS_fsm_state28, output_array_inference_0_1_fu_232)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_array_inference_0_1_out <= output_array_inference_0_1_fu_232;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            output_array_inference_0_1_out <= output_array_inference_0_1_load_1_reg_2016;
        else 
            output_array_inference_0_1_out <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_array_inference_0_1_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0)))) then 
            output_array_inference_0_1_out_ap_vld <= ap_const_logic_1;
        else 
            output_array_inference_0_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    output_array_inference_1_1_out_assign_proc : process(icmp_ln69_reg_1740, output_array_inference_1_1_load_1_reg_2021, ap_CS_fsm_state29, ap_CS_fsm_state28, output_array_inference_1_1_fu_236)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_array_inference_1_1_out <= output_array_inference_1_1_fu_236;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            output_array_inference_1_1_out <= output_array_inference_1_1_load_1_reg_2021;
        else 
            output_array_inference_1_1_out <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_array_inference_1_1_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0)))) then 
            output_array_inference_1_1_out_ap_vld <= ap_const_logic_1;
        else 
            output_array_inference_1_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    output_array_inference_2_1_out_assign_proc : process(icmp_ln69_reg_1740, output_array_inference_2_1_load_1_reg_2026, ap_CS_fsm_state29, ap_CS_fsm_state28, output_array_inference_2_1_fu_240)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_array_inference_2_1_out <= output_array_inference_2_1_fu_240;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            output_array_inference_2_1_out <= output_array_inference_2_1_load_1_reg_2026;
        else 
            output_array_inference_2_1_out <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_array_inference_2_1_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0)))) then 
            output_array_inference_2_1_out_ap_vld <= ap_const_logic_1;
        else 
            output_array_inference_2_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    output_array_inference_3_1_out_assign_proc : process(icmp_ln69_reg_1740, output_array_inference_3_1_load_1_reg_2031, ap_CS_fsm_state29, ap_CS_fsm_state28, output_array_inference_3_1_fu_244)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_array_inference_3_1_out <= output_array_inference_3_1_fu_244;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            output_array_inference_3_1_out <= output_array_inference_3_1_load_1_reg_2031;
        else 
            output_array_inference_3_1_out <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_array_inference_3_1_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0)))) then 
            output_array_inference_3_1_out_ap_vld <= ap_const_logic_1;
        else 
            output_array_inference_3_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln93_1_fu_1199_p3 <= 
        lshr_ln93_reg_1925 when (icmp_ln93_3_reg_1920(0) = '1') else 
        shl_ln93_fu_1194_p2;
    select_ln93_2_fu_1251_p3 <= 
        ap_const_lv11_3FF when (tmp_10_reg_1940(0) = '1') else 
        ap_const_lv11_3FE;
    select_ln93_fu_941_p3 <= 
        sub_ln93_fu_936_p2 when (tmp_6_reg_1865(0) = '1') else 
        output_2_reg_1856;
    select_ln96_1_fu_1414_p3 <= 
        select_ln96_fu_1400_p3 when (or_ln96_1_fu_1408_p2(0) = '1') else 
        output_array_inference_3_1_fu_244;
    select_ln96_1_out <= select_ln96_1_reg_2036;

    select_ln96_1_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            select_ln96_1_out_ap_vld <= ap_const_logic_1;
        else 
            select_ln96_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln96_2_fu_1439_p3 <= 
        ap_const_lv16_0 when (and_ln96_5_fu_1433_p2(0) = '1') else 
        ap_const_lv16_1000;
    select_ln96_3_fu_1453_p3 <= 
        select_ln96_2_fu_1439_p3 when (or_ln96_2_fu_1447_p2(0) = '1') else 
        output_array_inference_2_1_fu_240;
    select_ln96_3_out <= select_ln96_3_reg_2041;

    select_ln96_3_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            select_ln96_3_out_ap_vld <= ap_const_logic_1;
        else 
            select_ln96_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln96_4_fu_1478_p3 <= 
        ap_const_lv16_0 when (and_ln96_6_fu_1472_p2(0) = '1') else 
        ap_const_lv16_1000;
    select_ln96_5_fu_1492_p3 <= 
        select_ln96_4_fu_1478_p3 when (or_ln96_3_fu_1486_p2(0) = '1') else 
        output_array_inference_1_1_fu_236;
    select_ln96_5_out <= select_ln96_5_reg_2046;

    select_ln96_5_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            select_ln96_5_out_ap_vld <= ap_const_logic_1;
        else 
            select_ln96_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln96_6_fu_1517_p3 <= 
        ap_const_lv16_0 when (and_ln96_7_fu_1511_p2(0) = '1') else 
        ap_const_lv16_1000;
    select_ln96_7_fu_1531_p3 <= 
        select_ln96_6_fu_1517_p3 when (or_ln96_4_fu_1525_p2(0) = '1') else 
        output_array_inference_0_1_fu_232;
    select_ln96_7_out <= select_ln96_7_reg_2051;

    select_ln96_7_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            select_ln96_7_out_ap_vld <= ap_const_logic_1;
        else 
            select_ln96_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln96_fu_1400_p3 <= 
        ap_const_lv16_0 when (and_ln96_4_fu_1394_p2(0) = '1') else 
        ap_const_lv16_1000;
        sext_ln112_fu_1030_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_2_reg_1856),17));

        sext_ln114_1_fu_1080_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(delta_2_1_fu_1070_p4),16));

        sext_ln93_fu_965_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_957_p3),32));

    shl_ln93_fu_1194_p2 <= std_logic_vector(shift_left(unsigned(zext_ln93_reg_1915),to_integer(unsigned('0' & zext_ln93_2_fu_1191_p1(31-1 downto 0)))));
    sub_ln112_fu_1050_p2 <= std_logic_vector(signed(sext_ln112_fu_1030_p1) - signed(zext_ln112_fu_1046_p1));
    sub_ln93_1_fu_977_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(tmp_2_fu_969_p3));
    sub_ln93_2_fu_1186_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln93_1_reg_1883));
    sub_ln93_3_fu_1258_p2 <= std_logic_vector(unsigned(ap_const_lv11_4) - unsigned(trunc_ln93_2_reg_1900));
    sub_ln93_4_fu_991_p2 <= std_logic_vector(unsigned(ap_const_lv4_6) - unsigned(trunc_ln93_1_fu_987_p1));
    sub_ln93_fu_936_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(output_2_reg_1856));
    tmp_1_fu_957_p3 <= (ap_const_lv1_1 & tmp_fu_947_p4);
    
    tmp_2_fu_969_p3_proc : process(sext_ln93_fu_965_p1)
    begin
        tmp_2_fu_969_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln93_fu_965_p1(i) = '1' then
                tmp_2_fu_969_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_6_fu_923_p1 <= grp_model_array_fu_640_ap_return_0;
    tmp_7_fu_1097_p4 <= add_ln93_fu_1092_p2(31 downto 1);
    tmp_8_fu_1269_p3 <= (tmp_6_reg_1865 & add_ln93_4_fu_1263_p2);
    tmp_9_fu_1129_p3 <= add_ln93_fu_1092_p2(31 downto 31);
    
    tmp_fu_947_p4_proc : process(select_ln93_fu_941_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_fu_947_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := select_ln93_fu_941_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for tmp_fu_947_p4_i in 0 to 16-1 loop
                v0_cpy(tmp_fu_947_p4_i) := select_ln93_fu_941_p3(16-1-tmp_fu_947_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_947_p4 <= resvalue(16-1 downto 0);
    end process;

    trunc_ln72_fu_866_p1 <= j_fu_228(2 - 1 downto 0);
    trunc_ln93_1_fu_987_p1 <= sub_ln93_1_fu_977_p2(4 - 1 downto 0);
    trunc_ln93_2_fu_1021_p1 <= tmp_2_fu_969_p3(11 - 1 downto 0);
    trunc_ln93_3_fu_1232_p4 <= add_ln93_3_fu_1208_p2(52 downto 1);
    trunc_ln93_fu_983_p1 <= sub_ln93_1_fu_977_p2(16 - 1 downto 0);

    w1_local_0_0_3_out_assign_proc : process(icmp_ln69_reg_1740, grp_load_fu_662_p1, w1_local_0_0_load_1_reg_1749, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            w1_local_0_0_3_out <= grp_load_fu_662_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            w1_local_0_0_3_out <= w1_local_0_0_load_1_reg_1749;
        else 
            w1_local_0_0_3_out <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w1_local_0_0_3_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0)))) then 
            w1_local_0_0_3_out_ap_vld <= ap_const_logic_1;
        else 
            w1_local_0_0_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    w1_local_0_1_3_out_assign_proc : process(icmp_ln69_reg_1740, grp_load_fu_667_p1, w1_local_0_1_load_1_reg_1755, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            w1_local_0_1_3_out <= grp_load_fu_667_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            w1_local_0_1_3_out <= w1_local_0_1_load_1_reg_1755;
        else 
            w1_local_0_1_3_out <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w1_local_0_1_3_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0)))) then 
            w1_local_0_1_3_out_ap_vld <= ap_const_logic_1;
        else 
            w1_local_0_1_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    w1_local_1_0_3_out_assign_proc : process(icmp_ln69_reg_1740, grp_load_fu_672_p1, w1_local_1_0_load_1_reg_1761, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            w1_local_1_0_3_out <= grp_load_fu_672_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            w1_local_1_0_3_out <= w1_local_1_0_load_1_reg_1761;
        else 
            w1_local_1_0_3_out <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w1_local_1_0_3_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0)))) then 
            w1_local_1_0_3_out_ap_vld <= ap_const_logic_1;
        else 
            w1_local_1_0_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    w1_local_1_1_3_out_assign_proc : process(icmp_ln69_reg_1740, grp_load_fu_677_p1, w1_local_1_1_load_1_reg_1767, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            w1_local_1_1_3_out <= grp_load_fu_677_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            w1_local_1_1_3_out <= w1_local_1_1_load_1_reg_1767;
        else 
            w1_local_1_1_3_out <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w1_local_1_1_3_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0)))) then 
            w1_local_1_1_3_out_ap_vld <= ap_const_logic_1;
        else 
            w1_local_1_1_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    w2_local_0_0_3_out_assign_proc : process(icmp_ln69_reg_1740, w2_local_0_0_load_1_reg_1820, ap_CS_fsm_state29, ap_CS_fsm_state28, w2_local_0_0_fu_264)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            w2_local_0_0_3_out <= w2_local_0_0_fu_264;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            w2_local_0_0_3_out <= w2_local_0_0_load_1_reg_1820;
        else 
            w2_local_0_0_3_out <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w2_local_0_0_3_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0)))) then 
            w2_local_0_0_3_out_ap_vld <= ap_const_logic_1;
        else 
            w2_local_0_0_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    w2_local_0_1_3_out_assign_proc : process(icmp_ln69_reg_1740, w2_local_0_1_load_1_reg_1826, ap_CS_fsm_state29, ap_CS_fsm_state28, w2_local_0_1_fu_268)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            w2_local_0_1_3_out <= w2_local_0_1_fu_268;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            w2_local_0_1_3_out <= w2_local_0_1_load_1_reg_1826;
        else 
            w2_local_0_1_3_out <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w2_local_0_1_3_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0)))) then 
            w2_local_0_1_3_out_ap_vld <= ap_const_logic_1;
        else 
            w2_local_0_1_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    w2_local_1_0_3_out_assign_proc : process(icmp_ln69_reg_1740, w2_local_1_0_load_1_reg_1832, ap_CS_fsm_state29, ap_CS_fsm_state28, w2_local_1_0_fu_272)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            w2_local_1_0_3_out <= w2_local_1_0_fu_272;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            w2_local_1_0_3_out <= w2_local_1_0_load_1_reg_1832;
        else 
            w2_local_1_0_3_out <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w2_local_1_0_3_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0)))) then 
            w2_local_1_0_3_out_ap_vld <= ap_const_logic_1;
        else 
            w2_local_1_0_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    w2_local_1_1_3_out_assign_proc : process(icmp_ln69_reg_1740, w2_local_1_1_load_1_reg_1838, ap_CS_fsm_state29, ap_CS_fsm_state28, w2_local_1_1_fu_276)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            w2_local_1_1_3_out <= w2_local_1_1_fu_276;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0))) then 
            w2_local_1_1_3_out <= w2_local_1_1_load_1_reg_1838;
        else 
            w2_local_1_1_3_out <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w2_local_1_1_3_out_ap_vld_assign_proc : process(icmp_ln69_reg_1740, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln69_reg_1740 = ap_const_lv1_0)))) then 
            w2_local_1_1_3_out_ap_vld <= ap_const_logic_1;
        else 
            w2_local_1_1_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln93_1_fu_1137_p2 <= (tmp_9_fu_1129_p3 xor ap_const_lv1_1);
    xor_ln93_fu_1321_p2 <= (icmp_ln93_reg_1871 xor ap_const_lv1_1);
    xor_ln96_fu_1365_p2 <= (ap_const_lv1_1 xor and_ln93_2_fu_1311_p2);
    zext_ln112_fu_1046_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln112_cast_fu_1033_p6),17));
    zext_ln33_1_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_0_1_fu_889_p6),16));
    zext_ln33_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_0_fu_870_p6),16));
    zext_ln93_1_fu_1176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln93_2_fu_1171_p2),64));
    zext_ln93_2_fu_1191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln93_2_reg_1930),64));
    zext_ln93_3_fu_1205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_1910),64));
    zext_ln93_4_fu_1248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln93_1_reg_1935),64));
    zext_ln93_5_fu_997_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln93_4_fu_991_p2),16));
    zext_ln93_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln93_reg_1877),64));
end behav;
