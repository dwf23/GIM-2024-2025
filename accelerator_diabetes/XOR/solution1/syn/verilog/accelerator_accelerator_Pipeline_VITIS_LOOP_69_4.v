// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module accelerator_accelerator_Pipeline_VITIS_LOOP_69_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bias_2_local_1_2,
        bias_2_local_0_2,
        bias_1_local_1_2,
        bias_1_local_0_2,
        w2_local_1_1_2,
        w2_local_1_0_2,
        w2_local_0_1_2,
        w2_local_0_0_2,
        w1_local_1_1_2,
        w1_local_1_0_2,
        w1_local_0_1_2,
        w1_local_0_0_2,
        output_array_inference_3_0,
        output_array_inference_2_0,
        output_array_inference_1_0,
        output_array_inference_0_0,
        training,
        cmp_i_i116,
        bias_2_local_1_3_out,
        bias_2_local_1_3_out_ap_vld,
        bias_2_local_0_3_out,
        bias_2_local_0_3_out_ap_vld,
        bias_1_local_1_3_out,
        bias_1_local_1_3_out_ap_vld,
        bias_1_local_0_3_out,
        bias_1_local_0_3_out_ap_vld,
        w2_local_1_1_3_out,
        w2_local_1_1_3_out_ap_vld,
        w2_local_1_0_3_out,
        w2_local_1_0_3_out_ap_vld,
        w2_local_0_1_3_out,
        w2_local_0_1_3_out_ap_vld,
        w2_local_0_0_3_out,
        w2_local_0_0_3_out_ap_vld,
        w1_local_1_1_3_out,
        w1_local_1_1_3_out_ap_vld,
        w1_local_1_0_3_out,
        w1_local_1_0_3_out_ap_vld,
        w1_local_0_1_3_out,
        w1_local_0_1_3_out_ap_vld,
        w1_local_0_0_3_out,
        w1_local_0_0_3_out_ap_vld,
        output_array_inference_3_1_out,
        output_array_inference_3_1_out_ap_vld,
        output_array_inference_2_1_out,
        output_array_inference_2_1_out_ap_vld,
        output_array_inference_1_1_out,
        output_array_inference_1_1_out_ap_vld,
        output_array_inference_0_1_out,
        output_array_inference_0_1_out_ap_vld,
        select_ln96_1_out,
        select_ln96_1_out_ap_vld,
        select_ln96_3_out,
        select_ln96_3_out_ap_vld,
        select_ln96_5_out,
        select_ln96_5_out_ap_vld,
        select_ln96_7_out,
        select_ln96_7_out_ap_vld,
        array_back2_weight_changes_0_0_out,
        array_back2_weight_changes_0_0_out_ap_vld,
        array_back2_weight_changes_0_1_out,
        array_back2_weight_changes_0_1_out_ap_vld,
        array_back2_weight_changes_1_0_out,
        array_back2_weight_changes_1_0_out_ap_vld,
        array_back2_weight_changes_1_1_out,
        array_back2_weight_changes_1_1_out_ap_vld,
        array_back2_bias_change_0_out,
        array_back2_bias_change_0_out_ap_vld,
        array_back2_bias_change_1_out,
        array_back2_bias_change_1_out_ap_vld,
        array_back1_weight_changes_0_0_out,
        array_back1_weight_changes_0_0_out_ap_vld,
        array_back1_weight_changes_0_1_out,
        array_back1_weight_changes_0_1_out_ap_vld,
        array_back1_weight_changes_1_0_out,
        array_back1_weight_changes_1_0_out_ap_vld,
        array_back1_weight_changes_1_1_out,
        array_back1_weight_changes_1_1_out_ap_vld,
        array_back1_bias_change_0_out,
        array_back1_bias_change_0_out_ap_vld,
        array_back1_bias_change_1_out,
        array_back1_bias_change_1_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_pp0_stage0 = 28'd2;
parameter    ap_ST_fsm_pp0_stage1 = 28'd4;
parameter    ap_ST_fsm_pp0_stage2 = 28'd8;
parameter    ap_ST_fsm_pp0_stage3 = 28'd16;
parameter    ap_ST_fsm_pp0_stage4 = 28'd32;
parameter    ap_ST_fsm_pp0_stage5 = 28'd64;
parameter    ap_ST_fsm_pp0_stage6 = 28'd128;
parameter    ap_ST_fsm_pp0_stage7 = 28'd256;
parameter    ap_ST_fsm_pp0_stage8 = 28'd512;
parameter    ap_ST_fsm_pp0_stage9 = 28'd1024;
parameter    ap_ST_fsm_pp0_stage10 = 28'd2048;
parameter    ap_ST_fsm_pp0_stage11 = 28'd4096;
parameter    ap_ST_fsm_pp0_stage12 = 28'd8192;
parameter    ap_ST_fsm_pp0_stage13 = 28'd16384;
parameter    ap_ST_fsm_pp0_stage14 = 28'd32768;
parameter    ap_ST_fsm_pp0_stage15 = 28'd65536;
parameter    ap_ST_fsm_pp0_stage16 = 28'd131072;
parameter    ap_ST_fsm_pp0_stage17 = 28'd262144;
parameter    ap_ST_fsm_pp0_stage18 = 28'd524288;
parameter    ap_ST_fsm_pp0_stage19 = 28'd1048576;
parameter    ap_ST_fsm_pp0_stage20 = 28'd2097152;
parameter    ap_ST_fsm_pp0_stage21 = 28'd4194304;
parameter    ap_ST_fsm_pp0_stage22 = 28'd8388608;
parameter    ap_ST_fsm_pp0_stage23 = 28'd16777216;
parameter    ap_ST_fsm_pp0_stage24 = 28'd33554432;
parameter    ap_ST_fsm_state28 = 28'd67108864;
parameter    ap_ST_fsm_state29 = 28'd134217728;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] bias_2_local_1_2;
input  [15:0] bias_2_local_0_2;
input  [15:0] bias_1_local_1_2;
input  [15:0] bias_1_local_0_2;
input  [15:0] w2_local_1_1_2;
input  [15:0] w2_local_1_0_2;
input  [15:0] w2_local_0_1_2;
input  [15:0] w2_local_0_0_2;
input  [15:0] w1_local_1_1_2;
input  [15:0] w1_local_1_0_2;
input  [15:0] w1_local_0_1_2;
input  [15:0] w1_local_0_0_2;
input  [15:0] output_array_inference_3_0;
input  [15:0] output_array_inference_2_0;
input  [15:0] output_array_inference_1_0;
input  [15:0] output_array_inference_0_0;
input  [15:0] training;
input  [0:0] cmp_i_i116;
output  [15:0] bias_2_local_1_3_out;
output   bias_2_local_1_3_out_ap_vld;
output  [15:0] bias_2_local_0_3_out;
output   bias_2_local_0_3_out_ap_vld;
output  [15:0] bias_1_local_1_3_out;
output   bias_1_local_1_3_out_ap_vld;
output  [15:0] bias_1_local_0_3_out;
output   bias_1_local_0_3_out_ap_vld;
output  [15:0] w2_local_1_1_3_out;
output   w2_local_1_1_3_out_ap_vld;
output  [15:0] w2_local_1_0_3_out;
output   w2_local_1_0_3_out_ap_vld;
output  [15:0] w2_local_0_1_3_out;
output   w2_local_0_1_3_out_ap_vld;
output  [15:0] w2_local_0_0_3_out;
output   w2_local_0_0_3_out_ap_vld;
output  [15:0] w1_local_1_1_3_out;
output   w1_local_1_1_3_out_ap_vld;
output  [15:0] w1_local_1_0_3_out;
output   w1_local_1_0_3_out_ap_vld;
output  [15:0] w1_local_0_1_3_out;
output   w1_local_0_1_3_out_ap_vld;
output  [15:0] w1_local_0_0_3_out;
output   w1_local_0_0_3_out_ap_vld;
output  [15:0] output_array_inference_3_1_out;
output   output_array_inference_3_1_out_ap_vld;
output  [15:0] output_array_inference_2_1_out;
output   output_array_inference_2_1_out_ap_vld;
output  [15:0] output_array_inference_1_1_out;
output   output_array_inference_1_1_out_ap_vld;
output  [15:0] output_array_inference_0_1_out;
output   output_array_inference_0_1_out_ap_vld;
output  [15:0] select_ln96_1_out;
output   select_ln96_1_out_ap_vld;
output  [15:0] select_ln96_3_out;
output   select_ln96_3_out_ap_vld;
output  [15:0] select_ln96_5_out;
output   select_ln96_5_out_ap_vld;
output  [15:0] select_ln96_7_out;
output   select_ln96_7_out_ap_vld;
output  [15:0] array_back2_weight_changes_0_0_out;
output   array_back2_weight_changes_0_0_out_ap_vld;
output  [15:0] array_back2_weight_changes_0_1_out;
output   array_back2_weight_changes_0_1_out_ap_vld;
output  [15:0] array_back2_weight_changes_1_0_out;
output   array_back2_weight_changes_1_0_out_ap_vld;
output  [15:0] array_back2_weight_changes_1_1_out;
output   array_back2_weight_changes_1_1_out_ap_vld;
output  [15:0] array_back2_bias_change_0_out;
output   array_back2_bias_change_0_out_ap_vld;
output  [15:0] array_back2_bias_change_1_out;
output   array_back2_bias_change_1_out_ap_vld;
output  [15:0] array_back1_weight_changes_0_0_out;
output   array_back1_weight_changes_0_0_out_ap_vld;
output  [15:0] array_back1_weight_changes_0_1_out;
output   array_back1_weight_changes_0_1_out_ap_vld;
output  [15:0] array_back1_weight_changes_1_0_out;
output   array_back1_weight_changes_1_0_out_ap_vld;
output  [15:0] array_back1_weight_changes_1_1_out;
output   array_back1_weight_changes_1_1_out_ap_vld;
output  [15:0] array_back1_bias_change_0_out;
output   array_back1_bias_change_0_out_ap_vld;
output  [15:0] array_back1_bias_change_1_out;
output   array_back1_bias_change_1_out_ap_vld;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] bias_2_local_1_3_out;
reg bias_2_local_1_3_out_ap_vld;
reg[15:0] bias_2_local_0_3_out;
reg bias_2_local_0_3_out_ap_vld;
reg[15:0] bias_1_local_1_3_out;
reg bias_1_local_1_3_out_ap_vld;
reg[15:0] bias_1_local_0_3_out;
reg bias_1_local_0_3_out_ap_vld;
reg[15:0] w2_local_1_1_3_out;
reg w2_local_1_1_3_out_ap_vld;
reg[15:0] w2_local_1_0_3_out;
reg w2_local_1_0_3_out_ap_vld;
reg[15:0] w2_local_0_1_3_out;
reg w2_local_0_1_3_out_ap_vld;
reg[15:0] w2_local_0_0_3_out;
reg w2_local_0_0_3_out_ap_vld;
reg[15:0] w1_local_1_1_3_out;
reg w1_local_1_1_3_out_ap_vld;
reg[15:0] w1_local_1_0_3_out;
reg w1_local_1_0_3_out_ap_vld;
reg[15:0] w1_local_0_1_3_out;
reg w1_local_0_1_3_out_ap_vld;
reg[15:0] w1_local_0_0_3_out;
reg w1_local_0_0_3_out_ap_vld;
reg[15:0] output_array_inference_3_1_out;
reg output_array_inference_3_1_out_ap_vld;
reg[15:0] output_array_inference_2_1_out;
reg output_array_inference_2_1_out_ap_vld;
reg[15:0] output_array_inference_1_1_out;
reg output_array_inference_1_1_out_ap_vld;
reg[15:0] output_array_inference_0_1_out;
reg output_array_inference_0_1_out_ap_vld;
reg select_ln96_1_out_ap_vld;
reg select_ln96_3_out_ap_vld;
reg select_ln96_5_out_ap_vld;
reg select_ln96_7_out_ap_vld;
reg array_back2_weight_changes_0_0_out_ap_vld;
reg array_back2_weight_changes_0_1_out_ap_vld;
reg array_back2_weight_changes_1_0_out_ap_vld;
reg array_back2_weight_changes_1_1_out_ap_vld;
reg array_back2_bias_change_0_out_ap_vld;
reg array_back2_bias_change_1_out_ap_vld;
reg array_back1_weight_changes_0_0_out_ap_vld;
reg array_back1_weight_changes_0_1_out_ap_vld;
reg array_back1_weight_changes_1_0_out_ap_vld;
reg array_back1_weight_changes_1_1_out_ap_vld;
reg array_back1_bias_change_0_out_ap_vld;
reg array_back1_bias_change_1_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln69_fu_854_p2;
reg   [0:0] icmp_ln69_reg_1740;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state27_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] add_ln69_fu_860_p2;
reg   [2:0] add_ln69_reg_1744;
reg   [15:0] grp_load_fu_662_p1;
reg   [15:0] w1_local_0_0_load_1_reg_1749;
reg   [15:0] grp_load_fu_667_p1;
reg   [15:0] w1_local_0_1_load_1_reg_1755;
reg   [15:0] grp_load_fu_672_p1;
reg   [15:0] w1_local_1_0_load_1_reg_1761;
reg   [15:0] grp_load_fu_677_p1;
reg   [15:0] w1_local_1_1_load_1_reg_1767;
reg   [15:0] grp_load_fu_682_p1;
reg   [15:0] bias_1_local_0_load_1_reg_1773;
reg   [15:0] grp_load_fu_687_p1;
reg   [15:0] bias_1_local_1_load_1_reg_1779;
wire   [1:0] trunc_ln72_fu_866_p1;
reg   [1:0] trunc_ln72_reg_1785;
wire   [15:0] zext_ln33_fu_884_p1;
reg   [15:0] zext_ln33_reg_1796;
wire   [15:0] zext_ln33_1_fu_903_p1;
reg   [15:0] zext_ln33_1_reg_1801;
wire   [0:0] and_ln144_fu_914_p2;
reg   [0:0] and_ln144_reg_1806;
reg   [15:0] array_out1_output_k_0_reg_1810;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
reg   [15:0] array_out1_output_k_1_reg_1815;
reg   [15:0] w2_local_0_0_load_1_reg_1820;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
reg   [15:0] w2_local_0_1_load_1_reg_1826;
reg   [15:0] w2_local_1_0_load_1_reg_1832;
reg   [15:0] w2_local_1_1_load_1_reg_1838;
reg   [15:0] bias_2_local_0_load_1_reg_1844;
reg   [15:0] bias_2_local_1_load_1_reg_1850;
reg  signed [15:0] output_2_reg_1856;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state13_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
reg   [0:0] tmp_6_reg_1865;
wire   [0:0] icmp_ln93_fu_931_p2;
reg   [0:0] icmp_ln93_reg_1871;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_state14_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_11001;
wire   [15:0] select_ln93_fu_941_p3;
reg   [15:0] select_ln93_reg_1877;
wire   [31:0] sub_ln93_1_fu_977_p2;
reg   [31:0] sub_ln93_1_reg_1883;
wire   [15:0] lshr_ln93_2_fu_1001_p2;
reg   [15:0] lshr_ln93_2_reg_1890;
wire   [0:0] bit_select30_i_i1_fu_1013_p3;
reg   [0:0] bit_select30_i_i1_reg_1895;
wire   [10:0] trunc_ln93_2_fu_1021_p1;
reg   [10:0] trunc_ln93_2_reg_1900;
wire   [15:0] delta_2_2_fu_1084_p3;
reg   [15:0] delta_2_2_reg_1905;
wire   [1:0] or_ln_fu_1154_p3;
reg   [1:0] or_ln_reg_1910;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_state15_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_11001;
wire   [63:0] zext_ln93_fu_1162_p1;
reg   [63:0] zext_ln93_reg_1915;
wire   [0:0] icmp_ln93_3_fu_1165_p2;
reg   [0:0] icmp_ln93_3_reg_1920;
wire   [63:0] lshr_ln93_fu_1180_p2;
reg   [63:0] lshr_ln93_reg_1925;
wire   [31:0] sub_ln93_2_fu_1186_p2;
reg   [31:0] sub_ln93_2_reg_1930;
reg   [62:0] lshr_ln93_1_reg_1935;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state16_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_11001;
reg   [0:0] tmp_10_reg_1940;
wire   [0:0] icmp_ln93_5_fu_1242_p2;
reg   [0:0] icmp_ln93_5_reg_1945;
wire   [63:0] bitcast_ln756_fu_1288_p1;
reg   [63:0] bitcast_ln756_reg_1950;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_state17_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_11001;
wire   [0:0] icmp_ln93_4_fu_1293_p2;
reg   [0:0] icmp_ln93_4_reg_1955;
wire   [0:0] grp_fu_657_p2;
reg   [0:0] tmp_4_reg_1960;
wire    ap_CS_fsm_pp0_stage16;
wire    ap_block_state18_pp0_stage16_iter0;
wire    ap_block_pp0_stage16_11001;
reg   [0:0] tmp_5_reg_1965;
wire    ap_CS_fsm_pp0_stage17;
wire    ap_block_state19_pp0_stage17_iter0;
wire    ap_block_pp0_stage17_11001;
reg   [15:0] array_back2_delta_kmin1_0_reg_1970;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_state20_pp0_stage18_iter0;
wire    ap_block_pp0_stage18_11001;
reg   [15:0] array_back2_delta_kmin1_1_reg_1975;
reg   [15:0] array_back2_weight_changes_0_0_reg_1980;
reg   [15:0] array_back2_weight_changes_0_1_reg_1986;
reg   [15:0] array_back2_weight_changes_1_0_reg_1992;
reg   [15:0] array_back2_weight_changes_1_1_reg_1998;
reg   [15:0] array_back2_bias_change_0_reg_2004;
reg   [15:0] array_back2_bias_change_1_reg_2010;
reg   [15:0] output_array_inference_0_1_load_1_reg_2016;
wire    ap_CS_fsm_pp0_stage24;
wire    ap_block_state26_pp0_stage24_iter0;
wire    ap_block_pp0_stage24_11001;
reg   [15:0] output_array_inference_1_1_load_1_reg_2021;
reg   [15:0] output_array_inference_2_1_load_1_reg_2026;
reg   [15:0] output_array_inference_3_1_load_1_reg_2031;
wire   [15:0] select_ln96_1_fu_1414_p3;
reg   [15:0] select_ln96_1_reg_2036;
wire   [15:0] select_ln96_3_fu_1453_p3;
reg   [15:0] select_ln96_3_reg_2041;
wire   [15:0] select_ln96_5_fu_1492_p3;
reg   [15:0] select_ln96_5_reg_2046;
wire   [15:0] select_ln96_7_fu_1531_p3;
reg   [15:0] select_ln96_7_reg_2051;
reg   [15:0] array_back1_weight_changes_0_0_reg_2056;
reg   [15:0] array_back1_weight_changes_0_1_reg_2062;
reg   [15:0] array_back1_weight_changes_1_0_reg_2068;
reg   [15:0] array_back1_weight_changes_1_1_reg_2074;
reg   [15:0] array_back1_bias_change_0_reg_2080;
reg   [15:0] array_back1_bias_change_1_reg_2086;
wire    ap_block_pp0_stage24_subdone;
reg    ap_predicate_tran26to28_state26;
reg    ap_condition_pp0_exit_iter0_state26;
reg    ap_enable_reg_pp0_iter1;
reg   [15:0] grp_model_array_fu_640_p_read10;
reg   [15:0] grp_model_array_fu_640_p_read11;
reg   [15:0] grp_model_array_fu_640_p_read12;
reg   [15:0] grp_model_array_fu_640_p_read13;
reg   [15:0] grp_model_array_fu_640_biases_0_0_val;
reg   [15:0] grp_model_array_fu_640_biases_0_1_val;
reg   [15:0] grp_model_array_fu_640_output_kmin1_0_0_val;
reg   [15:0] grp_model_array_fu_640_output_kmin1_0_1_val;
reg   [15:0] grp_model_array_fu_640_delta_k_0_0_val;
reg   [15:0] grp_model_array_fu_640_delta_k_0_1_val;
wire   [15:0] grp_model_array_fu_640_ap_return_0;
wire   [15:0] grp_model_array_fu_640_ap_return_1;
wire   [15:0] grp_model_array_fu_640_ap_return_2;
wire   [15:0] grp_model_array_fu_640_ap_return_3;
wire   [15:0] grp_model_array_fu_640_ap_return_4;
wire   [15:0] grp_model_array_fu_640_ap_return_5;
wire   [15:0] grp_model_array_fu_640_ap_return_6;
wire   [15:0] grp_model_array_fu_640_ap_return_7;
wire   [15:0] grp_model_array_fu_640_ap_return_8;
wire   [15:0] grp_model_array_fu_640_ap_return_9;
reg    grp_model_array_fu_640_ap_ce;
wire    ap_block_state2_pp0_stage0_iter0_ignore_call24;
wire    ap_block_state27_pp0_stage0_iter1_ignore_call24;
wire    ap_block_pp0_stage0_11001_ignoreCallOp98;
wire    ap_block_state3_pp0_stage1_iter0_ignore_call24;
wire    ap_block_pp0_stage1_11001_ignoreCallOp102;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage2_iter0_ignore_call24;
wire    ap_block_pp0_stage2_11001_ignoreCallOp103;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state5_pp0_stage3_iter0_ignore_call24;
wire    ap_block_pp0_stage3_11001_ignoreCallOp104;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage4_iter0_ignore_call24;
wire    ap_block_pp0_stage4_11001_ignoreCallOp105;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state7_pp0_stage5_iter0_ignore_call24;
wire    ap_block_pp0_stage5_11001_ignoreCallOp106;
wire    ap_block_state8_pp0_stage6_iter0_ignore_call27;
wire    ap_block_pp0_stage6_11001_ignoreCallOp115;
wire    ap_block_state9_pp0_stage7_iter0_ignore_call27;
wire    ap_block_pp0_stage7_11001_ignoreCallOp116;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state10_pp0_stage8_iter0_ignore_call27;
wire    ap_block_pp0_stage8_11001_ignoreCallOp117;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state11_pp0_stage9_iter0_ignore_call27;
wire    ap_block_pp0_stage9_11001_ignoreCallOp118;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state12_pp0_stage10_iter0_ignore_call27;
wire    ap_block_pp0_stage10_11001_ignoreCallOp119;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state13_pp0_stage11_iter0_ignore_call27;
wire    ap_block_pp0_stage11_11001_ignoreCallOp120;
wire    ap_block_state15_pp0_stage13_iter0_ignore_call131;
wire    ap_block_pp0_stage13_11001_ignoreCallOp167;
wire    ap_block_state16_pp0_stage14_iter0_ignore_call131;
wire    ap_block_pp0_stage14_11001_ignoreCallOp177;
wire    ap_block_state17_pp0_stage15_iter0_ignore_call131;
wire    ap_block_pp0_stage15_11001_ignoreCallOp187;
wire    ap_block_state18_pp0_stage16_iter0_ignore_call131;
wire    ap_block_pp0_stage16_11001_ignoreCallOp190;
wire    ap_block_state19_pp0_stage17_iter0_ignore_call131;
wire    ap_block_pp0_stage17_11001_ignoreCallOp192;
wire    ap_block_state20_pp0_stage18_iter0_ignore_call131;
wire    ap_block_pp0_stage18_11001_ignoreCallOp193;
wire    ap_block_state21_pp0_stage19_iter0_ignore_call140;
wire    ap_block_pp0_stage19_11001_ignoreCallOp202;
wire    ap_CS_fsm_pp0_stage19;
wire    ap_block_state22_pp0_stage20_iter0_ignore_call140;
wire    ap_block_pp0_stage20_11001_ignoreCallOp203;
wire    ap_CS_fsm_pp0_stage20;
wire    ap_block_state23_pp0_stage21_iter0_ignore_call140;
wire    ap_block_pp0_stage21_11001_ignoreCallOp204;
wire    ap_CS_fsm_pp0_stage21;
wire    ap_block_state24_pp0_stage22_iter0_ignore_call140;
wire    ap_block_pp0_stage22_11001_ignoreCallOp205;
wire    ap_CS_fsm_pp0_stage22;
wire    ap_block_state25_pp0_stage23_iter0_ignore_call140;
wire    ap_block_pp0_stage23_11001_ignoreCallOp206;
wire    ap_CS_fsm_pp0_stage23;
wire    ap_block_state26_pp0_stage24_iter0_ignore_call140;
wire    ap_block_pp0_stage24_11001_ignoreCallOp252;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_632_p4;
reg   [0:0] UnifiedRetVal_reg_628;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state28;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage13;
wire    ap_block_pp0_stage19;
reg   [2:0] j_fu_228;
reg   [15:0] output_array_inference_0_1_fu_232;
wire    ap_block_pp0_stage24;
reg   [15:0] output_array_inference_1_1_fu_236;
reg   [15:0] output_array_inference_2_1_fu_240;
reg   [15:0] output_array_inference_3_1_fu_244;
reg   [15:0] w1_local_0_0_fu_248;
reg   [15:0] ap_sig_allocacmp_w1_local_0_0_load_1;
reg   [15:0] w1_local_0_1_fu_252;
reg   [15:0] ap_sig_allocacmp_w1_local_0_1_load_1;
reg   [15:0] w1_local_1_0_fu_256;
reg   [15:0] ap_sig_allocacmp_w1_local_1_0_load_1;
reg   [15:0] w1_local_1_1_fu_260;
reg   [15:0] ap_sig_allocacmp_w1_local_1_1_load_1;
reg   [15:0] w2_local_0_0_fu_264;
reg   [15:0] w2_local_0_1_fu_268;
reg   [15:0] w2_local_1_0_fu_272;
reg   [15:0] w2_local_1_1_fu_276;
reg   [15:0] bias_1_local_0_fu_280;
reg   [15:0] ap_sig_allocacmp_bias_1_local_0_load_1;
reg   [15:0] bias_1_local_1_fu_284;
reg   [15:0] ap_sig_allocacmp_bias_1_local_1_load_1;
reg   [15:0] bias_2_local_0_fu_288;
reg   [15:0] bias_2_local_1_fu_292;
reg   [63:0] grp_fu_657_p0;
wire    ap_block_pp0_stage15;
wire    ap_block_pp0_stage16;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage11;
wire    ap_block_pp0_stage18;
wire   [12:0] output_0_fu_870_p6;
wire   [12:0] output_0_1_fu_889_p6;
wire   [0:0] icmp_ln144_fu_908_p2;
wire  signed [15:0] tmp_6_fu_923_p1;
wire    ap_block_pp0_stage12;
wire   [15:0] sub_ln93_fu_936_p2;
reg   [15:0] tmp_fu_947_p4;
wire   [16:0] tmp_1_fu_957_p3;
wire  signed [31:0] sext_ln93_fu_965_p1;
reg   [31:0] tmp_2_fu_969_p3;
wire   [3:0] trunc_ln93_1_fu_987_p1;
wire   [3:0] sub_ln93_4_fu_991_p2;
wire   [15:0] zext_ln93_5_fu_997_p1;
wire   [15:0] trunc_ln93_fu_983_p1;
wire   [15:0] add_ln93_1_fu_1007_p2;
wire   [12:0] zext_ln112_cast_fu_1033_p6;
wire  signed [16:0] sext_ln112_fu_1030_p1;
wire   [16:0] zext_ln112_fu_1046_p1;
wire  signed [16:0] sub_ln112_fu_1050_p2;
wire   [9:0] mul_ln114_fu_1064_p1;
wire   [26:0] mul_ln114_fu_1064_p2;
wire   [14:0] delta_2_1_fu_1070_p4;
wire   [0:0] icmp_ln111_fu_1025_p2;
wire   [15:0] delta_2_fu_1056_p1;
wire  signed [15:0] sext_ln114_1_fu_1080_p1;
wire   [31:0] add_ln93_fu_1092_p2;
wire   [30:0] tmp_7_fu_1097_p4;
wire   [15:0] and_ln93_4_fu_1113_p2;
wire   [0:0] icmp_ln93_1_fu_1107_p2;
wire   [0:0] icmp_ln93_2_fu_1117_p2;
wire   [0:0] tmp_9_fu_1129_p3;
wire   [0:0] xor_ln93_1_fu_1137_p2;
wire   [0:0] and_ln93_1_fu_1143_p2;
wire   [0:0] and_ln93_fu_1123_p2;
wire   [0:0] or_ln93_fu_1148_p2;
wire   [31:0] add_ln93_2_fu_1171_p2;
wire   [63:0] zext_ln93_1_fu_1176_p1;
wire    ap_block_pp0_stage14;
wire   [63:0] zext_ln93_2_fu_1191_p1;
wire   [63:0] shl_ln93_fu_1194_p2;
wire   [63:0] select_ln93_1_fu_1199_p3;
wire   [63:0] zext_ln93_3_fu_1205_p1;
wire   [63:0] add_ln93_3_fu_1208_p2;
wire   [51:0] trunc_ln93_3_fu_1232_p4;
wire   [10:0] select_ln93_2_fu_1251_p3;
wire   [10:0] sub_ln93_3_fu_1258_p2;
wire   [10:0] add_ln93_4_fu_1263_p2;
wire   [63:0] zext_ln93_4_fu_1248_p1;
wire   [11:0] tmp_8_fu_1269_p3;
wire   [63:0] LD_fu_1276_p5;
wire   [0:0] or_ln93_1_fu_1307_p2;
wire   [0:0] and_ln93_2_fu_1311_p2;
wire   [0:0] xor_ln93_fu_1321_p2;
wire   [0:0] and_ln93_3_fu_1326_p2;
wire   [0:0] icmp_ln94_fu_1332_p2;
wire   [0:0] icmp_ln94_1_fu_1337_p2;
wire   [0:0] icmp_ln94_2_fu_1342_p2;
wire   [0:0] and_ln94_1_fu_1353_p2;
wire   [0:0] and_ln94_fu_1347_p2;
wire   [0:0] and_ln96_fu_1316_p2;
wire   [0:0] xor_ln96_fu_1365_p2;
wire   [0:0] and_ln96_1_fu_1371_p2;
wire   [0:0] or_ln96_fu_1377_p2;
wire   [0:0] and_ln96_3_fu_1388_p2;
wire   [0:0] and_ln96_2_fu_1382_p2;
wire   [0:0] and_ln96_4_fu_1394_p2;
wire   [0:0] and_ln94_2_fu_1359_p2;
wire   [0:0] or_ln96_1_fu_1408_p2;
wire   [15:0] select_ln96_fu_1400_p3;
wire   [0:0] icmp_ln94_3_fu_1422_p2;
wire   [0:0] and_ln96_5_fu_1433_p2;
wire   [0:0] and_ln94_3_fu_1427_p2;
wire   [0:0] or_ln96_2_fu_1447_p2;
wire   [15:0] select_ln96_2_fu_1439_p3;
wire   [0:0] icmp_ln94_4_fu_1461_p2;
wire   [0:0] and_ln96_6_fu_1472_p2;
wire   [0:0] and_ln94_4_fu_1466_p2;
wire   [0:0] or_ln96_3_fu_1486_p2;
wire   [15:0] select_ln96_4_fu_1478_p3;
wire   [0:0] icmp_ln94_5_fu_1500_p2;
wire   [0:0] and_ln96_7_fu_1511_p2;
wire   [0:0] and_ln94_5_fu_1505_p2;
wire   [0:0] or_ln96_4_fu_1525_p2;
wire   [15:0] select_ln96_6_fu_1517_p3;
reg   [4:0] grp_fu_657_opcode;
wire    ap_block_pp0_stage15_00001;
wire    ap_block_pp0_stage16_00001;
reg   [0:0] ap_return_preg;
reg   [27:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_state10_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_state11_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_state12_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_pp0_stage17_subdone;
wire    ap_block_pp0_stage18_subdone;
wire    ap_block_state21_pp0_stage19_iter0;
wire    ap_block_pp0_stage19_subdone;
wire    ap_block_state22_pp0_stage20_iter0;
wire    ap_block_pp0_stage20_subdone;
wire    ap_block_state23_pp0_stage21_iter0;
wire    ap_block_pp0_stage21_subdone;
wire    ap_block_state24_pp0_stage22_iter0;
wire    ap_block_pp0_stage22_subdone;
wire    ap_block_state25_pp0_stage23_iter0;
wire    ap_block_pp0_stage23_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_1559;
reg    ap_condition_1563;
reg    ap_condition_1567;
reg    ap_condition_1571;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_return_preg = 1'd0;
end

accelerator_model_array grp_model_array_fu_640(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .p_read10(grp_model_array_fu_640_p_read10),
    .p_read11(grp_model_array_fu_640_p_read11),
    .p_read12(grp_model_array_fu_640_p_read12),
    .p_read13(grp_model_array_fu_640_p_read13),
    .biases_0_0_val(grp_model_array_fu_640_biases_0_0_val),
    .biases_0_1_val(grp_model_array_fu_640_biases_0_1_val),
    .output_kmin1_0_0_val(grp_model_array_fu_640_output_kmin1_0_0_val),
    .output_kmin1_0_1_val(grp_model_array_fu_640_output_kmin1_0_1_val),
    .delta_k_0_0_val(grp_model_array_fu_640_delta_k_0_0_val),
    .delta_k_0_1_val(grp_model_array_fu_640_delta_k_0_1_val),
    .training_val(training),
    .ap_return_0(grp_model_array_fu_640_ap_return_0),
    .ap_return_1(grp_model_array_fu_640_ap_return_1),
    .ap_return_2(grp_model_array_fu_640_ap_return_2),
    .ap_return_3(grp_model_array_fu_640_ap_return_3),
    .ap_return_4(grp_model_array_fu_640_ap_return_4),
    .ap_return_5(grp_model_array_fu_640_ap_return_5),
    .ap_return_6(grp_model_array_fu_640_ap_return_6),
    .ap_return_7(grp_model_array_fu_640_ap_return_7),
    .ap_return_8(grp_model_array_fu_640_ap_return_8),
    .ap_return_9(grp_model_array_fu_640_ap_return_9),
    .ap_ce(grp_model_array_fu_640_ap_ce)
);

accelerator_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_657_p0),
    .din1(64'd4602678819172646912),
    .ce(1'b1),
    .opcode(grp_fu_657_opcode),
    .dout(grp_fu_657_p2)
);

accelerator_mux_4_2_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 13 ),
    .din2_WIDTH( 13 ),
    .din3_WIDTH( 13 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 13 ))
mux_4_2_13_1_1_U57(
    .din0(13'd0),
    .din1(13'd0),
    .din2(13'd4096),
    .din3(13'd4096),
    .din4(trunc_ln72_fu_866_p1),
    .dout(output_0_fu_870_p6)
);

accelerator_mux_4_2_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 13 ),
    .din2_WIDTH( 13 ),
    .din3_WIDTH( 13 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 13 ))
mux_4_2_13_1_1_U58(
    .din0(13'd0),
    .din1(13'd4096),
    .din2(13'd0),
    .din3(13'd4096),
    .din4(trunc_ln72_fu_866_p1),
    .dout(output_0_1_fu_889_p6)
);

accelerator_mux_4_2_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 13 ),
    .din2_WIDTH( 13 ),
    .din3_WIDTH( 13 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 13 ))
mux_4_2_13_1_1_U59(
    .din0(13'd0),
    .din1(13'd4096),
    .din2(13'd4096),
    .din3(13'd0),
    .din4(trunc_ln72_reg_1785),
    .dout(zext_ln112_cast_fu_1033_p6)
);

accelerator_mul_17s_10ns_27_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 27 ))
mul_17s_10ns_27_1_1_U60(
    .din0(sub_ln112_fu_1050_p2),
    .din1(mul_ln114_fu_1064_p1),
    .dout(mul_ln114_fu_1064_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state26) & (1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state26) & (1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state26);
        end else if (((1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state28)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_632_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        UnifiedRetVal_reg_628 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        UnifiedRetVal_reg_628 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_1_local_0_fu_280 <= bias_1_local_0_2;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bias_1_local_0_fu_280 <= array_back1_bias_change_0_reg_2080;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_1_local_1_fu_284 <= bias_1_local_1_2;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bias_1_local_1_fu_284 <= array_back1_bias_change_1_reg_2086;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_2_local_0_fu_288 <= bias_2_local_0_2;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage24) & (1'd0 == and_ln144_reg_1806) & (1'b0 == ap_block_pp0_stage24_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        bias_2_local_0_fu_288 <= array_back2_bias_change_0_reg_2004;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_2_local_1_fu_292 <= bias_2_local_1_2;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage24) & (1'd0 == and_ln144_reg_1806) & (1'b0 == ap_block_pp0_stage24_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        bias_2_local_1_fu_292 <= array_back2_bias_change_1_reg_2010;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_fu_228 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage24) & (1'd0 == and_ln144_reg_1806) & (1'b0 == ap_block_pp0_stage24_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        j_fu_228 <= add_ln69_reg_1744;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        output_array_inference_0_1_fu_232 <= output_array_inference_0_0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage24) & (1'd0 == and_ln144_reg_1806) & (1'b0 == ap_block_pp0_stage24_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        output_array_inference_0_1_fu_232 <= select_ln96_7_fu_1531_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        output_array_inference_1_1_fu_236 <= output_array_inference_1_0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage24) & (1'd0 == and_ln144_reg_1806) & (1'b0 == ap_block_pp0_stage24_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        output_array_inference_1_1_fu_236 <= select_ln96_5_fu_1492_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        output_array_inference_2_1_fu_240 <= output_array_inference_2_0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage24) & (1'd0 == and_ln144_reg_1806) & (1'b0 == ap_block_pp0_stage24_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        output_array_inference_2_1_fu_240 <= select_ln96_3_fu_1453_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        output_array_inference_3_1_fu_244 <= output_array_inference_3_0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage24) & (1'd0 == and_ln144_reg_1806) & (1'b0 == ap_block_pp0_stage24_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        output_array_inference_3_1_fu_244 <= select_ln96_1_fu_1414_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        w1_local_0_0_fu_248 <= w1_local_0_0_2;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w1_local_0_0_fu_248 <= array_back1_weight_changes_0_0_reg_2056;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        w1_local_0_1_fu_252 <= w1_local_0_1_2;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w1_local_0_1_fu_252 <= array_back1_weight_changes_1_0_reg_2068;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        w1_local_1_0_fu_256 <= w1_local_1_0_2;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w1_local_1_0_fu_256 <= array_back1_weight_changes_0_1_reg_2062;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        w1_local_1_1_fu_260 <= w1_local_1_1_2;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w1_local_1_1_fu_260 <= array_back1_weight_changes_1_1_reg_2074;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        w2_local_0_0_fu_264 <= w2_local_0_0_2;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage24) & (1'd0 == and_ln144_reg_1806) & (1'b0 == ap_block_pp0_stage24_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        w2_local_0_0_fu_264 <= array_back2_weight_changes_0_0_reg_1980;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        w2_local_0_1_fu_268 <= w2_local_0_1_2;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage24) & (1'd0 == and_ln144_reg_1806) & (1'b0 == ap_block_pp0_stage24_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        w2_local_0_1_fu_268 <= array_back2_weight_changes_1_0_reg_1992;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        w2_local_1_0_fu_272 <= w2_local_1_0_2;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage24) & (1'd0 == and_ln144_reg_1806) & (1'b0 == ap_block_pp0_stage24_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        w2_local_1_0_fu_272 <= array_back2_weight_changes_0_1_reg_1986;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        w2_local_1_1_fu_276 <= w2_local_1_1_2;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage24) & (1'd0 == and_ln144_reg_1806) & (1'b0 == ap_block_pp0_stage24_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        w2_local_1_1_fu_276 <= array_back2_weight_changes_1_1_reg_1998;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln69_reg_1744 <= add_ln69_fu_860_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln69_fu_854_p2 == 1'd0))) begin
        and_ln144_reg_1806 <= and_ln144_fu_914_p2;
        trunc_ln72_reg_1785 <= trunc_ln72_fu_866_p1;
        zext_ln33_1_reg_1801[12 : 0] <= zext_ln33_1_fu_903_p1[12 : 0];
        zext_ln33_reg_1796[12 : 0] <= zext_ln33_fu_884_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        array_back1_bias_change_0_reg_2080 <= grp_model_array_fu_640_ap_return_8;
        array_back1_bias_change_1_reg_2086 <= grp_model_array_fu_640_ap_return_9;
        array_back1_weight_changes_0_0_reg_2056 <= grp_model_array_fu_640_ap_return_4;
        array_back1_weight_changes_0_1_reg_2062 <= grp_model_array_fu_640_ap_return_5;
        array_back1_weight_changes_1_0_reg_2068 <= grp_model_array_fu_640_ap_return_6;
        array_back1_weight_changes_1_1_reg_2074 <= grp_model_array_fu_640_ap_return_7;
        output_array_inference_0_1_load_1_reg_2016 <= output_array_inference_0_1_fu_232;
        output_array_inference_1_1_load_1_reg_2021 <= output_array_inference_1_1_fu_236;
        output_array_inference_2_1_load_1_reg_2026 <= output_array_inference_2_1_fu_240;
        output_array_inference_3_1_load_1_reg_2031 <= output_array_inference_3_1_fu_244;
        select_ln96_1_reg_2036 <= select_ln96_1_fu_1414_p3;
        select_ln96_3_reg_2041 <= select_ln96_3_fu_1453_p3;
        select_ln96_5_reg_2046 <= select_ln96_5_fu_1492_p3;
        select_ln96_7_reg_2051 <= select_ln96_7_fu_1531_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        array_back2_bias_change_0_reg_2004 <= grp_model_array_fu_640_ap_return_8;
        array_back2_bias_change_1_reg_2010 <= grp_model_array_fu_640_ap_return_9;
        array_back2_weight_changes_0_0_reg_1980 <= grp_model_array_fu_640_ap_return_4;
        array_back2_weight_changes_0_1_reg_1986 <= grp_model_array_fu_640_ap_return_5;
        array_back2_weight_changes_1_0_reg_1992 <= grp_model_array_fu_640_ap_return_6;
        array_back2_weight_changes_1_1_reg_1998 <= grp_model_array_fu_640_ap_return_7;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001) & (icmp_ln69_reg_1740 == 1'd0))) begin
        array_back2_delta_kmin1_0_reg_1970 <= grp_model_array_fu_640_ap_return_2;
        array_back2_delta_kmin1_1_reg_1975 <= grp_model_array_fu_640_ap_return_3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        array_out1_output_k_0_reg_1810 <= grp_model_array_fu_640_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln69_reg_1740 == 1'd0))) begin
        array_out1_output_k_1_reg_1815 <= grp_model_array_fu_640_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_fu_854_p2 == 1'd0))) begin
        bias_1_local_0_load_1_reg_1773 <= grp_load_fu_682_p1;
        bias_1_local_1_load_1_reg_1779 <= grp_load_fu_687_p1;
        w1_local_0_0_load_1_reg_1749 <= grp_load_fu_662_p1;
        w1_local_0_1_load_1_reg_1755 <= grp_load_fu_667_p1;
        w1_local_1_0_load_1_reg_1761 <= grp_load_fu_672_p1;
        w1_local_1_1_load_1_reg_1767 <= grp_load_fu_677_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        bias_2_local_0_load_1_reg_1844 <= bias_2_local_0_fu_288;
        bias_2_local_1_load_1_reg_1850 <= bias_2_local_1_fu_292;
        w2_local_0_0_load_1_reg_1820 <= w2_local_0_0_fu_264;
        w2_local_0_1_load_1_reg_1826 <= w2_local_0_1_fu_268;
        w2_local_1_0_load_1_reg_1832 <= w2_local_1_0_fu_272;
        w2_local_1_1_load_1_reg_1838 <= w2_local_1_1_fu_276;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001) & (icmp_ln69_reg_1740 == 1'd0))) begin
        bit_select30_i_i1_reg_1895 <= bit_select30_i_i1_fu_1013_p3;
        delta_2_2_reg_1905 <= delta_2_2_fu_1084_p3;
        icmp_ln93_reg_1871 <= icmp_ln93_fu_931_p2;
        lshr_ln93_2_reg_1890 <= lshr_ln93_2_fu_1001_p2;
        select_ln93_reg_1877 <= select_ln93_fu_941_p3;
        sub_ln93_1_reg_1883 <= sub_ln93_1_fu_977_p2;
        trunc_ln93_2_reg_1900 <= trunc_ln93_2_fu_1021_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001) & (icmp_ln69_reg_1740 == 1'd0))) begin
        bitcast_ln756_reg_1950 <= bitcast_ln756_fu_1288_p1;
        icmp_ln93_4_reg_1955 <= icmp_ln93_4_fu_1293_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        icmp_ln69_reg_1740 <= icmp_ln69_fu_854_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001) & (icmp_ln69_reg_1740 == 1'd0))) begin
        icmp_ln93_3_reg_1920 <= icmp_ln93_3_fu_1165_p2;
        lshr_ln93_reg_1925 <= lshr_ln93_fu_1180_p2;
        or_ln_reg_1910[0] <= or_ln_fu_1154_p3[0];
        sub_ln93_2_reg_1930 <= sub_ln93_2_fu_1186_p2;
        zext_ln93_reg_1915[15 : 0] <= zext_ln93_fu_1162_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001) & (icmp_ln69_reg_1740 == 1'd0))) begin
        icmp_ln93_5_reg_1945 <= icmp_ln93_5_fu_1242_p2;
        lshr_ln93_1_reg_1935 <= {{add_ln93_3_fu_1208_p2[63:1]}};
        tmp_10_reg_1940 <= add_ln93_3_fu_1208_p2[32'd54];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        output_2_reg_1856 <= grp_model_array_fu_640_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        tmp_4_reg_1960 <= grp_fu_657_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        tmp_5_reg_1965 <= grp_fu_657_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001) & (icmp_ln69_reg_1740 == 1'd0))) begin
        tmp_6_reg_1865 <= tmp_6_fu_923_p1[32'd15];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

always @ (*) begin
    if (((ap_predicate_tran26to28_state26 == 1'b1) | (icmp_ln69_reg_1740 == 1'd1))) begin
        ap_condition_pp0_exit_iter0_state26 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state26 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_632_p4 = 1'd0;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_632_p4 = UnifiedRetVal_reg_628;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_632_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_bias_1_local_0_load_1 = array_back1_bias_change_0_reg_2080;
    end else begin
        ap_sig_allocacmp_bias_1_local_0_load_1 = bias_1_local_0_fu_280;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_bias_1_local_1_load_1 = array_back1_bias_change_1_reg_2086;
    end else begin
        ap_sig_allocacmp_bias_1_local_1_load_1 = bias_1_local_1_fu_284;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_w1_local_0_0_load_1 = array_back1_weight_changes_0_0_reg_2056;
    end else begin
        ap_sig_allocacmp_w1_local_0_0_load_1 = w1_local_0_0_fu_248;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_w1_local_0_1_load_1 = array_back1_weight_changes_1_0_reg_2068;
    end else begin
        ap_sig_allocacmp_w1_local_0_1_load_1 = w1_local_0_1_fu_252;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_w1_local_1_0_load_1 = array_back1_weight_changes_0_1_reg_2062;
    end else begin
        ap_sig_allocacmp_w1_local_1_0_load_1 = w1_local_1_0_fu_256;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_w1_local_1_1_load_1 = array_back1_weight_changes_1_1_reg_2074;
    end else begin
        ap_sig_allocacmp_w1_local_1_1_load_1 = w1_local_1_1_fu_260;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        array_back1_bias_change_0_out_ap_vld = 1'b1;
    end else begin
        array_back1_bias_change_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        array_back1_bias_change_1_out_ap_vld = 1'b1;
    end else begin
        array_back1_bias_change_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        array_back1_weight_changes_0_0_out_ap_vld = 1'b1;
    end else begin
        array_back1_weight_changes_0_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        array_back1_weight_changes_0_1_out_ap_vld = 1'b1;
    end else begin
        array_back1_weight_changes_0_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        array_back1_weight_changes_1_0_out_ap_vld = 1'b1;
    end else begin
        array_back1_weight_changes_1_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        array_back1_weight_changes_1_1_out_ap_vld = 1'b1;
    end else begin
        array_back1_weight_changes_1_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        array_back2_bias_change_0_out_ap_vld = 1'b1;
    end else begin
        array_back2_bias_change_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        array_back2_bias_change_1_out_ap_vld = 1'b1;
    end else begin
        array_back2_bias_change_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        array_back2_weight_changes_0_0_out_ap_vld = 1'b1;
    end else begin
        array_back2_weight_changes_0_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        array_back2_weight_changes_0_1_out_ap_vld = 1'b1;
    end else begin
        array_back2_weight_changes_0_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        array_back2_weight_changes_1_0_out_ap_vld = 1'b1;
    end else begin
        array_back2_weight_changes_1_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        array_back2_weight_changes_1_1_out_ap_vld = 1'b1;
    end else begin
        array_back2_weight_changes_1_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        bias_1_local_0_3_out = grp_load_fu_682_p1;
    end else if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        bias_1_local_0_3_out = bias_1_local_0_load_1_reg_1773;
    end else begin
        bias_1_local_0_3_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0)))) begin
        bias_1_local_0_3_out_ap_vld = 1'b1;
    end else begin
        bias_1_local_0_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        bias_1_local_1_3_out = grp_load_fu_687_p1;
    end else if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        bias_1_local_1_3_out = bias_1_local_1_load_1_reg_1779;
    end else begin
        bias_1_local_1_3_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0)))) begin
        bias_1_local_1_3_out_ap_vld = 1'b1;
    end else begin
        bias_1_local_1_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        bias_2_local_0_3_out = bias_2_local_0_fu_288;
    end else if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        bias_2_local_0_3_out = bias_2_local_0_load_1_reg_1844;
    end else begin
        bias_2_local_0_3_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0)))) begin
        bias_2_local_0_3_out_ap_vld = 1'b1;
    end else begin
        bias_2_local_0_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        bias_2_local_1_3_out = bias_2_local_1_fu_292;
    end else if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        bias_2_local_1_3_out = bias_2_local_1_load_1_reg_1850;
    end else begin
        bias_2_local_1_3_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0)))) begin
        bias_2_local_1_3_out_ap_vld = 1'b1;
    end else begin
        bias_2_local_1_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_00001))) begin
            grp_fu_657_opcode = 5'd5;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_00001))) begin
            grp_fu_657_opcode = 5'd2;
        end else begin
            grp_fu_657_opcode = 'bx;
        end
    end else begin
        grp_fu_657_opcode = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16))) begin
            grp_fu_657_p0 = bitcast_ln756_reg_1950;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15))) begin
            grp_fu_657_p0 = bitcast_ln756_fu_1288_p1;
        end else begin
            grp_fu_657_p0 = 'bx;
        end
    end else begin
        grp_fu_657_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_load_fu_662_p1 = w1_local_0_0_fu_248;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_fu_854_p2 == 1'd0))) begin
        grp_load_fu_662_p1 = ap_sig_allocacmp_w1_local_0_0_load_1;
    end else begin
        grp_load_fu_662_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_load_fu_667_p1 = w1_local_0_1_fu_252;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_fu_854_p2 == 1'd0))) begin
        grp_load_fu_667_p1 = ap_sig_allocacmp_w1_local_0_1_load_1;
    end else begin
        grp_load_fu_667_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_load_fu_672_p1 = w1_local_1_0_fu_256;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_fu_854_p2 == 1'd0))) begin
        grp_load_fu_672_p1 = ap_sig_allocacmp_w1_local_1_0_load_1;
    end else begin
        grp_load_fu_672_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_load_fu_677_p1 = w1_local_1_1_fu_260;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_fu_854_p2 == 1'd0))) begin
        grp_load_fu_677_p1 = ap_sig_allocacmp_w1_local_1_1_load_1;
    end else begin
        grp_load_fu_677_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_load_fu_682_p1 = bias_1_local_0_fu_280;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_fu_854_p2 == 1'd0))) begin
        grp_load_fu_682_p1 = ap_sig_allocacmp_bias_1_local_0_load_1;
    end else begin
        grp_load_fu_682_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_load_fu_687_p1 = bias_1_local_1_fu_284;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_fu_854_p2 == 1'd0))) begin
        grp_load_fu_687_p1 = ap_sig_allocacmp_bias_1_local_1_load_1;
    end else begin
        grp_load_fu_687_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23_11001_ignoreCallOp206)) | ((1'b1 == ap_CS_fsm_pp0_stage22) & (1'b0 == ap_block_pp0_stage22_11001_ignoreCallOp205)) | ((1'b1 == ap_CS_fsm_pp0_stage21) & (1'b0 == ap_block_pp0_stage21_11001_ignoreCallOp204)) | ((1'b1 == ap_CS_fsm_pp0_stage20) & (1'b0 == ap_block_pp0_stage20_11001_ignoreCallOp203)) | ((1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19_11001_ignoreCallOp202)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001_ignoreCallOp119)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001_ignoreCallOp118)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001_ignoreCallOp117)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001_ignoreCallOp116)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001_ignoreCallOp105)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001_ignoreCallOp104)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & 
    (1'b0 == ap_block_pp0_stage2_11001_ignoreCallOp103)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp102)) | ((1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24_11001_ignoreCallOp252)) | ((1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001_ignoreCallOp193)) | ((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001_ignoreCallOp192)) | ((1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001_ignoreCallOp190)) | ((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001_ignoreCallOp187)) | ((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001_ignoreCallOp177)) | ((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001_ignoreCallOp167)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001_ignoreCallOp120)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001_ignoreCallOp115)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001_ignoreCallOp106)) 
    | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp98)))) begin
        grp_model_array_fu_640_ap_ce = 1'b1;
    end else begin
        grp_model_array_fu_640_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_1571)) begin
            grp_model_array_fu_640_biases_0_0_val = bias_1_local_0_load_1_reg_1773;
        end else if ((1'b1 == ap_condition_1567)) begin
            grp_model_array_fu_640_biases_0_0_val = bias_2_local_0_load_1_reg_1844;
        end else if ((1'b1 == ap_condition_1563)) begin
            grp_model_array_fu_640_biases_0_0_val = bias_2_local_0_fu_288;
        end else if ((1'b1 == ap_condition_1559)) begin
            grp_model_array_fu_640_biases_0_0_val = grp_load_fu_682_p1;
        end else begin
            grp_model_array_fu_640_biases_0_0_val = 'bx;
        end
    end else begin
        grp_model_array_fu_640_biases_0_0_val = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_1571)) begin
            grp_model_array_fu_640_biases_0_1_val = bias_1_local_1_load_1_reg_1779;
        end else if ((1'b1 == ap_condition_1567)) begin
            grp_model_array_fu_640_biases_0_1_val = bias_2_local_1_load_1_reg_1850;
        end else if ((1'b1 == ap_condition_1563)) begin
            grp_model_array_fu_640_biases_0_1_val = bias_2_local_1_fu_292;
        end else if ((1'b1 == ap_condition_1559)) begin
            grp_model_array_fu_640_biases_0_1_val = grp_load_fu_687_p1;
        end else begin
            grp_model_array_fu_640_biases_0_1_val = 'bx;
        end
    end else begin
        grp_model_array_fu_640_biases_0_1_val = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        grp_model_array_fu_640_delta_k_0_0_val = array_back2_delta_kmin1_0_reg_1970;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        grp_model_array_fu_640_delta_k_0_0_val = delta_2_2_reg_1905;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_fu_854_p2 == 1'd0)))) begin
        grp_model_array_fu_640_delta_k_0_0_val = 16'd0;
    end else begin
        grp_model_array_fu_640_delta_k_0_0_val = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        grp_model_array_fu_640_delta_k_0_1_val = array_back2_delta_kmin1_1_reg_1975;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_fu_854_p2 == 1'd0)))) begin
        grp_model_array_fu_640_delta_k_0_1_val = 16'd0;
    end else begin
        grp_model_array_fu_640_delta_k_0_1_val = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        grp_model_array_fu_640_output_kmin1_0_0_val = zext_ln33_reg_1796;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0)))) begin
        grp_model_array_fu_640_output_kmin1_0_0_val = array_out1_output_k_0_reg_1810;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_fu_854_p2 == 1'd0))) begin
        grp_model_array_fu_640_output_kmin1_0_0_val = zext_ln33_fu_884_p1;
    end else begin
        grp_model_array_fu_640_output_kmin1_0_0_val = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0))) begin
        grp_model_array_fu_640_output_kmin1_0_1_val = zext_ln33_1_reg_1801;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd0)))) begin
        grp_model_array_fu_640_output_kmin1_0_1_val = array_out1_output_k_1_reg_1815;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_fu_854_p2 == 1'd0))) begin
        grp_model_array_fu_640_output_kmin1_0_1_val = zext_ln33_1_fu_903_p1;
    end else begin
        grp_model_array_fu_640_output_kmin1_0_1_val = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_1571)) begin
            grp_model_array_fu_640_p_read10 = w1_local_0_0_load_1_reg_1749;
        end else if ((1'b1 == ap_condition_1567)) begin
            grp_model_array_fu_640_p_read10 = w2_local_0_0_load_1_reg_1820;
        end else if ((1'b1 == ap_condition_1563)) begin
            grp_model_array_fu_640_p_read10 = w2_local_0_0_fu_264;
        end else if ((1'b1 == ap_condition_1559)) begin
            grp_model_array_fu_640_p_read10 = grp_load_fu_662_p1;
        end else begin
            grp_model_array_fu_640_p_read10 = 'bx;
        end
    end else begin
        grp_model_array_fu_640_p_read10 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_1571)) begin
            grp_model_array_fu_640_p_read11 = w1_local_0_1_load_1_reg_1755;
        end else if ((1'b1 == ap_condition_1567)) begin
            grp_model_array_fu_640_p_read11 = w2_local_0_1_load_1_reg_1826;
        end else if ((1'b1 == ap_condition_1563)) begin
            grp_model_array_fu_640_p_read11 = w2_local_0_1_fu_268;
        end else if ((1'b1 == ap_condition_1559)) begin
            grp_model_array_fu_640_p_read11 = grp_load_fu_667_p1;
        end else begin
            grp_model_array_fu_640_p_read11 = 'bx;
        end
    end else begin
        grp_model_array_fu_640_p_read11 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_1571)) begin
            grp_model_array_fu_640_p_read12 = w1_local_1_0_load_1_reg_1761;
        end else if ((1'b1 == ap_condition_1567)) begin
            grp_model_array_fu_640_p_read12 = w2_local_1_0_load_1_reg_1832;
        end else if ((1'b1 == ap_condition_1563)) begin
            grp_model_array_fu_640_p_read12 = w2_local_1_0_fu_272;
        end else if ((1'b1 == ap_condition_1559)) begin
            grp_model_array_fu_640_p_read12 = grp_load_fu_672_p1;
        end else begin
            grp_model_array_fu_640_p_read12 = 'bx;
        end
    end else begin
        grp_model_array_fu_640_p_read12 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_1571)) begin
            grp_model_array_fu_640_p_read13 = w1_local_1_1_load_1_reg_1767;
        end else if ((1'b1 == ap_condition_1567)) begin
            grp_model_array_fu_640_p_read13 = w2_local_1_1_load_1_reg_1838;
        end else if ((1'b1 == ap_condition_1563)) begin
            grp_model_array_fu_640_p_read13 = w2_local_1_1_fu_276;
        end else if ((1'b1 == ap_condition_1559)) begin
            grp_model_array_fu_640_p_read13 = grp_load_fu_677_p1;
        end else begin
            grp_model_array_fu_640_p_read13 = 'bx;
        end
    end else begin
        grp_model_array_fu_640_p_read13 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        output_array_inference_0_1_out = output_array_inference_0_1_fu_232;
    end else if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        output_array_inference_0_1_out = output_array_inference_0_1_load_1_reg_2016;
    end else begin
        output_array_inference_0_1_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0)))) begin
        output_array_inference_0_1_out_ap_vld = 1'b1;
    end else begin
        output_array_inference_0_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        output_array_inference_1_1_out = output_array_inference_1_1_fu_236;
    end else if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        output_array_inference_1_1_out = output_array_inference_1_1_load_1_reg_2021;
    end else begin
        output_array_inference_1_1_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0)))) begin
        output_array_inference_1_1_out_ap_vld = 1'b1;
    end else begin
        output_array_inference_1_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        output_array_inference_2_1_out = output_array_inference_2_1_fu_240;
    end else if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        output_array_inference_2_1_out = output_array_inference_2_1_load_1_reg_2026;
    end else begin
        output_array_inference_2_1_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0)))) begin
        output_array_inference_2_1_out_ap_vld = 1'b1;
    end else begin
        output_array_inference_2_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        output_array_inference_3_1_out = output_array_inference_3_1_fu_244;
    end else if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        output_array_inference_3_1_out = output_array_inference_3_1_load_1_reg_2031;
    end else begin
        output_array_inference_3_1_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0)))) begin
        output_array_inference_3_1_out_ap_vld = 1'b1;
    end else begin
        output_array_inference_3_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        select_ln96_1_out_ap_vld = 1'b1;
    end else begin
        select_ln96_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        select_ln96_3_out_ap_vld = 1'b1;
    end else begin
        select_ln96_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        select_ln96_5_out_ap_vld = 1'b1;
    end else begin
        select_ln96_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        select_ln96_7_out_ap_vld = 1'b1;
    end else begin
        select_ln96_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        w1_local_0_0_3_out = grp_load_fu_662_p1;
    end else if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        w1_local_0_0_3_out = w1_local_0_0_load_1_reg_1749;
    end else begin
        w1_local_0_0_3_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0)))) begin
        w1_local_0_0_3_out_ap_vld = 1'b1;
    end else begin
        w1_local_0_0_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        w1_local_0_1_3_out = grp_load_fu_667_p1;
    end else if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        w1_local_0_1_3_out = w1_local_0_1_load_1_reg_1755;
    end else begin
        w1_local_0_1_3_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0)))) begin
        w1_local_0_1_3_out_ap_vld = 1'b1;
    end else begin
        w1_local_0_1_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        w1_local_1_0_3_out = grp_load_fu_672_p1;
    end else if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        w1_local_1_0_3_out = w1_local_1_0_load_1_reg_1761;
    end else begin
        w1_local_1_0_3_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0)))) begin
        w1_local_1_0_3_out_ap_vld = 1'b1;
    end else begin
        w1_local_1_0_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        w1_local_1_1_3_out = grp_load_fu_677_p1;
    end else if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        w1_local_1_1_3_out = w1_local_1_1_load_1_reg_1767;
    end else begin
        w1_local_1_1_3_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0)))) begin
        w1_local_1_1_3_out_ap_vld = 1'b1;
    end else begin
        w1_local_1_1_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        w2_local_0_0_3_out = w2_local_0_0_fu_264;
    end else if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        w2_local_0_0_3_out = w2_local_0_0_load_1_reg_1820;
    end else begin
        w2_local_0_0_3_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0)))) begin
        w2_local_0_0_3_out_ap_vld = 1'b1;
    end else begin
        w2_local_0_0_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        w2_local_0_1_3_out = w2_local_0_1_fu_268;
    end else if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        w2_local_0_1_3_out = w2_local_0_1_load_1_reg_1826;
    end else begin
        w2_local_0_1_3_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0)))) begin
        w2_local_0_1_3_out_ap_vld = 1'b1;
    end else begin
        w2_local_0_1_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        w2_local_1_0_3_out = w2_local_1_0_fu_272;
    end else if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        w2_local_1_0_3_out = w2_local_1_0_load_1_reg_1832;
    end else begin
        w2_local_1_0_3_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0)))) begin
        w2_local_1_0_3_out_ap_vld = 1'b1;
    end else begin
        w2_local_1_0_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        w2_local_1_1_3_out = w2_local_1_1_fu_276;
    end else if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0))) begin
        w2_local_1_1_3_out = w2_local_1_1_load_1_reg_1838;
    end else begin
        w2_local_1_1_3_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state28) & (icmp_ln69_reg_1740 == 1'd0)))) begin
        w2_local_1_1_3_out_ap_vld = 1'b1;
    end else begin
        w2_local_1_1_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((1'b0 == ap_block_pp0_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((1'b0 == ap_block_pp0_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((1'b0 == ap_block_pp0_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((1'b0 == ap_block_pp0_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((1'b0 == ap_block_pp0_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_pp0_stage24 : begin
            if ((~(((ap_predicate_tran26to28_state26 == 1'b1) & (1'b0 == ap_block_pp0_stage24_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage24_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd1))) & (1'b0 == ap_block_pp0_stage24_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage24_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_1740 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else if (((ap_predicate_tran26to28_state26 == 1'b1) & (1'b0 == ap_block_pp0_stage24_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LD_fu_1276_p5 = {{tmp_8_fu_1269_p3}, {zext_ln93_4_fu_1248_p1[51:0]}};

assign add_ln69_fu_860_p2 = (j_fu_228 + 3'd1);

assign add_ln93_1_fu_1007_p2 = ($signed(trunc_ln93_fu_983_p1) + $signed(16'd65483));

assign add_ln93_2_fu_1171_p2 = ($signed(sub_ln93_1_reg_1883) + $signed(32'd4294967242));

assign add_ln93_3_fu_1208_p2 = (select_ln93_1_fu_1199_p3 + zext_ln93_3_fu_1205_p1);

assign add_ln93_4_fu_1263_p2 = (select_ln93_2_fu_1251_p3 + sub_ln93_3_fu_1258_p2);

assign add_ln93_fu_1092_p2 = ($signed(sub_ln93_1_reg_1883) + $signed(32'd4294967243));

assign and_ln144_fu_914_p2 = (icmp_ln144_fu_908_p2 & cmp_i_i116);

assign and_ln93_1_fu_1143_p2 = (xor_ln93_1_fu_1137_p2 & bit_select30_i_i1_reg_1895);

assign and_ln93_2_fu_1311_p2 = (tmp_4_reg_1960 & or_ln93_1_fu_1307_p2);

assign and_ln93_3_fu_1326_p2 = (xor_ln93_fu_1321_p2 & and_ln93_2_fu_1311_p2);

assign and_ln93_4_fu_1113_p2 = (select_ln93_reg_1877 & lshr_ln93_2_reg_1890);

assign and_ln93_fu_1123_p2 = (icmp_ln93_2_fu_1117_p2 & icmp_ln93_1_fu_1107_p2);

assign and_ln94_1_fu_1353_p2 = (icmp_ln94_2_fu_1342_p2 & icmp_ln94_1_fu_1337_p2);

assign and_ln94_2_fu_1359_p2 = (and_ln94_fu_1347_p2 & and_ln94_1_fu_1353_p2);

assign and_ln94_3_fu_1427_p2 = (icmp_ln94_3_fu_1422_p2 & and_ln93_3_fu_1326_p2);

assign and_ln94_4_fu_1466_p2 = (icmp_ln94_4_fu_1461_p2 & and_ln93_3_fu_1326_p2);

assign and_ln94_5_fu_1505_p2 = (icmp_ln94_5_fu_1500_p2 & and_ln93_3_fu_1326_p2);

assign and_ln94_fu_1347_p2 = (icmp_ln94_fu_1332_p2 & and_ln93_3_fu_1326_p2);

assign and_ln96_1_fu_1371_p2 = (xor_ln96_fu_1365_p2 & and_ln96_fu_1316_p2);

assign and_ln96_2_fu_1382_p2 = (icmp_ln94_fu_1332_p2 & icmp_ln94_1_fu_1337_p2);

assign and_ln96_3_fu_1388_p2 = (or_ln96_fu_1377_p2 & icmp_ln94_2_fu_1342_p2);

assign and_ln96_4_fu_1394_p2 = (and_ln96_3_fu_1388_p2 & and_ln96_2_fu_1382_p2);

assign and_ln96_5_fu_1433_p2 = (or_ln96_fu_1377_p2 & icmp_ln94_3_fu_1422_p2);

assign and_ln96_6_fu_1472_p2 = (or_ln96_fu_1377_p2 & icmp_ln94_4_fu_1461_p2);

assign and_ln96_7_fu_1511_p2 = (or_ln96_fu_1377_p2 & icmp_ln94_5_fu_1500_p2);

assign and_ln96_fu_1316_p2 = (tmp_5_reg_1965 & or_ln93_1_fu_1307_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage17 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage19 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage20 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage21 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp0_stage22 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp0_stage23 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp0_stage24 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd27];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001_ignoreCallOp98 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001_ignoreCallOp119 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001_ignoreCallOp120 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001_ignoreCallOp167 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001_ignoreCallOp177 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001_ignoreCallOp187 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_11001_ignoreCallOp190 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_11001_ignoreCallOp192 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_11001_ignoreCallOp193 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_11001_ignoreCallOp202 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001_ignoreCallOp102 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_11001_ignoreCallOp203 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_11001_ignoreCallOp204 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_11001_ignoreCallOp205 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_11001_ignoreCallOp206 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_11001_ignoreCallOp252 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001_ignoreCallOp103 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001_ignoreCallOp104 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001_ignoreCallOp105 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001_ignoreCallOp106 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001_ignoreCallOp115 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001_ignoreCallOp116 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001_ignoreCallOp117 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001_ignoreCallOp118 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage8_iter0_ignore_call27 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage9_iter0_ignore_call27 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage10_iter0_ignore_call27 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage11_iter0_ignore_call27 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage13_iter0_ignore_call131 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage14_iter0_ignore_call131 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage15_iter0_ignore_call131 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage16_iter0_ignore_call131 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage17_iter0_ignore_call131 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage18_iter0_ignore_call131 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage19_iter0_ignore_call140 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage20_iter0_ignore_call140 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage21_iter0_ignore_call140 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage22_iter0_ignore_call140 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage23_iter0_ignore_call140 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage24_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage24_iter0_ignore_call140 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter1_ignore_call24 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0_ignore_call24 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0_ignore_call24 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0_ignore_call24 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0_ignore_call24 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0_ignore_call24 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0_ignore_call24 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0_ignore_call27 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0_ignore_call27 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1559 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln69_fu_854_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_1563 = ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6) & (icmp_ln69_reg_1740 == 1'd0));
end

always @ (*) begin
    ap_condition_1567 = ((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13) & (icmp_ln69_reg_1740 == 1'd0));
end

always @ (*) begin
    ap_condition_1571 = ((1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19) & (icmp_ln69_reg_1740 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran26to28_state26 = ((1'd1 == and_ln144_reg_1806) & (icmp_ln69_reg_1740 == 1'd0));
end

assign array_back1_bias_change_0_out = array_back1_bias_change_0_reg_2080;

assign array_back1_bias_change_1_out = array_back1_bias_change_1_reg_2086;

assign array_back1_weight_changes_0_0_out = array_back1_weight_changes_0_0_reg_2056;

assign array_back1_weight_changes_0_1_out = array_back1_weight_changes_0_1_reg_2062;

assign array_back1_weight_changes_1_0_out = array_back1_weight_changes_1_0_reg_2068;

assign array_back1_weight_changes_1_1_out = array_back1_weight_changes_1_1_reg_2074;

assign array_back2_bias_change_0_out = array_back2_bias_change_0_reg_2004;

assign array_back2_bias_change_1_out = array_back2_bias_change_1_reg_2010;

assign array_back2_weight_changes_0_0_out = array_back2_weight_changes_0_0_reg_1980;

assign array_back2_weight_changes_0_1_out = array_back2_weight_changes_0_1_reg_1986;

assign array_back2_weight_changes_1_0_out = array_back2_weight_changes_1_0_reg_1992;

assign array_back2_weight_changes_1_1_out = array_back2_weight_changes_1_1_reg_1998;

assign bit_select30_i_i1_fu_1013_p3 = select_ln93_fu_941_p3[add_ln93_1_fu_1007_p2];

assign bitcast_ln756_fu_1288_p1 = LD_fu_1276_p5;

assign delta_2_1_fu_1070_p4 = {{mul_ln114_fu_1064_p2[26:12]}};

assign delta_2_2_fu_1084_p3 = ((icmp_ln111_fu_1025_p2[0:0] == 1'b1) ? delta_2_fu_1056_p1 : sext_ln114_1_fu_1080_p1);

assign delta_2_fu_1056_p1 = sub_ln112_fu_1050_p2[15:0];

assign icmp_ln111_fu_1025_p2 = (($signed(output_2_reg_1856) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln144_fu_908_p2 = ((j_fu_228 == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_854_p2 = ((j_fu_228 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln93_1_fu_1107_p2 = (($signed(tmp_7_fu_1097_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln93_2_fu_1117_p2 = ((and_ln93_4_fu_1113_p2 != 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln93_3_fu_1165_p2 = (($signed(add_ln93_fu_1092_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln93_4_fu_1293_p2 = ((add_ln93_4_fu_1263_p2 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln93_5_fu_1242_p2 = ((trunc_ln93_3_fu_1232_p4 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_931_p2 = ((output_2_reg_1856 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln94_1_fu_1337_p2 = ((trunc_ln72_reg_1785 != 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln94_2_fu_1342_p2 = ((trunc_ln72_reg_1785 != 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln94_3_fu_1422_p2 = ((trunc_ln72_reg_1785 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln94_4_fu_1461_p2 = ((trunc_ln72_reg_1785 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln94_5_fu_1500_p2 = ((trunc_ln72_reg_1785 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_1332_p2 = ((trunc_ln72_reg_1785 != 2'd0) ? 1'b1 : 1'b0);

assign lshr_ln93_2_fu_1001_p2 = 16'd65535 >> zext_ln93_5_fu_997_p1;

assign lshr_ln93_fu_1180_p2 = zext_ln93_fu_1162_p1 >> zext_ln93_1_fu_1176_p1;

assign mul_ln114_fu_1064_p1 = 27'd409;

assign or_ln93_1_fu_1307_p2 = (icmp_ln93_5_reg_1945 | icmp_ln93_4_reg_1955);

assign or_ln93_fu_1148_p2 = (and_ln93_fu_1123_p2 | and_ln93_1_fu_1143_p2);

assign or_ln96_1_fu_1408_p2 = (and_ln96_4_fu_1394_p2 | and_ln94_2_fu_1359_p2);

assign or_ln96_2_fu_1447_p2 = (and_ln96_5_fu_1433_p2 | and_ln94_3_fu_1427_p2);

assign or_ln96_3_fu_1486_p2 = (and_ln96_6_fu_1472_p2 | and_ln94_4_fu_1466_p2);

assign or_ln96_4_fu_1525_p2 = (and_ln96_7_fu_1511_p2 | and_ln94_5_fu_1505_p2);

assign or_ln96_fu_1377_p2 = (icmp_ln93_reg_1871 | and_ln96_1_fu_1371_p2);

assign or_ln_fu_1154_p3 = {{1'd0}, {or_ln93_fu_1148_p2}};

assign select_ln93_1_fu_1199_p3 = ((icmp_ln93_3_reg_1920[0:0] == 1'b1) ? lshr_ln93_reg_1925 : shl_ln93_fu_1194_p2);

assign select_ln93_2_fu_1251_p3 = ((tmp_10_reg_1940[0:0] == 1'b1) ? 11'd1023 : 11'd1022);

assign select_ln93_fu_941_p3 = ((tmp_6_reg_1865[0:0] == 1'b1) ? sub_ln93_fu_936_p2 : output_2_reg_1856);

assign select_ln96_1_fu_1414_p3 = ((or_ln96_1_fu_1408_p2[0:0] == 1'b1) ? select_ln96_fu_1400_p3 : output_array_inference_3_1_fu_244);

assign select_ln96_1_out = select_ln96_1_reg_2036;

assign select_ln96_2_fu_1439_p3 = ((and_ln96_5_fu_1433_p2[0:0] == 1'b1) ? 16'd0 : 16'd4096);

assign select_ln96_3_fu_1453_p3 = ((or_ln96_2_fu_1447_p2[0:0] == 1'b1) ? select_ln96_2_fu_1439_p3 : output_array_inference_2_1_fu_240);

assign select_ln96_3_out = select_ln96_3_reg_2041;

assign select_ln96_4_fu_1478_p3 = ((and_ln96_6_fu_1472_p2[0:0] == 1'b1) ? 16'd0 : 16'd4096);

assign select_ln96_5_fu_1492_p3 = ((or_ln96_3_fu_1486_p2[0:0] == 1'b1) ? select_ln96_4_fu_1478_p3 : output_array_inference_1_1_fu_236);

assign select_ln96_5_out = select_ln96_5_reg_2046;

assign select_ln96_6_fu_1517_p3 = ((and_ln96_7_fu_1511_p2[0:0] == 1'b1) ? 16'd0 : 16'd4096);

assign select_ln96_7_fu_1531_p3 = ((or_ln96_4_fu_1525_p2[0:0] == 1'b1) ? select_ln96_6_fu_1517_p3 : output_array_inference_0_1_fu_232);

assign select_ln96_7_out = select_ln96_7_reg_2051;

assign select_ln96_fu_1400_p3 = ((and_ln96_4_fu_1394_p2[0:0] == 1'b1) ? 16'd0 : 16'd4096);

assign sext_ln112_fu_1030_p1 = output_2_reg_1856;

assign sext_ln114_1_fu_1080_p1 = $signed(delta_2_1_fu_1070_p4);

assign sext_ln93_fu_965_p1 = $signed(tmp_1_fu_957_p3);

assign shl_ln93_fu_1194_p2 = zext_ln93_reg_1915 << zext_ln93_2_fu_1191_p1;

assign sub_ln112_fu_1050_p2 = ($signed(sext_ln112_fu_1030_p1) - $signed(zext_ln112_fu_1046_p1));

assign sub_ln93_1_fu_977_p2 = (32'd16 - tmp_2_fu_969_p3);

assign sub_ln93_2_fu_1186_p2 = (32'd54 - sub_ln93_1_reg_1883);

assign sub_ln93_3_fu_1258_p2 = (11'd4 - trunc_ln93_2_reg_1900);

assign sub_ln93_4_fu_991_p2 = (4'd6 - trunc_ln93_1_fu_987_p1);

assign sub_ln93_fu_936_p2 = ($signed(16'd0) - $signed(output_2_reg_1856));

assign tmp_1_fu_957_p3 = {{1'd1}, {tmp_fu_947_p4}};


always @ (sext_ln93_fu_965_p1) begin
    if (sext_ln93_fu_965_p1[0] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd0;
    end else if (sext_ln93_fu_965_p1[1] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd1;
    end else if (sext_ln93_fu_965_p1[2] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd2;
    end else if (sext_ln93_fu_965_p1[3] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd3;
    end else if (sext_ln93_fu_965_p1[4] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd4;
    end else if (sext_ln93_fu_965_p1[5] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd5;
    end else if (sext_ln93_fu_965_p1[6] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd6;
    end else if (sext_ln93_fu_965_p1[7] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd7;
    end else if (sext_ln93_fu_965_p1[8] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd8;
    end else if (sext_ln93_fu_965_p1[9] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd9;
    end else if (sext_ln93_fu_965_p1[10] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd10;
    end else if (sext_ln93_fu_965_p1[11] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd11;
    end else if (sext_ln93_fu_965_p1[12] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd12;
    end else if (sext_ln93_fu_965_p1[13] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd13;
    end else if (sext_ln93_fu_965_p1[14] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd14;
    end else if (sext_ln93_fu_965_p1[15] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd15;
    end else if (sext_ln93_fu_965_p1[16] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd16;
    end else if (sext_ln93_fu_965_p1[17] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd17;
    end else if (sext_ln93_fu_965_p1[18] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd18;
    end else if (sext_ln93_fu_965_p1[19] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd19;
    end else if (sext_ln93_fu_965_p1[20] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd20;
    end else if (sext_ln93_fu_965_p1[21] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd21;
    end else if (sext_ln93_fu_965_p1[22] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd22;
    end else if (sext_ln93_fu_965_p1[23] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd23;
    end else if (sext_ln93_fu_965_p1[24] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd24;
    end else if (sext_ln93_fu_965_p1[25] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd25;
    end else if (sext_ln93_fu_965_p1[26] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd26;
    end else if (sext_ln93_fu_965_p1[27] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd27;
    end else if (sext_ln93_fu_965_p1[28] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd28;
    end else if (sext_ln93_fu_965_p1[29] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd29;
    end else if (sext_ln93_fu_965_p1[30] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd30;
    end else if (sext_ln93_fu_965_p1[31] == 1'b1) begin
        tmp_2_fu_969_p3 = 32'd31;
    end else begin
        tmp_2_fu_969_p3 = 32'd32;
    end
end

assign tmp_6_fu_923_p1 = grp_model_array_fu_640_ap_return_0;

assign tmp_7_fu_1097_p4 = {{add_ln93_fu_1092_p2[31:1]}};

assign tmp_8_fu_1269_p3 = {{tmp_6_reg_1865}, {add_ln93_4_fu_1263_p2}};

assign tmp_9_fu_1129_p3 = add_ln93_fu_1092_p2[32'd31];

integer ap_tvar_int_0;

always @ (select_ln93_fu_941_p3) begin
    for (ap_tvar_int_0 = 16 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 15 - 0) begin
            tmp_fu_947_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_fu_947_p4[ap_tvar_int_0] = select_ln93_fu_941_p3[15 - ap_tvar_int_0];
        end
    end
end

assign trunc_ln72_fu_866_p1 = j_fu_228[1:0];

assign trunc_ln93_1_fu_987_p1 = sub_ln93_1_fu_977_p2[3:0];

assign trunc_ln93_2_fu_1021_p1 = tmp_2_fu_969_p3[10:0];

assign trunc_ln93_3_fu_1232_p4 = {{add_ln93_3_fu_1208_p2[52:1]}};

assign trunc_ln93_fu_983_p1 = sub_ln93_1_fu_977_p2[15:0];

assign xor_ln93_1_fu_1137_p2 = (tmp_9_fu_1129_p3 ^ 1'd1);

assign xor_ln93_fu_1321_p2 = (icmp_ln93_reg_1871 ^ 1'd1);

assign xor_ln96_fu_1365_p2 = (1'd1 ^ and_ln93_2_fu_1311_p2);

assign zext_ln112_fu_1046_p1 = zext_ln112_cast_fu_1033_p6;

assign zext_ln33_1_fu_903_p1 = output_0_1_fu_889_p6;

assign zext_ln33_fu_884_p1 = output_0_fu_870_p6;

assign zext_ln93_1_fu_1176_p1 = add_ln93_2_fu_1171_p2;

assign zext_ln93_2_fu_1191_p1 = sub_ln93_2_reg_1930;

assign zext_ln93_3_fu_1205_p1 = or_ln_reg_1910;

assign zext_ln93_4_fu_1248_p1 = lshr_ln93_1_reg_1935;

assign zext_ln93_5_fu_997_p1 = sub_ln93_4_fu_991_p2;

assign zext_ln93_fu_1162_p1 = select_ln93_reg_1877;

always @ (posedge ap_clk) begin
    zext_ln33_reg_1796[15:13] <= 3'b000;
    zext_ln33_1_reg_1801[15:13] <= 3'b000;
    or_ln_reg_1910[1] <= 1'b0;
    zext_ln93_reg_1915[63:16] <= 48'b000000000000000000000000000000000000000000000000;
end

endmodule //accelerator_accelerator_Pipeline_VITIS_LOOP_69_4
