// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="spi_master_logic_spi_master_logic,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sfvc784-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.489000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1,HLS_SYN_LUT=27,HLS_VERSION=2024_2}" *)

module spi_master_logic (
        ap_clk,
        ap_rst,
        data_out,
        data_out_ap_vld,
        data_in,
        data_in_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
output  [31:0] data_out;
output   data_out_ap_vld;
input  [31:0] data_in;
input   data_in_ap_vld;

reg data_out_ap_vld;

wire    data_out_ap_ack;
reg    data_in_ap_ack;
wire    data_out_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    data_in_blk_n;
wire   [0:0] tmp_nbreadreq_fu_34_p3;
wire   [31:0] shl_ln24_fu_66_p2;
reg   [31:0] ap_phi_mux_test_data_phi_fu_58_p4;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((tmp_nbreadreq_fu_34_p3 == 1'd0)) begin
            ap_phi_mux_test_data_phi_fu_58_p4 = 32'd268435455;
        end else if ((tmp_nbreadreq_fu_34_p3 == 1'd1)) begin
            ap_phi_mux_test_data_phi_fu_58_p4 = shl_ln24_fu_66_p2;
        end else begin
            ap_phi_mux_test_data_phi_fu_58_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_test_data_phi_fu_58_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (tmp_nbreadreq_fu_34_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_in_ap_ack = 1'b1;
    end else begin
        data_in_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_34_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_in_blk_n = data_in_ap_vld;
    end else begin
        data_in_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_out_ap_vld = 1'b1;
    end else begin
        data_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((data_out_ap_ack == 1'b0) | ((tmp_nbreadreq_fu_34_p3 == 1'd1) & (data_in_ap_vld == 1'b0)));
end

assign data_out = ap_phi_mux_test_data_phi_fu_58_p4;

assign data_out_ap_ack = 1'b1;

assign data_out_blk_n = 1'b1;

assign shl_ln24_fu_66_p2 = data_in << 32'd1;

assign tmp_nbreadreq_fu_34_p3 = data_in_ap_vld;

endmodule //spi_master_logic
