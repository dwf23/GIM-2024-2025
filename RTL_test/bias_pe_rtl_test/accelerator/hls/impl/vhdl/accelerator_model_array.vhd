-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accelerator_model_array is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    p_read10 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read29 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read30 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read31 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read32 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read33 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read34 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read35 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read36 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read37 : IN STD_LOGIC_VECTOR (15 downto 0);
    training : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of accelerator_model_array is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv34_3FFFFFFCD : STD_LOGIC_VECTOR (33 downto 0) := "1111111111111111111111111111001101";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv23_33 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000110011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal p_read_1_reg_718 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_read_4_reg_723 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_4_reg_723_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_4_reg_723_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_5_reg_729 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_5_reg_729_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_5_reg_729_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read101_reg_735 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_2_fu_156_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln13_2_reg_745 : STD_LOGIC_VECTOR (24 downto 0);
    signal weight_out_weight_change_reg_750 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_reg_750_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_reg_750_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln12_4_fu_229_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln12_4_reg_760 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln13_3_fu_233_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal weight_out_weight_change_1_reg_772 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_1_reg_772_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_1_reg_772_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln12_5_fu_261_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln12_6_fu_265_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal weight_out_weight_change_2_reg_788 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_2_reg_788_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_2_reg_788_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln12_7_fu_299_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_3_reg_799 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_799_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_3_reg_804 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_3_reg_804_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_3_reg_804_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal cmp_i_i_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i_reg_809 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i_reg_809_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i_reg_809_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_815 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_815_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_815_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_1_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_1_reg_820 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_1_reg_820_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_1_reg_820_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_825 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_830 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_835 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_1_fu_124_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mul_ln14_4_fu_129_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln14_5_fu_134_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln14_7_fu_139_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_i_i_fu_144_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_fu_152_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_2_fu_156_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_fu_160_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_fu_152_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_fu_160_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_i_i_fu_144_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_fu_160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_171_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_171_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln14_1_fu_124_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln14_fu_179_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln13_1_fu_195_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_2_fu_199_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_1_fu_195_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_2_fu_199_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_2_fu_199_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_i_i_1_fu_210_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_3_fu_218_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_i_i_1_fu_210_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_3_fu_218_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_3_fu_218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln12_4_fu_229_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_3_fu_233_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln14_1_fu_237_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln14_1_fu_237_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln14_4_fu_129_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln14_1_fu_245_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln12_5_fu_261_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln12_6_fu_265_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln13_2_fu_269_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln14_2_fu_275_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln14_2_fu_275_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln14_5_fu_134_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln14_2_fu_283_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln12_7_fu_299_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln13_2_fu_269_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln14_6_fu_313_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_6_fu_313_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_6_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln14_3_fu_324_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln14_3_fu_324_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln14_7_fu_139_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln14_3_fu_332_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal icmp_ln11_fu_354_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln11_1_fu_360_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln12_fu_372_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln12_1_fu_366_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln12_fu_372_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln12_2_fu_369_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln13_fu_378_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln13_fu_378_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln13_fu_378_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln12_fu_372_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln12_1_fu_403_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln12_1_fu_403_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln12_1_fu_403_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln_fu_460_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_672_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal weight_out_sum_delta_out_fu_469_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_681_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal weight_out_sum_delta_out_1_fu_478_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_690_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln13_2_fu_487_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_699_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln_fu_460_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_662_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal omega_fu_501_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln12_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln12_3_fu_510_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal output_3_fu_525_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln13_2_fu_487_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_708_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal omega_1_fu_542_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln12_1_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln5_fu_551_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal output_2_fu_566_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal weight_out_sum_delta_out_fu_469_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_sum_delta_out_1_fu_478_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal error_1_fu_578_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal error_3_fu_585_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln29_fu_533_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln6_fu_574_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal agg_result_delta_kmin1_0_0_fu_592_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal agg_result_delta_kmin1_1_0_fu_599_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln29_fu_496_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln29_1_fu_537_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_662_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_662_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_672_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_672_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_681_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_681_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_681_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_690_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_690_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_690_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_699_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_699_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_699_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_708_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_708_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_662_ce : STD_LOGIC;
    signal grp_fu_672_ce : STD_LOGIC;
    signal grp_fu_681_ce : STD_LOGIC;
    signal grp_fu_690_ce : STD_LOGIC;
    signal grp_fu_699_ce : STD_LOGIC;
    signal grp_fu_708_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component accelerator_mul_32s_7s_34_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component accelerator_mul_16s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component accelerator_mul_16s_16s_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component accelerator_mac_mulsub_16s_6ns_25s_25_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (24 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component accelerator_mac_muladd_16s_16s_25ns_25_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (24 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    mul_32s_7s_34_1_1_U17 : component accelerator_mul_32s_7s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 7,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln14_fu_160_p2,
        din1 => mul_ln14_1_fu_124_p1,
        dout => mul_ln14_1_fu_124_p2);

    mul_32s_7s_34_1_1_U18 : component accelerator_mul_32s_7s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 7,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln14_2_fu_199_p2,
        din1 => mul_ln14_4_fu_129_p1,
        dout => mul_ln14_4_fu_129_p2);

    mul_32s_7s_34_1_1_U19 : component accelerator_mul_32s_7s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 7,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln14_3_fu_218_p2,
        din1 => mul_ln14_5_fu_134_p1,
        dout => mul_ln14_5_fu_134_p2);

    mul_32s_7s_34_1_1_U20 : component accelerator_mul_32s_7s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 7,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln14_6_fu_313_p2,
        din1 => mul_ln14_7_fu_139_p1,
        dout => mul_ln14_7_fu_139_p2);

    mul_16s_16s_32_1_1_U21 : component accelerator_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln14_fu_160_p0,
        din1 => mul_ln14_fu_160_p1,
        dout => mul_ln14_fu_160_p2);

    mul_16s_16s_32_1_1_U22 : component accelerator_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln14_2_fu_199_p0,
        din1 => mul_ln14_2_fu_199_p1,
        dout => mul_ln14_2_fu_199_p2);

    mul_16s_16s_32_1_1_U23 : component accelerator_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln14_3_fu_218_p0,
        din1 => mul_ln14_3_fu_218_p1,
        dout => mul_ln14_3_fu_218_p2);

    mul_16s_16s_25_1_1_U24 : component accelerator_mul_16s_16s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln13_2_fu_269_p0,
        din1 => p_read34,
        dout => mul_ln13_2_fu_269_p2);

    mul_16s_16s_32_1_1_U25 : component accelerator_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln14_6_fu_313_p0,
        din1 => mul_ln14_6_fu_313_p1,
        dout => mul_ln14_6_fu_313_p2);

    mul_16s_16s_25_1_1_U26 : component accelerator_mul_16s_16s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln12_fu_372_p0,
        din1 => mul_ln12_fu_372_p1,
        dout => mul_ln12_fu_372_p2);

    mul_16s_16s_25_1_1_U27 : component accelerator_mul_16s_16s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln13_fu_378_p0,
        din1 => mul_ln13_fu_378_p1,
        dout => mul_ln13_fu_378_p2);

    mul_16s_16s_25_1_1_U28 : component accelerator_mul_16s_16s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln12_1_fu_403_p0,
        din1 => mul_ln12_1_fu_403_p1,
        dout => mul_ln12_1_fu_403_p2);

    mac_mulsub_16s_6ns_25s_25_4_1_U29 : component accelerator_mac_mulsub_16s_6ns_25s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        din2_WIDTH => 25,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read36,
        din1 => grp_fu_662_p1,
        din2 => grp_fu_662_p2,
        ce => grp_fu_662_ce,
        dout => grp_fu_662_p3);

    mac_muladd_16s_16s_25ns_25_4_1_U30 : component accelerator_mac_muladd_16s_16s_25ns_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 25,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read29,
        din1 => grp_fu_672_p1,
        din2 => grp_fu_672_p2,
        ce => grp_fu_672_ce,
        dout => grp_fu_672_p3);

    mac_muladd_16s_16s_25ns_25_4_1_U31 : component accelerator_mac_muladd_16s_16s_25ns_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 25,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_681_p0,
        din1 => grp_fu_681_p1,
        din2 => grp_fu_681_p2,
        ce => grp_fu_681_ce,
        dout => grp_fu_681_p3);

    mac_muladd_16s_16s_25ns_25_4_1_U32 : component accelerator_mac_muladd_16s_16s_25ns_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 25,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_690_p0,
        din1 => grp_fu_690_p1,
        din2 => grp_fu_690_p2,
        ce => grp_fu_690_ce,
        dout => grp_fu_690_p3);

    mac_muladd_16s_16s_25ns_25_4_1_U33 : component accelerator_mac_muladd_16s_16s_25ns_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 25,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_699_p0,
        din1 => grp_fu_699_p1,
        din2 => grp_fu_699_p2,
        ce => grp_fu_699_ce,
        dout => grp_fu_699_p3);

    mac_mulsub_16s_6ns_25s_25_4_1_U34 : component accelerator_mac_mulsub_16s_6ns_25s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        din2_WIDTH => 25,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read37,
        din1 => grp_fu_708_p1,
        din2 => grp_fu_708_p2,
        ce => grp_fu_708_ce,
        dout => grp_fu_708_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cmp_i_i_reg_809 <= cmp_i_i_fu_348_p2;
                cmp_i_i_reg_809_pp0_iter1_reg <= cmp_i_i_reg_809;
                icmp_ln11_1_reg_820 <= icmp_ln11_1_fu_360_p2;
                icmp_ln11_1_reg_820_pp0_iter1_reg <= icmp_ln11_1_reg_820;
                icmp_ln11_reg_815 <= icmp_ln11_fu_354_p2;
                icmp_ln11_reg_815_pp0_iter1_reg <= icmp_ln11_reg_815;
                p_read101_reg_735 <= p_read10;
                p_read_1_reg_718 <= p_read36;
                p_read_4_reg_723 <= p_read33;
                p_read_4_reg_723_pp0_iter1_reg <= p_read_4_reg_723;
                p_read_5_reg_729 <= p_read32;
                p_read_5_reg_729_pp0_iter1_reg <= p_read_5_reg_729;
                sext_ln12_4_reg_760 <= sext_ln12_4_fu_229_p1;
                sext_ln13_2_reg_745 <= sext_ln13_2_fu_156_p1;
                tmp_1_reg_830 <= mul_ln12_fu_372_p2(24 downto 9);
                tmp_2_reg_835 <= mul_ln12_1_fu_403_p2(24 downto 9);
                tmp_3_reg_799 <= mul_ln13_2_fu_269_p2(24 downto 9);
                tmp_3_reg_799_pp0_iter1_reg <= tmp_3_reg_799;
                tmp_reg_825 <= mul_ln13_fu_378_p2(24 downto 9);
                weight_out_weight_change_1_reg_772 <= add_ln14_1_fu_245_p2(33 downto 18);
                weight_out_weight_change_1_reg_772_pp0_iter1_reg <= weight_out_weight_change_1_reg_772;
                weight_out_weight_change_2_reg_788 <= add_ln14_2_fu_283_p2(33 downto 18);
                weight_out_weight_change_2_reg_788_pp0_iter1_reg <= weight_out_weight_change_2_reg_788;
                weight_out_weight_change_3_reg_804 <= add_ln14_3_fu_332_p2(33 downto 18);
                weight_out_weight_change_3_reg_804_pp0_iter1_reg <= weight_out_weight_change_3_reg_804;
                weight_out_weight_change_reg_750 <= add_ln14_fu_179_p2(33 downto 18);
                weight_out_weight_change_reg_750_pp0_iter1_reg <= weight_out_weight_change_reg_750;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                cmp_i_i_reg_809_pp0_iter2_reg <= cmp_i_i_reg_809_pp0_iter1_reg;
                icmp_ln11_1_reg_820_pp0_iter2_reg <= icmp_ln11_1_reg_820_pp0_iter1_reg;
                icmp_ln11_reg_815_pp0_iter2_reg <= icmp_ln11_reg_815_pp0_iter1_reg;
                p_read_4_reg_723_pp0_iter2_reg <= p_read_4_reg_723_pp0_iter1_reg;
                p_read_5_reg_729_pp0_iter2_reg <= p_read_5_reg_729_pp0_iter1_reg;
                weight_out_weight_change_1_reg_772_pp0_iter2_reg <= weight_out_weight_change_1_reg_772_pp0_iter1_reg;
                weight_out_weight_change_2_reg_788_pp0_iter2_reg <= weight_out_weight_change_2_reg_788_pp0_iter1_reg;
                weight_out_weight_change_3_reg_804_pp0_iter2_reg <= weight_out_weight_change_3_reg_804_pp0_iter1_reg;
                weight_out_weight_change_reg_750_pp0_iter2_reg <= weight_out_weight_change_reg_750_pp0_iter1_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln14_1_fu_245_p2 <= std_logic_vector(unsigned(shl_ln14_1_fu_237_p3) + unsigned(mul_ln14_4_fu_129_p2));
    add_ln14_2_fu_283_p2 <= std_logic_vector(unsigned(shl_ln14_2_fu_275_p3) + unsigned(mul_ln14_5_fu_134_p2));
    add_ln14_3_fu_332_p2 <= std_logic_vector(unsigned(shl_ln14_3_fu_324_p3) + unsigned(mul_ln14_7_fu_139_p2));
    add_ln14_fu_179_p2 <= std_logic_vector(unsigned(shl_ln_fu_171_p3) + unsigned(mul_ln14_1_fu_124_p2));
    add_ln29_1_fu_537_p2 <= std_logic_vector(unsigned(trunc_ln13_2_fu_487_p4) + unsigned(p_read_4_reg_723_pp0_iter2_reg));
    add_ln29_fu_496_p2 <= std_logic_vector(unsigned(trunc_ln_fu_460_p4) + unsigned(p_read_5_reg_729_pp0_iter2_reg));
    agg_result_delta_kmin1_0_0_fu_592_p3 <= 
        ap_const_lv16_0 when (cmp_i_i_reg_809_pp0_iter2_reg(0) = '1') else 
        error_1_fu_578_p3;
    agg_result_delta_kmin1_1_0_fu_599_p3 <= 
        ap_const_lv16_0 when (cmp_i_i_reg_809_pp0_iter2_reg(0) = '1') else 
        error_3_fu_585_p3;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= zext_ln29_fu_533_p1;
    ap_return_1 <= zext_ln6_fu_574_p1;
    ap_return_2 <= agg_result_delta_kmin1_0_0_fu_592_p3;
    ap_return_3 <= agg_result_delta_kmin1_1_0_fu_599_p3;
    ap_return_4 <= weight_out_weight_change_reg_750_pp0_iter2_reg;
    ap_return_5 <= weight_out_weight_change_1_reg_772_pp0_iter2_reg;
    ap_return_6 <= weight_out_weight_change_2_reg_788_pp0_iter2_reg;
    ap_return_7 <= weight_out_weight_change_3_reg_804_pp0_iter2_reg;
    ap_return_8 <= add_ln29_fu_496_p2;
    ap_return_9 <= add_ln29_1_fu_537_p2;
    cmp_i_i_fu_348_p2 <= "1" when (training = ap_const_lv16_0) else "0";
    conv_i_i_1_fu_210_p0 <= p_read37;
        conv_i_i_1_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_i_i_1_fu_210_p0),32));

    conv_i_i_fu_144_p0 <= p_read36;
        conv_i_i_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_i_i_fu_144_p0),32));

    error_1_fu_578_p3 <= 
        weight_out_sum_delta_out_fu_469_p4 when (icmp_ln11_reg_815_pp0_iter2_reg(0) = '1') else 
        ap_const_lv16_0;
    error_3_fu_585_p3 <= 
        weight_out_sum_delta_out_1_fu_478_p4 when (icmp_ln11_1_reg_820_pp0_iter2_reg(0) = '1') else 
        ap_const_lv16_0;

    grp_fu_662_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_662_ce <= ap_const_logic_1;
        else 
            grp_fu_662_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_662_p1 <= ap_const_lv23_33(6 - 1 downto 0);
    grp_fu_662_p2 <= (p_read_5_reg_729_pp0_iter1_reg & ap_const_lv9_0);

    grp_fu_672_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_672_ce <= ap_const_logic_1;
        else 
            grp_fu_672_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_672_p1 <= sext_ln13_3_fu_233_p1(16 - 1 downto 0);
    grp_fu_672_p2 <= (tmp_reg_825 & ap_const_lv9_0);

    grp_fu_681_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_681_ce <= ap_const_logic_1;
        else 
            grp_fu_681_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_681_p0 <= sext_ln12_5_fu_261_p1(16 - 1 downto 0);
    grp_fu_681_p1 <= sext_ln12_6_fu_265_p1(16 - 1 downto 0);
    grp_fu_681_p2 <= (tmp_1_reg_830 & ap_const_lv9_0);

    grp_fu_690_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_690_ce <= ap_const_logic_1;
        else 
            grp_fu_690_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_690_p0 <= sext_ln12_7_fu_299_p1(16 - 1 downto 0);
    grp_fu_690_p1 <= sext_ln12_6_fu_265_p1(16 - 1 downto 0);
    grp_fu_690_p2 <= (tmp_2_reg_835 & ap_const_lv9_0);

    grp_fu_699_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_699_ce <= ap_const_logic_1;
        else 
            grp_fu_699_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_699_p0 <= sext_ln12_7_fu_299_p1(16 - 1 downto 0);
    grp_fu_699_p1 <= sext_ln13_3_fu_233_p1(16 - 1 downto 0);
    grp_fu_699_p2 <= (tmp_3_reg_799_pp0_iter1_reg & ap_const_lv9_0);

    grp_fu_708_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_708_ce <= ap_const_logic_1;
        else 
            grp_fu_708_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_708_p1 <= ap_const_lv23_33(6 - 1 downto 0);
    grp_fu_708_p2 <= (p_read_4_reg_723_pp0_iter1_reg & ap_const_lv9_0);
    icmp_ln11_1_fu_360_p0 <= p_read35;
    icmp_ln11_1_fu_360_p2 <= "1" when (signed(icmp_ln11_1_fu_360_p0) > signed(ap_const_lv16_0)) else "0";
    icmp_ln11_fu_354_p0 <= p_read34;
    icmp_ln11_fu_354_p2 <= "1" when (signed(icmp_ln11_fu_354_p0) > signed(ap_const_lv16_0)) else "0";
    icmp_ln12_1_fu_560_p2 <= "1" when (signed(omega_1_fu_542_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln12_fu_519_p2 <= "1" when (signed(omega_fu_501_p4) > signed(ap_const_lv16_0)) else "0";
    mul_ln12_1_fu_403_p0 <= sext_ln12_4_reg_760(16 - 1 downto 0);
    mul_ln12_1_fu_403_p1 <= sext_ln12_2_fu_369_p1(16 - 1 downto 0);
    mul_ln12_fu_372_p0 <= sext_ln12_1_fu_366_p1(16 - 1 downto 0);
    mul_ln12_fu_372_p1 <= sext_ln12_2_fu_369_p1(16 - 1 downto 0);
    mul_ln13_2_fu_269_p0 <= sext_ln12_5_fu_261_p1(16 - 1 downto 0);
    mul_ln13_fu_378_p0 <= sext_ln12_1_fu_366_p1(16 - 1 downto 0);
    mul_ln13_fu_378_p1 <= sext_ln13_2_reg_745(16 - 1 downto 0);
    mul_ln14_1_fu_124_p1 <= ap_const_lv34_3FFFFFFCD(7 - 1 downto 0);
    mul_ln14_2_fu_199_p0 <= sext_ln13_1_fu_195_p1(16 - 1 downto 0);
    mul_ln14_2_fu_199_p1 <= conv_i_i_fu_144_p1(16 - 1 downto 0);
    mul_ln14_3_fu_218_p0 <= conv_i_i_1_fu_210_p1(16 - 1 downto 0);
    mul_ln14_3_fu_218_p1 <= sext_ln13_fu_152_p1(16 - 1 downto 0);
    mul_ln14_4_fu_129_p1 <= ap_const_lv34_3FFFFFFCD(7 - 1 downto 0);
    mul_ln14_5_fu_134_p1 <= ap_const_lv34_3FFFFFFCD(7 - 1 downto 0);
    mul_ln14_6_fu_313_p0 <= conv_i_i_1_fu_210_p1(16 - 1 downto 0);
    mul_ln14_6_fu_313_p1 <= sext_ln13_1_fu_195_p1(16 - 1 downto 0);
    mul_ln14_7_fu_139_p1 <= ap_const_lv34_3FFFFFFCD(7 - 1 downto 0);
    mul_ln14_fu_160_p0 <= sext_ln13_fu_152_p1(16 - 1 downto 0);
    mul_ln14_fu_160_p1 <= conv_i_i_fu_144_p1(16 - 1 downto 0);
    omega_1_fu_542_p4 <= grp_fu_708_p3(24 downto 9);
    omega_fu_501_p4 <= grp_fu_662_p3(24 downto 9);
    output_2_fu_566_p3 <= 
        trunc_ln5_fu_551_p4 when (icmp_ln12_1_fu_560_p2(0) = '1') else 
        ap_const_lv15_0;
    output_3_fu_525_p3 <= 
        trunc_ln12_3_fu_510_p4 when (icmp_ln12_fu_519_p2(0) = '1') else 
        ap_const_lv15_0;
        sext_ln12_1_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read101_reg_735),25));

        sext_ln12_2_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_1_reg_718),25));

    sext_ln12_4_fu_229_p0 <= p_read29;
        sext_ln12_4_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln12_4_fu_229_p0),25));

    sext_ln12_5_fu_261_p0 <= p_read30;
        sext_ln12_5_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln12_5_fu_261_p0),25));

    sext_ln12_6_fu_265_p0 <= p_read37;
        sext_ln12_6_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln12_6_fu_265_p0),25));

    sext_ln12_7_fu_299_p0 <= p_read31;
        sext_ln12_7_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln12_7_fu_299_p0),25));

    sext_ln13_1_fu_195_p0 <= p_read35;
        sext_ln13_1_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln13_1_fu_195_p0),32));

    sext_ln13_2_fu_156_p0 <= p_read34;
        sext_ln13_2_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln13_2_fu_156_p0),25));

    sext_ln13_3_fu_233_p0 <= p_read35;
        sext_ln13_3_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln13_3_fu_233_p0),25));

    sext_ln13_fu_152_p0 <= p_read34;
        sext_ln13_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln13_fu_152_p0),32));

    shl_ln14_1_fu_237_p1 <= p_read29;
    shl_ln14_1_fu_237_p3 <= (shl_ln14_1_fu_237_p1 & ap_const_lv18_0);
    shl_ln14_2_fu_275_p1 <= p_read30;
    shl_ln14_2_fu_275_p3 <= (shl_ln14_2_fu_275_p1 & ap_const_lv18_0);
    shl_ln14_3_fu_324_p1 <= p_read31;
    shl_ln14_3_fu_324_p3 <= (shl_ln14_3_fu_324_p1 & ap_const_lv18_0);
    shl_ln_fu_171_p1 <= p_read10;
    shl_ln_fu_171_p3 <= (shl_ln_fu_171_p1 & ap_const_lv18_0);
    trunc_ln12_3_fu_510_p4 <= grp_fu_662_p3(23 downto 9);
    trunc_ln13_2_fu_487_p1 <= grp_fu_699_p3;
    trunc_ln13_2_fu_487_p4 <= trunc_ln13_2_fu_487_p1(24 downto 9);
    trunc_ln5_fu_551_p4 <= grp_fu_708_p3(23 downto 9);
    trunc_ln_fu_460_p1 <= grp_fu_672_p3;
    trunc_ln_fu_460_p4 <= trunc_ln_fu_460_p1(24 downto 9);
    weight_out_sum_delta_out_1_fu_478_p1 <= grp_fu_690_p3;
    weight_out_sum_delta_out_1_fu_478_p4 <= weight_out_sum_delta_out_1_fu_478_p1(24 downto 9);
    weight_out_sum_delta_out_fu_469_p1 <= grp_fu_681_p3;
    weight_out_sum_delta_out_fu_469_p4 <= weight_out_sum_delta_out_fu_469_p1(24 downto 9);
    zext_ln29_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_3_fu_525_p3),16));
    zext_ln6_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_2_fu_566_p3),16));
end behav;
