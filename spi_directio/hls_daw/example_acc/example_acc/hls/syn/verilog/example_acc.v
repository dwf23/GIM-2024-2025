// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="example_acc_example_acc,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sfvc784-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.181000,HLS_SYN_LAT=10,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=73,HLS_SYN_LUT=230,HLS_VERSION=2024_1}" *)

module example_acc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_out_ap_ack,
        w1,
        w2,
        data_out,
        data_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   data_out_ap_ack;
input  [31:0] w1;
input  [31:0] w2;
output  [31:0] data_out;
output   data_out_ap_vld;
output  [31:0] ap_return;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_block_state2_pp0_stage1_iter0;
wire    regslice_both_data_out_U_apdone_blk;
wire    ap_loop_exit_ready;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln14_reg_170;
reg    ap_condition_exit_pp0_iter0_stage1;
reg    ap_ready_int;
reg    data_out_blk_n;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
wire   [31:0] example_pkt_data_fu_100_p2;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln14_fu_113_p2;
wire   [31:0] example_pkt_data_1_fu_132_p2;
reg    ap_block_pp0_stage1_11001;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
reg   [31:0] w1_assign1_fu_48;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_w1_assign1_load;
reg   [31:0] w2_assign2_fu_52;
reg   [1:0] i3_fu_56;
wire   [1:0] i_fu_107_p2;
reg   [1:0] ap_sig_allocacmp_i3_load;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage1_01001;
reg    ap_condition_exit_pp0_iter1_stage0;
reg    ap_idle_pp0_0to0;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg   [31:0] data_out_int_regslice;
reg    data_out_ap_vld_int_regslice;
wire    data_out_ap_ack_int_regslice;
wire    regslice_both_data_out_U_vld_out;
reg    ap_condition_118;
reg    ap_condition_234;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 w1_assign1_fu_48 = 32'd0;
#0 w2_assign2_fu_52 = 32'd0;
#0 i3_fu_56 = 2'd0;
#0 ap_done_reg = 1'b0;
end

example_acc_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

example_acc_regslice_both #(
    .DataWidth( 32 ))
regslice_both_data_out_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data_out_int_regslice),
    .vld_in(data_out_ap_vld_int_regslice),
    .ack_in(data_out_ap_ack_int_regslice),
    .data_out(data_out),
    .vld_out(regslice_both_data_out_U_vld_out),
    .ack_out(data_out_ap_ack),
    .apdone_blk(regslice_both_data_out_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_condition_exit_pp0_iter1_stage0) & (ap_idle_pp0_0to0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_118)) begin
        i3_fu_56 <= i_fu_107_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_118)) begin
    w1_assign1_fu_48 <= example_pkt_data_fu_100_p2;
end
end

always @ (posedge ap_clk) begin
if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
    if ((1'b1 == ap_condition_234)) begin
        w2_assign2_fu_52 <= w2;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        w2_assign2_fu_52 <= example_pkt_data_1_fu_132_p2;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln14_reg_170 <= icmp_ln14_fu_113_p2;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_170 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_170 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i3_load = 2'd0;
    end else begin
        ap_sig_allocacmp_i3_load = i3_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_w1_assign1_load = w1;
    end else begin
        ap_sig_allocacmp_w1_assign1_load = w1_assign1_fu_48;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        data_out_ap_vld_int_regslice = 1'b1;
    end else begin
        data_out_ap_vld_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        data_out_blk_n = data_out_ap_ack_int_regslice;
    end else begin
        data_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            data_out_int_regslice = example_pkt_data_1_fu_132_p2;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            data_out_int_regslice = example_pkt_data_fu_100_p2;
        end else begin
            data_out_int_regslice = 'bx;
        end
    end else begin
        data_out_int_regslice = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((1'b1 == ap_condition_exit_pp0_iter1_stage0) & (ap_idle_pp0_0to0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) | ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_data_out_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((data_out_ap_ack_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter1))) | ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_data_out_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((data_out_ap_ack_int_regslice == 1'b0) | (1'b1 == ap_block_state1_pp0_stage0_iter0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((data_out_ap_ack_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter1))) | ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_data_out_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((data_out_ap_ack_int_regslice == 1'b0) | (1'b1 == ap_block_state1_pp0_stage0_iter0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_data_out_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_data_out_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((data_out_ap_ack_int_regslice == 1'b0) | (1'b1 == ap_block_state2_pp0_stage1_iter0))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_data_out_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((data_out_ap_ack_int_regslice == 1'b0) | (1'b1 == ap_block_state2_pp0_stage1_iter0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (data_out_ap_ack_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (data_out_ap_ack_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((regslice_both_data_out_U_apdone_blk == 1'b1) | (data_out_ap_ack_int_regslice == 1'b0));
end

always @ (*) begin
    ap_condition_118 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_234 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign ap_return = 32'd0;

assign data_out_ap_vld = regslice_both_data_out_U_vld_out;

assign example_pkt_data_1_fu_132_p2 = (w2_assign2_fu_52 + 32'd2);

assign example_pkt_data_fu_100_p2 = (ap_sig_allocacmp_w1_assign1_load + 32'd1);

assign i_fu_107_p2 = (ap_sig_allocacmp_i3_load + 2'd1);

assign icmp_ln14_fu_113_p2 = ((ap_sig_allocacmp_i3_load == 2'd3) ? 1'b1 : 1'b0);

endmodule //example_acc
