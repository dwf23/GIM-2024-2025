// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="example_acc_example_acc,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sfvc784-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.865500,HLS_SYN_LAT=42,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=167,HLS_SYN_LUT=318,HLS_VERSION=2024_2}" *)

module example_acc (
        ap_clk,
        ap_rst_n,
        alpha_transmit_line,
        alpha_transmit_line_ap_vld,
        alpha_transmit_line_ap_ack,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [0:0] alpha_transmit_line;
output   alpha_transmit_line_ap_vld;
input   alpha_transmit_line_ap_ack;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] w1;
wire   [15:0] w2;
reg   [15:0] w2_read_reg_80;
reg   [15:0] w1_read_reg_85;
wire    grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_ap_start;
wire    grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_ap_done;
wire    grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_ap_idle;
wire    grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_ap_ready;
wire   [31:0] grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_or_i3_i_i_out;
wire    grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_or_i3_i_i_out_ap_vld;
wire    grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_ap_start;
wire    grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_ap_done;
wire    grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_ap_idle;
wire    grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_ap_ready;
wire    grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_alpha_transmit_line_ap_ack;
wire   [0:0] grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_alpha_transmit_line;
wire    grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_alpha_transmit_line_ap_vld;
reg    grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [0:0] alpha_transmit_line_reg;
wire    ap_CS_fsm_state5;
wire    regslice_both_alpha_transmit_line_U_apdone_blk;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg   [0:0] alpha_transmit_line_int_regslice;
wire    alpha_transmit_line_ap_ack_int_regslice;
wire    regslice_both_alpha_transmit_line_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_ap_start_reg = 1'b0;
#0 grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_ap_start_reg = 1'b0;
end

example_acc_example_acc_Pipeline_VITIS_LOOP_11_1 grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_ap_start),
    .ap_done(grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_ap_done),
    .ap_idle(grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_ap_idle),
    .ap_ready(grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_ap_ready),
    .w2(w2_read_reg_80),
    .w1(w1_read_reg_85),
    .or_i3_i_i_out(grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_or_i3_i_i_out),
    .or_i3_i_i_out_ap_vld(grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_or_i3_i_i_out_ap_vld)
);

example_acc_example_acc_Pipeline_VITIS_LOOP_31_1 grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_ap_start),
    .ap_done(grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_ap_done),
    .ap_idle(grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_ap_idle),
    .ap_ready(grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_ap_ready),
    .alpha_transmit_line_ap_ack(grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_alpha_transmit_line_ap_ack),
    .or_i3_i_i_reload(grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_or_i3_i_i_out),
    .alpha_transmit_line(grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_alpha_transmit_line),
    .alpha_transmit_line_ap_vld(grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_alpha_transmit_line_ap_vld)
);

example_acc_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .w1(w1),
    .w2(w2),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

example_acc_regslice_both #(
    .DataWidth( 1 ))
regslice_both_alpha_transmit_line_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(alpha_transmit_line_int_regslice),
    .vld_in(grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_alpha_transmit_line_ap_vld),
    .ack_in(alpha_transmit_line_ap_ack_int_regslice),
    .data_out(alpha_transmit_line),
    .vld_out(regslice_both_alpha_transmit_line_U_vld_out),
    .ack_out(alpha_transmit_line_ap_ack),
    .apdone_blk(regslice_both_alpha_transmit_line_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_ap_start_reg <= 1'b1;
        end else if ((grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_ap_ready == 1'b1)) begin
            grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_ap_start_reg <= 1'b1;
        end else if ((grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_ap_ready == 1'b1)) begin
            grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_alpha_transmit_line_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        alpha_transmit_line_reg <= grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_alpha_transmit_line;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        w1_read_reg_85 <= w1;
        w2_read_reg_80 <= w2;
    end
end

always @ (*) begin
    if (((grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_alpha_transmit_line_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        alpha_transmit_line_int_regslice = grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_alpha_transmit_line;
    end else begin
        alpha_transmit_line_int_regslice = alpha_transmit_line_reg;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_alpha_transmit_line_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (regslice_both_alpha_transmit_line_U_apdone_blk == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (regslice_both_alpha_transmit_line_U_apdone_blk == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (regslice_both_alpha_transmit_line_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign alpha_transmit_line_ap_vld = regslice_both_alpha_transmit_line_U_vld_out;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_ap_start = grp_example_acc_Pipeline_VITIS_LOOP_11_1_fu_60_ap_start_reg;

assign grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_alpha_transmit_line_ap_ack = (ap_CS_fsm_state4 & alpha_transmit_line_ap_ack_int_regslice);

assign grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_ap_start = grp_example_acc_Pipeline_VITIS_LOOP_31_1_fu_69_ap_start_reg;

endmodule //example_acc
