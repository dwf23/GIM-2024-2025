-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity example_acc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_out_ap_ack : IN STD_LOGIC;
    w1 : IN STD_LOGIC_VECTOR (31 downto 0);
    w2 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of example_acc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "example_acc_example_acc,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sfvc784-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.181000,HLS_SYN_LAT=13,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=70,HLS_SYN_LUT=190,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal regslice_both_data_out_U_apdone_blk : STD_LOGIC;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal icmp_ln14_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal data_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal example_pkt_data_fu_99_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal example_pkt_data_1_fu_114_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal w1_assign1_fu_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_w1_assign1_load : STD_LOGIC_VECTOR (31 downto 0);
    signal w2_assign2_fu_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal i3_fu_58 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal i_fu_129_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal data_out_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_ap_vld_int_regslice : STD_LOGIC;
    signal data_out_ap_ack_int_regslice : STD_LOGIC;
    signal regslice_both_data_out_U_vld_out : STD_LOGIC;
    signal ap_condition_158 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component example_acc_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component example_acc_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component example_acc_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);

    regslice_both_data_out_U : component example_acc_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => data_out_int_regslice,
        vld_in => data_out_ap_vld_int_regslice,
        ack_in => data_out_ap_ack_int_regslice,
        data_out => data_out,
        vld_out => regslice_both_data_out_U_vld_out,
        ack_out => data_out_ap_ack,
        apdone_blk => regslice_both_data_out_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0) or (data_out_ap_ack_int_regslice = ap_const_logic_0))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i3_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0) or (data_out_ap_ack_int_regslice = ap_const_logic_0))) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i3_fu_58 <= ap_const_lv2_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0) or (data_out_ap_ack_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i3_fu_58 <= i_fu_129_p2;
            end if; 
        end if;
    end process;

    w1_assign1_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_158)) then
                w1_assign1_fu_50 <= example_pkt_data_fu_99_p2;
            end if;
        end if;
    end process;

    w2_assign2_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0) or (data_out_ap_ack_int_regslice = ap_const_logic_0))) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w2_assign2_fu_54 <= w2;
            elsif ((not(((ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0) or (data_out_ap_ack_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w2_assign2_fu_54 <= example_pkt_data_1_fu_114_p2;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_block_state3_pp0_stage2_iter0, ap_CS_fsm_state2, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage1_iter0, data_out_ap_ack_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0) or (data_out_ap_ack_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0) or (data_out_ap_ack_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0) or (data_out_ap_ack_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0, data_out_ap_ack_int_regslice)
    begin
        if (((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0) or (data_out_ap_ack_int_regslice = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_pp0_stage1_iter0, data_out_ap_ack_int_regslice)
    begin
        if (((ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0) or (data_out_ap_ack_int_regslice = ap_const_logic_0))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_pp0_stage2_iter0, data_out_ap_ack_int_regslice)
    begin
        if (((ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0) or (data_out_ap_ack_int_regslice = ap_const_logic_0))) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int, data_out_ap_ack_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((data_out_ap_ack_int_regslice = ap_const_logic_0) or (ap_start_int = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(data_out_ap_ack_int_regslice)
    begin
                ap_block_state2_pp0_stage1_iter0 <= (data_out_ap_ack_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage2_iter0_assign_proc : process(regslice_both_data_out_U_apdone_blk, data_out_ap_ack_int_regslice)
    begin
                ap_block_state3_pp0_stage2_iter0 <= ((regslice_both_data_out_U_apdone_blk = ap_const_logic_1) or (data_out_ap_ack_int_regslice = ap_const_logic_0));
    end process;


    ap_condition_158_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, data_out_ap_ack_int_regslice)
    begin
                ap_condition_158 <= (not(((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0) or (data_out_ap_ack_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1));
    end process;


    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_pp0_stage2_iter0, icmp_ln14_fu_135_p2, data_out_ap_ack_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0) or (data_out_ap_ack_int_regslice = ap_const_logic_0))) and (icmp_ln14_fu_135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_pp0_stage2_iter0, ap_loop_exit_ready, ap_done_reg, data_out_ap_ack_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0) or (data_out_ap_ack_int_regslice = ap_const_logic_0))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_pp0_stage2_iter0, data_out_ap_ack_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0) or (data_out_ap_ack_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    ap_sig_allocacmp_w1_assign1_load_assign_proc : process(ap_CS_fsm_state1, w1, w1_assign1_fu_50, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_w1_assign1_load <= w1;
        else 
            ap_sig_allocacmp_w1_assign1_load <= w1_assign1_fu_50;
        end if; 
    end process;

    data_out_ap_vld <= regslice_both_data_out_U_vld_out;

    data_out_ap_vld_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage1_iter0, data_out_ap_ack_int_regslice)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0) or (data_out_ap_ack_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0) or (data_out_ap_ack_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            data_out_ap_vld_int_regslice <= ap_const_logic_1;
        else 
            data_out_ap_vld_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    data_out_blk_n_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state2, ap_start_int, data_out_ap_ack_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            data_out_blk_n <= data_out_ap_ack_int_regslice;
        else 
            data_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_out_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, example_pkt_data_fu_99_p2, ap_block_state1_pp0_stage0_iter0, example_pkt_data_1_fu_114_p2, ap_block_state2_pp0_stage1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_pp0_stage1_iter0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_out_int_regslice <= example_pkt_data_1_fu_114_p2;
        elsif (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_out_int_regslice <= example_pkt_data_fu_99_p2;
        else 
            data_out_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    example_pkt_data_1_fu_114_p2 <= std_logic_vector(unsigned(w2_assign2_fu_54) + unsigned(ap_const_lv32_2));
    example_pkt_data_fu_99_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_w1_assign1_load) + unsigned(ap_const_lv32_1));
    i_fu_129_p2 <= std_logic_vector(unsigned(i3_fu_58) + unsigned(ap_const_lv2_1));
    icmp_ln14_fu_135_p2 <= "1" when (i3_fu_58 = ap_const_lv2_3) else "0";
end behav;
