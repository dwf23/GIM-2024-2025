-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity spi_master_spi_master_Pipeline_VITIS_LOOP_30_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sclk_ap_ack : IN STD_LOGIC;
    mosi_ap_ack : IN STD_LOGIC;
    miso_ap_vld : IN STD_LOGIC;
    received_data : IN STD_LOGIC_VECTOR (31 downto 0);
    sclk : OUT STD_LOGIC_VECTOR (0 downto 0);
    sclk_ap_vld : OUT STD_LOGIC;
    send_data : IN STD_LOGIC_VECTOR (31 downto 0);
    mosi : OUT STD_LOGIC_VECTOR (0 downto 0);
    mosi_ap_vld : OUT STD_LOGIC;
    miso : IN STD_LOGIC_VECTOR (0 downto 0);
    miso_ap_ack : OUT STD_LOGIC;
    received_data_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    received_data_3_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of spi_master_spi_master_Pipeline_VITIS_LOOP_30_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln30_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal icmp_ln30_reg_212 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage1_iter0_grp1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone_grp1_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage1_subdone_grp1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0_grp2 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone_grp2_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage1_subdone_grp2 : BOOLEAN;
    signal tmp_2_reg_221 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op31_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0_grp3 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone_grp3_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage1_subdone_grp3 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal sclk_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_grp4 : BOOLEAN;
    signal mosi_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1_grp2 : BOOLEAN;
    signal miso_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1_grp3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tobool_fu_160_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tobool_reg_216 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_nbreadreq_fu_84_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_64 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal i_2_fu_140_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal received_data_1_fu_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal received_data_2_fu_180_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001_grp3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_grp0 : BOOLEAN;
    signal ap_block_pp0_stage1_01001_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_01001_grp4 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp4 : BOOLEAN;
    signal ap_block_pp0_stage1_01001_grp2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_grp2 : BOOLEAN;
    signal ap_block_pp0_stage0_01001_grp0 : BOOLEAN;
    signal trunc_ln30_fu_146_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln36_fu_150_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tobool_fu_160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln44_fu_176_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tobool_fu_160_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component spi_master_bitselect_1ns_32ns_32ns_1_1_1 IS
    generic (
        DATAWIDTH : INTEGER;
        ADDRWIDTH : INTEGER );
    port (
        din : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component spi_master_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    bitselect_1ns_32ns_32ns_1_1_1_U1 : component spi_master_bitselect_1ns_32ns_32ns_1_1_1
    generic map (
        DATAWIDTH => 32,
        ADDRWIDTH => 32)
    port map (
        din => send_data,
        sel => tobool_fu_160_p2,
        dout => tobool_fu_160_p3);

    flow_control_loop_pipe_sequential_init_U : component spi_master_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                        ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0)) then 
                        ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage1_subdone_grp1_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage1_subdone_grp1_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then 
                        ap_block_pp0_stage1_subdone_grp1_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1)) then 
                        ap_block_pp0_stage1_subdone_grp1_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage1_subdone_grp2_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage1_subdone_grp2_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then 
                        ap_block_pp0_stage1_subdone_grp2_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2)) then 
                        ap_block_pp0_stage1_subdone_grp2_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage1_subdone_grp3_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage1_subdone_grp3_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then 
                        ap_block_pp0_stage1_subdone_grp3_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3)) then 
                        ap_block_pp0_stage1_subdone_grp3_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln30_fu_134_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_64 <= i_2_fu_140_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_64 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    received_data_1_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                received_data_1_fu_68 <= received_data;
            elsif (((tmp_2_reg_221 = ap_const_lv1_1) and (icmp_ln30_reg_212 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
                received_data_1_fu_68 <= received_data_2_fu_180_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln30_reg_212 <= icmp_ln30_fu_134_p2;
                tmp_2_reg_221 <= tmp_2_nbreadreq_fu_84_p3;
                tobool_reg_216 <= tobool_fu_160_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0, ap_block_pp0_stage1_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_grp4_assign_proc : process(ap_enable_reg_pp0_iter1, sclk_ap_ack)
    begin
                ap_block_pp0_stage0_01001_grp4 <= ((sclk_ap_ack = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, sclk_ap_ack)
    begin
                ap_block_pp0_stage0_11001 <= ((sclk_ap_ack = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_grp4_assign_proc : process(ap_enable_reg_pp0_iter1, sclk_ap_ack)
    begin
                ap_block_pp0_stage0_11001_grp4 <= ((sclk_ap_ack = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_grp4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, sclk_ap_ack)
    begin
                ap_block_pp0_stage0_subdone <= ((sclk_ap_ack = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_grp1_assign_proc : process(ap_block_state2_pp0_stage1_iter0_grp1, ap_block_pp0_stage1_subdone_grp1_done_reg, ap_enable_reg_pp0_iter0_reg)
    begin
                ap_block_pp0_stage1_01001_grp1 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1_done_reg) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0_grp1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_01001_grp2_assign_proc : process(ap_block_state2_pp0_stage1_iter0_grp2, ap_block_pp0_stage1_subdone_grp2_done_reg, ap_enable_reg_pp0_iter0_reg)
    begin
                ap_block_pp0_stage1_01001_grp2 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2_done_reg) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0_grp2) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_grp1_assign_proc : process(ap_block_state2_pp0_stage1_iter0_grp1, ap_block_pp0_stage1_subdone_grp1_done_reg, ap_enable_reg_pp0_iter0_reg)
    begin
                ap_block_pp0_stage1_11001_grp1 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1_done_reg) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0_grp1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_grp2_assign_proc : process(ap_block_state2_pp0_stage1_iter0_grp2, ap_block_pp0_stage1_subdone_grp2_done_reg, ap_enable_reg_pp0_iter0_reg)
    begin
                ap_block_pp0_stage1_11001_grp2 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2_done_reg) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0_grp2) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_grp3_assign_proc : process(ap_block_state2_pp0_stage1_iter0_grp3, ap_block_pp0_stage1_subdone_grp3_done_reg, ap_enable_reg_pp0_iter0_reg)
    begin
                ap_block_pp0_stage1_11001_grp3 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0_grp3) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_grp2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_grp3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_block_state2_pp0_stage1_iter0_grp1, ap_block_pp0_stage1_subdone_grp1_done_reg, ap_block_state2_pp0_stage1_iter0_grp2, ap_block_pp0_stage1_subdone_grp2_done_reg, ap_block_state2_pp0_stage1_iter0_grp3, ap_block_pp0_stage1_subdone_grp3_done_reg, ap_enable_reg_pp0_iter0_reg)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0_grp3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2_done_reg) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0_grp2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1_done_reg) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0_grp1))));
    end process;


    ap_block_pp0_stage1_subdone_grp1_assign_proc : process(ap_block_state2_pp0_stage1_iter0_grp1, ap_block_pp0_stage1_subdone_grp1_done_reg, ap_enable_reg_pp0_iter0_reg)
    begin
                ap_block_pp0_stage1_subdone_grp1 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1_done_reg) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0_grp1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_grp2_assign_proc : process(ap_block_state2_pp0_stage1_iter0_grp2, ap_block_pp0_stage1_subdone_grp2_done_reg, ap_enable_reg_pp0_iter0_reg)
    begin
                ap_block_pp0_stage1_subdone_grp2 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2_done_reg) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0_grp2) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_grp3_assign_proc : process(ap_block_state2_pp0_stage1_iter0_grp3, ap_block_pp0_stage1_subdone_grp3_done_reg, ap_enable_reg_pp0_iter0_reg)
    begin
                ap_block_pp0_stage1_subdone_grp3 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0_grp3) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage1_iter0_grp1_assign_proc : process(sclk_ap_ack, icmp_ln30_reg_212)
    begin
                ap_block_state2_pp0_stage1_iter0_grp1 <= ((icmp_ln30_reg_212 = ap_const_lv1_0) and (sclk_ap_ack = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage1_iter0_grp2_assign_proc : process(mosi_ap_ack, icmp_ln30_reg_212)
    begin
                ap_block_state2_pp0_stage1_iter0_grp2 <= ((icmp_ln30_reg_212 = ap_const_lv1_0) and (mosi_ap_ack = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage1_iter0_grp3_assign_proc : process(miso_ap_vld, ap_predicate_op31_read_state2)
    begin
                ap_block_state2_pp0_stage1_iter0_grp3 <= ((ap_predicate_op31_read_state2 = ap_const_boolean_1) and (miso_ap_vld = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln30_fu_134_p2)
    begin
        if (((icmp_ln30_fu_134_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op31_read_state2_assign_proc : process(icmp_ln30_reg_212, tmp_2_reg_221)
    begin
                ap_predicate_op31_read_state2 <= ((tmp_2_reg_221 = ap_const_lv1_1) and (icmp_ln30_reg_212 = ap_const_lv1_0));
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, i_fu_64, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_64;
        end if; 
    end process;

    i_2_fu_140_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv7_1));
    icmp_ln30_fu_134_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv7_40) else "0";

    miso_ap_ack_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_predicate_op31_read_state2, ap_block_pp0_stage1_subdone_grp3_done_reg, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001_grp3)
    begin
        if (((ap_predicate_op31_read_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
            miso_ap_ack <= ap_const_logic_1;
        else 
            miso_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    miso_blk_n_assign_proc : process(miso_ap_vld, ap_CS_fsm_pp0_stage1, ap_predicate_op31_read_state2, ap_block_pp0_stage1_subdone_grp3_done_reg, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_grp3)
    begin
        if (((ap_predicate_op31_read_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_grp3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
            miso_blk_n <= miso_ap_vld;
        else 
            miso_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mosi <= tobool_reg_216;

    mosi_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln30_reg_212, ap_block_pp0_stage1_subdone_grp2_done_reg, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001_grp2)
    begin
        if (((icmp_ln30_reg_212 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
            mosi_ap_vld <= ap_const_logic_1;
        else 
            mosi_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    mosi_blk_n_assign_proc : process(mosi_ap_ack, ap_CS_fsm_pp0_stage1, icmp_ln30_reg_212, ap_block_pp0_stage1_subdone_grp2_done_reg, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_grp2)
    begin
        if (((icmp_ln30_reg_212 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_grp2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
            mosi_blk_n <= mosi_ap_ack;
        else 
            mosi_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    received_data_2_fu_180_p3 <= (trunc_ln44_fu_176_p1 & miso);
    received_data_3_out <= received_data_1_fu_68;

    received_data_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln30_fu_134_p2, ap_loop_exit_ready, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln30_fu_134_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            received_data_3_out_ap_vld <= ap_const_logic_1;
        else 
            received_data_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sclk_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln30_reg_212, ap_block_pp0_stage1_subdone_grp1_done_reg, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_01001_grp1, ap_block_pp0_stage0_01001_grp4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001_grp4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sclk <= ap_const_lv1_1;
        elsif (((icmp_ln30_reg_212 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
            sclk <= ap_const_lv1_0;
        else 
            sclk <= "X";
        end if; 
    end process;


    sclk_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln30_reg_212, ap_block_pp0_stage1_subdone_grp1_done_reg, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001_grp1, ap_block_pp0_stage0_11001_grp4)
    begin
        if ((((icmp_ln30_reg_212 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sclk_ap_vld <= ap_const_logic_1;
        else 
            sclk_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sclk_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, sclk_ap_ack, ap_CS_fsm_pp0_stage1, icmp_ln30_reg_212, ap_block_pp0_stage1_subdone_grp1_done_reg, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_grp1, ap_block_pp0_stage0_grp4)
    begin
        if ((((icmp_ln30_reg_212 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_grp4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sclk_blk_n <= sclk_ap_ack;
        else 
            sclk_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tmp_2_nbreadreq_fu_84_p3 <= (0=>(miso_ap_vld), others=>'-');
    tobool_fu_160_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln36_fu_150_p2),32));
    trunc_ln30_fu_146_p1 <= ap_sig_allocacmp_i_1(6 - 1 downto 0);
    trunc_ln44_fu_176_p1 <= received_data_1_fu_68(31 - 1 downto 0);
    xor_ln36_fu_150_p2 <= (trunc_ln30_fu_146_p1 xor ap_const_lv6_3F);
end behav;
