// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module accelerator_accelerator_Pipeline_VITIS_LOOP_160_9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bias_1_local_1_5,
        bias_1_local_0_5,
        bias_2_local_1_5,
        bias_2_local_0_5,
        w1_local_0_1_5,
        w1_local_0_0_5,
        w2_local_0_1_5,
        w2_local_0_0_5,
        w1_local_1_1_5,
        w1_local_1_0_5,
        w2_local_1_1_5,
        w2_local_1_0_5,
        output_array_new_b2_1_0459_out,
        output_array_new_b2_1_0459_out_ap_vld,
        output_array_new_b2_0_0458_out,
        output_array_new_b2_0_0458_out_ap_vld,
        output_array_new_b1_1_0457_out,
        output_array_new_b1_1_0457_out_ap_vld,
        output_array_new_b1_0_0456_out,
        output_array_new_b1_0_0456_out_ap_vld,
        output_array_new_w2_1_1_0455_out,
        output_array_new_w2_1_1_0455_out_ap_vld,
        output_array_new_w2_1_0_0454_out,
        output_array_new_w2_1_0_0454_out_ap_vld,
        output_array_new_w2_0_1_0453_out,
        output_array_new_w2_0_1_0453_out_ap_vld,
        output_array_new_w2_0_0_0452_out,
        output_array_new_w2_0_0_0452_out_ap_vld,
        output_array_new_w1_1_1_0451_out,
        output_array_new_w1_1_1_0451_out_ap_vld,
        output_array_new_w1_1_0_0450_out,
        output_array_new_w1_1_0_0450_out_ap_vld,
        output_array_new_w1_0_1_0449_out,
        output_array_new_w1_0_1_0449_out_ap_vld,
        output_array_new_w1_0_0_0448_out,
        output_array_new_w1_0_0_0448_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] bias_1_local_1_5;
input  [15:0] bias_1_local_0_5;
input  [15:0] bias_2_local_1_5;
input  [15:0] bias_2_local_0_5;
input  [15:0] w1_local_0_1_5;
input  [15:0] w1_local_0_0_5;
input  [15:0] w2_local_0_1_5;
input  [15:0] w2_local_0_0_5;
input  [15:0] w1_local_1_1_5;
input  [15:0] w1_local_1_0_5;
input  [15:0] w2_local_1_1_5;
input  [15:0] w2_local_1_0_5;
output  [15:0] output_array_new_b2_1_0459_out;
output   output_array_new_b2_1_0459_out_ap_vld;
output  [15:0] output_array_new_b2_0_0458_out;
output   output_array_new_b2_0_0458_out_ap_vld;
output  [15:0] output_array_new_b1_1_0457_out;
output   output_array_new_b1_1_0457_out_ap_vld;
output  [15:0] output_array_new_b1_0_0456_out;
output   output_array_new_b1_0_0456_out_ap_vld;
output  [15:0] output_array_new_w2_1_1_0455_out;
output   output_array_new_w2_1_1_0455_out_ap_vld;
output  [15:0] output_array_new_w2_1_0_0454_out;
output   output_array_new_w2_1_0_0454_out_ap_vld;
output  [15:0] output_array_new_w2_0_1_0453_out;
output   output_array_new_w2_0_1_0453_out_ap_vld;
output  [15:0] output_array_new_w2_0_0_0452_out;
output   output_array_new_w2_0_0_0452_out_ap_vld;
output  [15:0] output_array_new_w1_1_1_0451_out;
output   output_array_new_w1_1_1_0451_out_ap_vld;
output  [15:0] output_array_new_w1_1_0_0450_out;
output   output_array_new_w1_1_0_0450_out_ap_vld;
output  [15:0] output_array_new_w1_0_1_0449_out;
output   output_array_new_w1_0_1_0449_out_ap_vld;
output  [15:0] output_array_new_w1_0_0_0448_out;
output   output_array_new_w1_0_0_0448_out_ap_vld;

reg ap_idle;
reg output_array_new_b2_1_0459_out_ap_vld;
reg output_array_new_b2_0_0458_out_ap_vld;
reg output_array_new_b1_1_0457_out_ap_vld;
reg output_array_new_b1_0_0456_out_ap_vld;
reg output_array_new_w2_1_1_0455_out_ap_vld;
reg output_array_new_w2_1_0_0454_out_ap_vld;
reg output_array_new_w2_0_1_0453_out_ap_vld;
reg output_array_new_w2_0_0_0452_out_ap_vld;
reg output_array_new_w1_1_1_0451_out_ap_vld;
reg output_array_new_w1_1_0_0450_out_ap_vld;
reg output_array_new_w1_0_1_0449_out_ap_vld;
reg output_array_new_w1_0_0_0448_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln160_fu_292_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [1:0] n_1_fu_76;
wire   [1:0] add_ln160_fu_298_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_n;
reg   [15:0] output_array_new_w1_0_1_2_fu_80;
wire   [15:0] output_array_new_w1_0_1_4_fu_384_p3;
reg   [15:0] output_array_new_w1_0_1_3_fu_84;
wire   [15:0] output_array_new_w1_0_1_fu_376_p3;
reg   [15:0] output_array_new_w1_1_1_2_fu_88;
wire   [15:0] output_array_new_w1_1_1_4_fu_416_p3;
reg   [15:0] output_array_new_w1_1_1_3_fu_92;
wire   [15:0] output_array_new_w1_1_1_fu_408_p3;
reg   [15:0] output_array_new_w2_0_1_2_fu_96;
wire   [15:0] output_array_new_w2_0_1_4_fu_400_p3;
reg   [15:0] output_array_new_w2_0_1_3_fu_100;
wire   [15:0] output_array_new_w2_0_1_fu_392_p3;
reg   [15:0] output_array_new_w2_1_1_2_fu_104;
wire   [15:0] output_array_new_w2_1_1_4_fu_432_p3;
reg   [15:0] output_array_new_w2_1_1_3_fu_108;
wire   [15:0] output_array_new_w2_1_1_fu_424_p3;
reg   [15:0] output_array_new_b1_1_2_fu_112;
wire   [15:0] output_array_new_b1_1_4_fu_352_p3;
reg   [15:0] output_array_new_b1_1_3_fu_116;
wire   [15:0] output_array_new_b1_1_fu_344_p3;
reg   [15:0] output_array_new_b2_1_2_fu_120;
wire   [15:0] output_array_new_b2_1_4_fu_368_p3;
reg   [15:0] output_array_new_b2_1_3_fu_124;
wire   [15:0] output_array_new_b2_1_fu_360_p3;
wire   [0:0] trunc_ln161_fu_340_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

accelerator_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln160_fu_292_p2 == 1'd0)) begin
            n_1_fu_76 <= add_ln160_fu_298_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n_1_fu_76 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        output_array_new_b1_1_2_fu_112 <= output_array_new_b1_1_4_fu_352_p3;
        output_array_new_b1_1_3_fu_116 <= output_array_new_b1_1_fu_344_p3;
        output_array_new_b2_1_2_fu_120 <= output_array_new_b2_1_4_fu_368_p3;
        output_array_new_b2_1_3_fu_124 <= output_array_new_b2_1_fu_360_p3;
        output_array_new_w1_0_1_2_fu_80 <= output_array_new_w1_0_1_4_fu_384_p3;
        output_array_new_w1_0_1_3_fu_84 <= output_array_new_w1_0_1_fu_376_p3;
        output_array_new_w1_1_1_2_fu_88 <= output_array_new_w1_1_1_4_fu_416_p3;
        output_array_new_w1_1_1_3_fu_92 <= output_array_new_w1_1_1_fu_408_p3;
        output_array_new_w2_0_1_2_fu_96 <= output_array_new_w2_0_1_4_fu_400_p3;
        output_array_new_w2_0_1_3_fu_100 <= output_array_new_w2_0_1_fu_392_p3;
        output_array_new_w2_1_1_2_fu_104 <= output_array_new_w2_1_1_4_fu_432_p3;
        output_array_new_w2_1_1_3_fu_108 <= output_array_new_w2_1_1_fu_424_p3;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_n = 2'd0;
    end else begin
        ap_sig_allocacmp_n = n_1_fu_76;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        output_array_new_b1_0_0456_out_ap_vld = 1'b1;
    end else begin
        output_array_new_b1_0_0456_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        output_array_new_b1_1_0457_out_ap_vld = 1'b1;
    end else begin
        output_array_new_b1_1_0457_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        output_array_new_b2_0_0458_out_ap_vld = 1'b1;
    end else begin
        output_array_new_b2_0_0458_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        output_array_new_b2_1_0459_out_ap_vld = 1'b1;
    end else begin
        output_array_new_b2_1_0459_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        output_array_new_w1_0_0_0448_out_ap_vld = 1'b1;
    end else begin
        output_array_new_w1_0_0_0448_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        output_array_new_w1_0_1_0449_out_ap_vld = 1'b1;
    end else begin
        output_array_new_w1_0_1_0449_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        output_array_new_w1_1_0_0450_out_ap_vld = 1'b1;
    end else begin
        output_array_new_w1_1_0_0450_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        output_array_new_w1_1_1_0451_out_ap_vld = 1'b1;
    end else begin
        output_array_new_w1_1_1_0451_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        output_array_new_w2_0_0_0452_out_ap_vld = 1'b1;
    end else begin
        output_array_new_w2_0_0_0452_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        output_array_new_w2_0_1_0453_out_ap_vld = 1'b1;
    end else begin
        output_array_new_w2_0_1_0453_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        output_array_new_w2_1_0_0454_out_ap_vld = 1'b1;
    end else begin
        output_array_new_w2_1_0_0454_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        output_array_new_w2_1_1_0455_out_ap_vld = 1'b1;
    end else begin
        output_array_new_w2_1_1_0455_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln160_fu_298_p2 = (ap_sig_allocacmp_n + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln160_fu_292_p2 = ((ap_sig_allocacmp_n == 2'd2) ? 1'b1 : 1'b0);

assign output_array_new_b1_0_0456_out = output_array_new_b1_1_2_fu_112;

assign output_array_new_b1_1_0457_out = output_array_new_b1_1_3_fu_116;

assign output_array_new_b1_1_4_fu_352_p3 = ((trunc_ln161_fu_340_p1[0:0] == 1'b1) ? output_array_new_b1_1_2_fu_112 : bias_1_local_0_5);

assign output_array_new_b1_1_fu_344_p3 = ((trunc_ln161_fu_340_p1[0:0] == 1'b1) ? bias_1_local_1_5 : output_array_new_b1_1_3_fu_116);

assign output_array_new_b2_0_0458_out = output_array_new_b2_1_2_fu_120;

assign output_array_new_b2_1_0459_out = output_array_new_b2_1_3_fu_124;

assign output_array_new_b2_1_4_fu_368_p3 = ((trunc_ln161_fu_340_p1[0:0] == 1'b1) ? output_array_new_b2_1_2_fu_120 : bias_2_local_0_5);

assign output_array_new_b2_1_fu_360_p3 = ((trunc_ln161_fu_340_p1[0:0] == 1'b1) ? bias_2_local_1_5 : output_array_new_b2_1_3_fu_124);

assign output_array_new_w1_0_0_0448_out = output_array_new_w1_0_1_2_fu_80;

assign output_array_new_w1_0_1_0449_out = output_array_new_w1_0_1_3_fu_84;

assign output_array_new_w1_0_1_4_fu_384_p3 = ((trunc_ln161_fu_340_p1[0:0] == 1'b1) ? output_array_new_w1_0_1_2_fu_80 : w1_local_0_0_5);

assign output_array_new_w1_0_1_fu_376_p3 = ((trunc_ln161_fu_340_p1[0:0] == 1'b1) ? w1_local_0_1_5 : output_array_new_w1_0_1_3_fu_84);

assign output_array_new_w1_1_0_0450_out = output_array_new_w1_1_1_2_fu_88;

assign output_array_new_w1_1_1_0451_out = output_array_new_w1_1_1_3_fu_92;

assign output_array_new_w1_1_1_4_fu_416_p3 = ((trunc_ln161_fu_340_p1[0:0] == 1'b1) ? output_array_new_w1_1_1_2_fu_88 : w1_local_1_0_5);

assign output_array_new_w1_1_1_fu_408_p3 = ((trunc_ln161_fu_340_p1[0:0] == 1'b1) ? w1_local_1_1_5 : output_array_new_w1_1_1_3_fu_92);

assign output_array_new_w2_0_0_0452_out = output_array_new_w2_0_1_2_fu_96;

assign output_array_new_w2_0_1_0453_out = output_array_new_w2_0_1_3_fu_100;

assign output_array_new_w2_0_1_4_fu_400_p3 = ((trunc_ln161_fu_340_p1[0:0] == 1'b1) ? output_array_new_w2_0_1_2_fu_96 : w2_local_0_0_5);

assign output_array_new_w2_0_1_fu_392_p3 = ((trunc_ln161_fu_340_p1[0:0] == 1'b1) ? w2_local_0_1_5 : output_array_new_w2_0_1_3_fu_100);

assign output_array_new_w2_1_0_0454_out = output_array_new_w2_1_1_2_fu_104;

assign output_array_new_w2_1_1_0455_out = output_array_new_w2_1_1_3_fu_108;

assign output_array_new_w2_1_1_4_fu_432_p3 = ((trunc_ln161_fu_340_p1[0:0] == 1'b1) ? output_array_new_w2_1_1_2_fu_104 : w2_local_1_0_5);

assign output_array_new_w2_1_1_fu_424_p3 = ((trunc_ln161_fu_340_p1[0:0] == 1'b1) ? w2_local_1_1_5 : output_array_new_w2_1_1_3_fu_108);

assign trunc_ln161_fu_340_p1 = ap_sig_allocacmp_n[0:0];

endmodule //accelerator_accelerator_Pipeline_VITIS_LOOP_160_9
