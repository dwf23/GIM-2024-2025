-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accelerator_model_array is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read10 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (15 downto 0);
    biases_0_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    biases_0_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    output_kmin1_0_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    output_kmin1_0_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    delta_k_0_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    delta_k_0_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    training_val : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of accelerator_model_array is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv40_FFFFFFFE67 : STD_LOGIC_VECTOR (39 downto 0) := "1111111111111111111111111111111001100111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv26_199 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000110011001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";

attribute shreg_extract : string;
    signal delta_k_0_1_val_read_reg_768 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal delta_k_0_0_val_read_reg_774 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_kmin1_0_0_val_read_reg_780 : STD_LOGIC_VECTOR (15 downto 0);
    signal biases_0_1_val_read_reg_786 : STD_LOGIC_VECTOR (15 downto 0);
    signal biases_0_1_val_read_reg_786_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal biases_0_1_val_read_reg_786_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal biases_0_0_val_read_reg_792 : STD_LOGIC_VECTOR (15 downto 0);
    signal biases_0_0_val_read_reg_792_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal biases_0_0_val_read_reg_792_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_reg_798 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_reg_798_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_1_reg_803 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_1_reg_803_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_2_reg_808 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_2_reg_808_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read101_reg_814 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read101_reg_814_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_fu_154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_reg_820 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln12_5_fu_160_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln12_5_reg_825 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln13_3_fu_168_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln14_2_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_2_reg_837 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_4_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_4_reg_842 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln12_9_fu_188_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln12_9_reg_847 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln14_6_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_6_reg_853 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp_i_i_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i_reg_858 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i_reg_858_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i_reg_858_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i_reg_858_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_reg_864 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_reg_864_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_reg_864_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_reg_864_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln14_1_fu_126_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln14_1_reg_874 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_reg_879 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_3_fu_131_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln14_3_reg_884 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln12_7_fu_260_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln12_8_fu_263_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_1_reg_905 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_905_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_5_fu_136_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln14_5_reg_910 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_2_reg_915 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_915_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_920 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_7_fu_141_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln14_7_reg_925 : STD_LOGIC_VECTOR (39 downto 0);
    signal icmp_ln19_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_930 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_930_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_930_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_out_weight_change_reg_935 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_reg_935_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_1_reg_945 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_1_reg_945_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_2_reg_950 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_2_reg_950_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_3_reg_960 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_3_reg_960_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_out_net_sum_fu_426_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_out_net_sum_reg_965 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_out_net_sum_1_fu_469_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_out_net_sum_1_reg_991 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_1002 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln14_1_fu_126_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mul_ln14_3_fu_131_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln14_5_fu_136_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln14_7_fu_141_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln12_fu_146_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_fu_150_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_fu_154_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln12_fu_146_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_fu_154_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_fu_150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln12_5_fu_160_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_1_fu_164_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_3_fu_168_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_2_fu_172_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_2_fu_172_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_1_fu_164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln12_3_fu_178_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_4_fu_182_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln12_3_fu_178_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_4_fu_182_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln12_9_fu_188_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_6_fu_192_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_6_fu_192_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln19_1_fu_204_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln12_fu_219_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln12_2_fu_213_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln12_fu_219_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln12_4_fu_216_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln13_fu_228_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln13_fu_228_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_2_fu_225_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln12_1_fu_238_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln12_1_fu_238_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln13_fu_228_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln12_fu_219_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln13_2_fu_276_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln13_2_fu_276_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln12_1_fu_238_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln13_2_fu_276_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln_fu_315_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln14_fu_322_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal shl_ln14_1_fu_344_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln14_1_fu_351_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal shl_ln14_2_fu_366_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln14_3_fu_373_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal shl_ln14_3_fu_395_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln14_4_fu_402_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal weight_out_sum_output_out_fu_417_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_715_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal weight_out_sum_output_out_fu_417_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_sum_output_out_1_fu_460_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_724_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal weight_out_sum_output_out_1_fu_460_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_733_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln22_fu_501_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln22_fu_501_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal output_fu_507_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln22_1_fu_517_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_sum_delta_out_fu_527_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_742_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal weight_out_sum_delta_out_1_fu_536_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_751_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_759_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln22_1_fu_557_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln22_1_fu_557_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal output_2_fu_563_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln22_3_fu_573_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_sum_delta_out_fu_527_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_fu_587_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln23_fu_587_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal error_fu_593_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln23_1_fu_603_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_sum_delta_out_1_fu_536_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_1_fu_618_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln23_1_fu_618_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal error_2_fu_624_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln23_3_fu_634_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal error_1_fu_607_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal error_3_fu_638_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_1_fu_521_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_3_fu_577_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal agg_result_delta_kmin1_0_0_fu_645_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal agg_result_delta_kmin1_1_0_fu_652_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_715_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_715_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_724_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_724_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_733_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_733_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_742_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_742_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_742_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_751_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_751_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_751_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_759_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_759_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_715_ce : STD_LOGIC;
    signal grp_fu_724_ce : STD_LOGIC;
    signal grp_fu_733_ce : STD_LOGIC;
    signal grp_fu_742_ce : STD_LOGIC;
    signal grp_fu_751_ce : STD_LOGIC;
    signal grp_fu_759_ce : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal p_read10_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read11_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read12_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read13_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal biases_0_0_val_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal biases_0_1_val_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal output_kmin1_0_0_val_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal output_kmin1_0_1_val_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal delta_k_0_0_val_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal delta_k_0_1_val_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal training_val_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_0_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_1_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_2_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_3_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_4_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_5_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_6_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_7_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_8_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_9_int_reg : STD_LOGIC_VECTOR (15 downto 0);

    component accelerator_mul_32s_10s_40_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component accelerator_mul_16s_16s_32_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component accelerator_mul_16s_16s_28_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component accelerator_mul_16s_10ns_26_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component accelerator_mac_muladd_16s_16s_28ns_28_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component accelerator_mac_mulsub_16s_9ns_28s_28_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;



begin
    mul_32s_10s_40_1_0_U17 : component accelerator_mul_32s_10s_40_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 10,
        dout_WIDTH => 40)
    port map (
        din0 => mul_ln14_reg_820,
        din1 => mul_ln14_1_fu_126_p1,
        dout => mul_ln14_1_fu_126_p2);

    mul_32s_10s_40_1_0_U18 : component accelerator_mul_32s_10s_40_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 10,
        dout_WIDTH => 40)
    port map (
        din0 => mul_ln14_2_reg_837,
        din1 => mul_ln14_3_fu_131_p1,
        dout => mul_ln14_3_fu_131_p2);

    mul_32s_10s_40_1_0_U19 : component accelerator_mul_32s_10s_40_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 10,
        dout_WIDTH => 40)
    port map (
        din0 => mul_ln14_4_reg_842,
        din1 => mul_ln14_5_fu_136_p1,
        dout => mul_ln14_5_fu_136_p2);

    mul_32s_10s_40_1_0_U20 : component accelerator_mul_32s_10s_40_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 10,
        dout_WIDTH => 40)
    port map (
        din0 => mul_ln14_6_reg_853,
        din1 => mul_ln14_7_fu_141_p1,
        dout => mul_ln14_7_fu_141_p2);

    mul_16s_16s_32_1_0_U21 : component accelerator_mul_16s_16s_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln14_fu_154_p0,
        din1 => mul_ln14_fu_154_p1,
        dout => mul_ln14_fu_154_p2);

    mul_16s_16s_32_1_0_U22 : component accelerator_mul_16s_16s_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln14_2_fu_172_p0,
        din1 => mul_ln14_2_fu_172_p1,
        dout => mul_ln14_2_fu_172_p2);

    mul_16s_16s_32_1_0_U23 : component accelerator_mul_16s_16s_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln14_4_fu_182_p0,
        din1 => mul_ln14_4_fu_182_p1,
        dout => mul_ln14_4_fu_182_p2);

    mul_16s_16s_32_1_0_U24 : component accelerator_mul_16s_16s_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln14_6_fu_192_p0,
        din1 => mul_ln14_6_fu_192_p1,
        dout => mul_ln14_6_fu_192_p2);

    mul_16s_16s_28_1_0_U25 : component accelerator_mul_16s_16s_28_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln12_fu_219_p0,
        din1 => mul_ln12_fu_219_p1,
        dout => mul_ln12_fu_219_p2);

    mul_16s_16s_28_1_0_U26 : component accelerator_mul_16s_16s_28_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln13_fu_228_p0,
        din1 => mul_ln13_fu_228_p1,
        dout => mul_ln13_fu_228_p2);

    mul_16s_16s_28_1_0_U27 : component accelerator_mul_16s_16s_28_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln12_1_fu_238_p0,
        din1 => mul_ln12_1_fu_238_p1,
        dout => mul_ln12_1_fu_238_p2);

    mul_16s_16s_28_1_0_U28 : component accelerator_mul_16s_16s_28_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln13_2_fu_276_p0,
        din1 => mul_ln13_2_fu_276_p1,
        dout => mul_ln13_2_fu_276_p2);

    mul_16s_10ns_26_1_0_U29 : component accelerator_mul_16s_10ns_26_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        din0 => bias_out_net_sum_reg_965,
        din1 => mul_ln22_fu_501_p1,
        dout => mul_ln22_fu_501_p2);

    mul_16s_10ns_26_1_0_U30 : component accelerator_mul_16s_10ns_26_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        din0 => bias_out_net_sum_1_reg_991,
        din1 => mul_ln22_1_fu_557_p1,
        dout => mul_ln22_1_fu_557_p2);

    mul_16s_10ns_26_1_0_U31 : component accelerator_mul_16s_10ns_26_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        din0 => weight_out_sum_delta_out_fu_527_p4,
        din1 => mul_ln23_fu_587_p1,
        dout => mul_ln23_fu_587_p2);

    mul_16s_10ns_26_1_0_U32 : component accelerator_mul_16s_10ns_26_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        din0 => weight_out_sum_delta_out_1_fu_536_p4,
        din1 => mul_ln23_1_fu_618_p1,
        dout => mul_ln23_1_fu_618_p2);

    mac_muladd_16s_16s_28ns_28_4_0_U33 : component accelerator_mac_muladd_16s_16s_28ns_28_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read12_int_reg,
        din1 => grp_fu_715_p1,
        din2 => grp_fu_715_p2,
        ce => grp_fu_715_ce,
        dout => grp_fu_715_p3);

    mac_muladd_16s_16s_28ns_28_4_0_U34 : component accelerator_mac_muladd_16s_16s_28ns_28_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read13_int_reg,
        din1 => grp_fu_724_p1,
        din2 => grp_fu_724_p2,
        ce => grp_fu_724_ce,
        dout => grp_fu_724_p3);

    mac_mulsub_16s_9ns_28s_28_4_0_U35 : component accelerator_mac_mulsub_16s_9ns_28s_28_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => delta_k_0_0_val_read_reg_774,
        din1 => grp_fu_733_p1,
        din2 => grp_fu_733_p2,
        ce => grp_fu_733_ce,
        dout => grp_fu_733_p3);

    mac_muladd_16s_16s_28ns_28_4_0_U36 : component accelerator_mac_muladd_16s_16s_28ns_28_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_742_p0,
        din1 => grp_fu_742_p1,
        din2 => grp_fu_742_p2,
        ce => grp_fu_742_ce,
        dout => grp_fu_742_p3);

    mac_muladd_16s_16s_28ns_28_4_0_U37 : component accelerator_mac_muladd_16s_16s_28ns_28_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_751_p0,
        din1 => grp_fu_751_p1,
        din2 => grp_fu_751_p2,
        ce => grp_fu_751_ce,
        dout => grp_fu_751_p3);

    mac_mulsub_16s_9ns_28s_28_4_0_U38 : component accelerator_mac_mulsub_16s_9ns_28s_28_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => delta_k_0_1_val_read_reg_768,
        din1 => grp_fu_759_p1,
        din2 => grp_fu_759_p2,
        ce => grp_fu_759_ce,
        dout => grp_fu_759_p3);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_0_int_reg <= output_1_fu_521_p3;
                ap_return_1_int_reg <= output_3_fu_577_p3;
                ap_return_2_int_reg <= agg_result_delta_kmin1_0_0_fu_645_p3;
                ap_return_3_int_reg <= agg_result_delta_kmin1_1_0_fu_652_p3;
                ap_return_4_int_reg <= weight_out_weight_change_reg_935_pp0_iter3_reg;
                ap_return_5_int_reg <= weight_out_weight_change_1_reg_945_pp0_iter3_reg;
                ap_return_6_int_reg <= weight_out_weight_change_2_reg_950_pp0_iter3_reg;
                ap_return_7_int_reg <= weight_out_weight_change_3_reg_960_pp0_iter3_reg;
                ap_return_8_int_reg <= grp_fu_733_p3(27 downto 12);
                ap_return_9_int_reg <= grp_fu_759_p3(27 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                bias_out_net_sum_1_reg_991 <= bias_out_net_sum_1_fu_469_p2;
                bias_out_net_sum_reg_965 <= bias_out_net_sum_fu_426_p2;
                biases_0_0_val_read_reg_792 <= biases_0_0_val_int_reg;
                biases_0_0_val_read_reg_792_pp0_iter1_reg <= biases_0_0_val_read_reg_792;
                biases_0_0_val_read_reg_792_pp0_iter2_reg <= biases_0_0_val_read_reg_792_pp0_iter1_reg;
                biases_0_1_val_read_reg_786 <= biases_0_1_val_int_reg;
                biases_0_1_val_read_reg_786_pp0_iter1_reg <= biases_0_1_val_read_reg_786;
                biases_0_1_val_read_reg_786_pp0_iter2_reg <= biases_0_1_val_read_reg_786_pp0_iter1_reg;
                cmp_i_i_reg_858 <= cmp_i_i_fu_198_p2;
                cmp_i_i_reg_858_pp0_iter1_reg <= cmp_i_i_reg_858;
                cmp_i_i_reg_858_pp0_iter2_reg <= cmp_i_i_reg_858_pp0_iter1_reg;
                cmp_i_i_reg_858_pp0_iter3_reg <= cmp_i_i_reg_858_pp0_iter2_reg;
                delta_k_0_0_val_read_reg_774 <= delta_k_0_0_val_int_reg;
                delta_k_0_1_val_read_reg_768 <= delta_k_0_1_val_int_reg;
                icmp_ln19_1_reg_864 <= icmp_ln19_1_fu_204_p2;
                icmp_ln19_1_reg_864_pp0_iter1_reg <= icmp_ln19_1_reg_864;
                icmp_ln19_1_reg_864_pp0_iter2_reg <= icmp_ln19_1_reg_864_pp0_iter1_reg;
                icmp_ln19_1_reg_864_pp0_iter3_reg <= icmp_ln19_1_reg_864_pp0_iter2_reg;
                icmp_ln19_reg_930_pp0_iter2_reg <= icmp_ln19_reg_930;
                icmp_ln19_reg_930_pp0_iter3_reg <= icmp_ln19_reg_930_pp0_iter2_reg;
                mul_ln14_1_reg_874 <= mul_ln14_1_fu_126_p2;
                mul_ln14_2_reg_837 <= mul_ln14_2_fu_172_p2;
                mul_ln14_3_reg_884 <= mul_ln14_3_fu_131_p2;
                mul_ln14_4_reg_842 <= mul_ln14_4_fu_182_p2;
                mul_ln14_5_reg_910 <= mul_ln14_5_fu_136_p2;
                mul_ln14_6_reg_853 <= mul_ln14_6_fu_192_p2;
                mul_ln14_7_reg_925 <= mul_ln14_7_fu_141_p2;
                mul_ln14_reg_820 <= mul_ln14_fu_154_p2;
                output_kmin1_0_0_val_read_reg_780 <= output_kmin1_0_0_val_int_reg;
                p_read101_reg_814 <= p_read10_int_reg;
                p_read101_reg_814_pp0_iter1_reg <= p_read101_reg_814;
                p_read_1_reg_803 <= p_read12_int_reg;
                p_read_1_reg_803_pp0_iter1_reg <= p_read_1_reg_803;
                p_read_2_reg_808 <= p_read11_int_reg;
                p_read_2_reg_808_pp0_iter1_reg <= p_read_2_reg_808;
                p_read_reg_798 <= p_read13_int_reg;
                p_read_reg_798_pp0_iter1_reg <= p_read_reg_798;
                sext_ln12_5_reg_825 <= sext_ln12_5_fu_160_p1;
                sext_ln12_9_reg_847 <= sext_ln12_9_fu_188_p1;
                tmp_1_reg_905_pp0_iter2_reg <= tmp_1_reg_905;
                tmp_2_reg_915_pp0_iter2_reg <= tmp_2_reg_915;
                tmp_3_reg_920 <= mul_ln13_2_fu_276_p2(27 downto 12);
                tmp_4_reg_976 <= bias_out_net_sum_fu_426_p2(15 downto 15);
                tmp_5_reg_1002 <= bias_out_net_sum_1_fu_469_p2(15 downto 15);
                tmp_reg_879 <= mul_ln13_fu_228_p2(27 downto 12);
                weight_out_weight_change_1_reg_945 <= add_ln14_1_fu_351_p2(39 downto 24);
                weight_out_weight_change_1_reg_945_pp0_iter3_reg <= weight_out_weight_change_1_reg_945;
                weight_out_weight_change_2_reg_950 <= add_ln14_3_fu_373_p2(39 downto 24);
                weight_out_weight_change_2_reg_950_pp0_iter3_reg <= weight_out_weight_change_2_reg_950;
                weight_out_weight_change_3_reg_960 <= add_ln14_4_fu_402_p2(39 downto 24);
                weight_out_weight_change_3_reg_960_pp0_iter3_reg <= weight_out_weight_change_3_reg_960;
                weight_out_weight_change_reg_935 <= add_ln14_fu_322_p2(39 downto 24);
                weight_out_weight_change_reg_935_pp0_iter3_reg <= weight_out_weight_change_reg_935;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                biases_0_0_val_int_reg <= biases_0_0_val;
                biases_0_1_val_int_reg <= biases_0_1_val;
                delta_k_0_0_val_int_reg <= delta_k_0_0_val;
                delta_k_0_1_val_int_reg <= delta_k_0_1_val;
                output_kmin1_0_0_val_int_reg <= output_kmin1_0_0_val;
                output_kmin1_0_1_val_int_reg <= output_kmin1_0_1_val;
                p_read10_int_reg <= p_read10;
                p_read11_int_reg <= p_read11;
                p_read12_int_reg <= p_read12;
                p_read13_int_reg <= p_read13;
                training_val_int_reg <= training_val;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp_i_i_reg_858 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                icmp_ln19_reg_930 <= icmp_ln19_fu_310_p2;
                tmp_1_reg_905 <= mul_ln12_fu_219_p2(27 downto 12);
                tmp_2_reg_915 <= mul_ln12_1_fu_238_p2(27 downto 12);
            end if;
        end if;
    end process;
    add_ln14_1_fu_351_p2 <= std_logic_vector(unsigned(shl_ln14_1_fu_344_p3) + unsigned(mul_ln14_3_reg_884));
    add_ln14_3_fu_373_p2 <= std_logic_vector(unsigned(shl_ln14_2_fu_366_p3) + unsigned(mul_ln14_5_reg_910));
    add_ln14_4_fu_402_p2 <= std_logic_vector(unsigned(shl_ln14_3_fu_395_p3) + unsigned(mul_ln14_7_reg_925));
    add_ln14_fu_322_p2 <= std_logic_vector(unsigned(shl_ln_fu_315_p3) + unsigned(mul_ln14_1_reg_874));
    agg_result_delta_kmin1_0_0_fu_645_p3 <= 
        ap_const_lv16_0 when (cmp_i_i_reg_858_pp0_iter3_reg(0) = '1') else 
        error_1_fu_607_p3;
    agg_result_delta_kmin1_1_0_fu_652_p3 <= 
        ap_const_lv16_0 when (cmp_i_i_reg_858_pp0_iter3_reg(0) = '1') else 
        error_3_fu_638_p3;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_0_assign_proc : process(output_1_fu_521_p3, ap_ce_reg, ap_return_0_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_0 <= ap_return_0_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_0 <= output_1_fu_521_p3;
        else 
            ap_return_0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_1_assign_proc : process(output_3_fu_577_p3, ap_ce_reg, ap_return_1_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_1 <= ap_return_1_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_1 <= output_3_fu_577_p3;
        else 
            ap_return_1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_2_assign_proc : process(agg_result_delta_kmin1_0_0_fu_645_p3, ap_ce_reg, ap_return_2_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_2 <= ap_return_2_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_2 <= agg_result_delta_kmin1_0_0_fu_645_p3;
        else 
            ap_return_2 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_3_assign_proc : process(agg_result_delta_kmin1_1_0_fu_652_p3, ap_ce_reg, ap_return_3_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_3 <= ap_return_3_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_3 <= agg_result_delta_kmin1_1_0_fu_652_p3;
        else 
            ap_return_3 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_4_assign_proc : process(weight_out_weight_change_reg_935_pp0_iter3_reg, ap_ce_reg, ap_return_4_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_4 <= ap_return_4_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_4 <= weight_out_weight_change_reg_935_pp0_iter3_reg;
        else 
            ap_return_4 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_5_assign_proc : process(weight_out_weight_change_1_reg_945_pp0_iter3_reg, ap_ce_reg, ap_return_5_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_5 <= ap_return_5_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_5 <= weight_out_weight_change_1_reg_945_pp0_iter3_reg;
        else 
            ap_return_5 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_6_assign_proc : process(weight_out_weight_change_2_reg_950_pp0_iter3_reg, ap_ce_reg, ap_return_6_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_6 <= ap_return_6_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_6 <= weight_out_weight_change_2_reg_950_pp0_iter3_reg;
        else 
            ap_return_6 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_7_assign_proc : process(weight_out_weight_change_3_reg_960_pp0_iter3_reg, ap_ce_reg, ap_return_7_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_7 <= ap_return_7_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_7 <= weight_out_weight_change_3_reg_960_pp0_iter3_reg;
        else 
            ap_return_7 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_8_assign_proc : process(grp_fu_733_p3, ap_ce_reg, ap_return_8_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_8 <= ap_return_8_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_8 <= grp_fu_733_p3(27 downto 12);
        else 
            ap_return_8 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_9_assign_proc : process(grp_fu_759_p3, ap_ce_reg, ap_return_9_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_9 <= ap_return_9_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_9 <= grp_fu_759_p3(27 downto 12);
        else 
            ap_return_9 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    bias_out_net_sum_1_fu_469_p2 <= std_logic_vector(unsigned(weight_out_sum_output_out_1_fu_460_p4) + unsigned(biases_0_1_val_read_reg_786_pp0_iter2_reg));
    bias_out_net_sum_fu_426_p2 <= std_logic_vector(unsigned(weight_out_sum_output_out_fu_417_p4) + unsigned(biases_0_0_val_read_reg_792_pp0_iter2_reg));
    cmp_i_i_fu_198_p2 <= "1" when (training_val_int_reg = ap_const_lv16_0) else "0";
    error_1_fu_607_p3 <= 
        weight_out_sum_delta_out_fu_527_p4 when (icmp_ln19_reg_930_pp0_iter3_reg(0) = '1') else 
        sext_ln23_1_fu_603_p1;
    error_2_fu_624_p4 <= mul_ln23_1_fu_618_p2(25 downto 12);
    error_3_fu_638_p3 <= 
        weight_out_sum_delta_out_1_fu_536_p4 when (icmp_ln19_1_reg_864_pp0_iter3_reg(0) = '1') else 
        sext_ln23_3_fu_634_p1;
    error_fu_593_p4 <= mul_ln23_fu_587_p2(25 downto 12);

    grp_fu_715_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_715_ce <= ap_const_logic_1;
        else 
            grp_fu_715_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_715_p1 <= sext_ln13_3_fu_168_p1(16 - 1 downto 0);
    grp_fu_715_p2 <= (tmp_reg_879 & ap_const_lv12_0);

    grp_fu_724_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_724_ce <= ap_const_logic_1;
        else 
            grp_fu_724_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_724_p1 <= sext_ln13_3_fu_168_p1(16 - 1 downto 0);
    grp_fu_724_p2 <= (tmp_3_reg_920 & ap_const_lv12_0);

    grp_fu_733_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_733_ce <= ap_const_logic_1;
        else 
            grp_fu_733_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_733_p1 <= ap_const_lv26_199(9 - 1 downto 0);
    grp_fu_733_p2 <= (biases_0_0_val_read_reg_792_pp0_iter2_reg & ap_const_lv12_0);

    grp_fu_742_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_742_ce <= ap_const_logic_1;
        else 
            grp_fu_742_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_742_p0 <= sext_ln12_7_fu_260_p1(16 - 1 downto 0);
    grp_fu_742_p1 <= sext_ln12_8_fu_263_p1(16 - 1 downto 0);
    grp_fu_742_p2 <= (tmp_1_reg_905_pp0_iter2_reg & ap_const_lv12_0);

    grp_fu_751_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_751_ce <= ap_const_logic_1;
        else 
            grp_fu_751_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_751_p0 <= sext_ln12_9_reg_847(16 - 1 downto 0);
    grp_fu_751_p1 <= sext_ln12_8_fu_263_p1(16 - 1 downto 0);
    grp_fu_751_p2 <= (tmp_2_reg_915_pp0_iter2_reg & ap_const_lv12_0);

    grp_fu_759_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_759_ce <= ap_const_logic_1;
        else 
            grp_fu_759_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_759_p1 <= ap_const_lv26_199(9 - 1 downto 0);
    grp_fu_759_p2 <= (biases_0_1_val_read_reg_786_pp0_iter2_reg & ap_const_lv12_0);
    icmp_ln19_1_fu_204_p0 <= output_kmin1_0_1_val_int_reg;
    icmp_ln19_1_fu_204_p2 <= "1" when (signed(icmp_ln19_1_fu_204_p0) > signed(ap_const_lv16_0)) else "0";
    icmp_ln19_fu_310_p2 <= "1" when (signed(output_kmin1_0_0_val_read_reg_780) > signed(ap_const_lv16_0)) else "0";
    mul_ln12_1_fu_238_p0 <= sext_ln12_5_reg_825(16 - 1 downto 0);
    mul_ln12_1_fu_238_p1 <= sext_ln12_4_fu_216_p1(16 - 1 downto 0);
    mul_ln12_fu_219_p0 <= sext_ln12_2_fu_213_p1(16 - 1 downto 0);
    mul_ln12_fu_219_p1 <= sext_ln12_4_fu_216_p1(16 - 1 downto 0);
    mul_ln13_2_fu_276_p0 <= sext_ln12_7_fu_260_p1(16 - 1 downto 0);
    mul_ln13_2_fu_276_p1 <= sext_ln13_2_fu_225_p1(16 - 1 downto 0);
    mul_ln13_fu_228_p0 <= sext_ln12_2_fu_213_p1(16 - 1 downto 0);
    mul_ln13_fu_228_p1 <= sext_ln13_2_fu_225_p1(16 - 1 downto 0);
    mul_ln14_1_fu_126_p1 <= ap_const_lv40_FFFFFFFE67(10 - 1 downto 0);
    mul_ln14_2_fu_172_p0 <= sext_ln12_fu_146_p1(16 - 1 downto 0);
    mul_ln14_2_fu_172_p1 <= sext_ln13_1_fu_164_p1(16 - 1 downto 0);
    mul_ln14_3_fu_131_p1 <= ap_const_lv40_FFFFFFFE67(10 - 1 downto 0);
    mul_ln14_4_fu_182_p0 <= sext_ln12_3_fu_178_p1(16 - 1 downto 0);
    mul_ln14_4_fu_182_p1 <= sext_ln13_fu_150_p1(16 - 1 downto 0);
    mul_ln14_5_fu_136_p1 <= ap_const_lv40_FFFFFFFE67(10 - 1 downto 0);
    mul_ln14_6_fu_192_p0 <= sext_ln12_3_fu_178_p1(16 - 1 downto 0);
    mul_ln14_6_fu_192_p1 <= sext_ln13_1_fu_164_p1(16 - 1 downto 0);
    mul_ln14_7_fu_141_p1 <= ap_const_lv40_FFFFFFFE67(10 - 1 downto 0);
    mul_ln14_fu_154_p0 <= sext_ln12_fu_146_p1(16 - 1 downto 0);
    mul_ln14_fu_154_p1 <= sext_ln13_fu_150_p1(16 - 1 downto 0);
    mul_ln22_1_fu_557_p1 <= ap_const_lv26_199(10 - 1 downto 0);
    mul_ln22_fu_501_p1 <= ap_const_lv26_199(10 - 1 downto 0);
    mul_ln23_1_fu_618_p1 <= ap_const_lv26_199(10 - 1 downto 0);
    mul_ln23_fu_587_p1 <= ap_const_lv26_199(10 - 1 downto 0);
    output_1_fu_521_p3 <= 
        sext_ln22_1_fu_517_p1 when (tmp_4_reg_976(0) = '1') else 
        bias_out_net_sum_reg_965;
    output_2_fu_563_p4 <= mul_ln22_1_fu_557_p2(25 downto 12);
    output_3_fu_577_p3 <= 
        sext_ln22_3_fu_573_p1 when (tmp_5_reg_1002(0) = '1') else 
        bias_out_net_sum_1_reg_991;
    output_fu_507_p4 <= mul_ln22_fu_501_p2(25 downto 12);
        sext_ln12_2_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read101_reg_814),28));

    sext_ln12_3_fu_178_p0 <= delta_k_0_1_val_int_reg;
        sext_ln12_3_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln12_3_fu_178_p0),32));

        sext_ln12_4_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(delta_k_0_0_val_read_reg_774),28));

    sext_ln12_5_fu_160_p0 <= p_read12_int_reg;
        sext_ln12_5_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln12_5_fu_160_p0),28));

        sext_ln12_7_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_2_reg_808),28));

        sext_ln12_8_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(delta_k_0_1_val_read_reg_768),28));

    sext_ln12_9_fu_188_p0 <= p_read13_int_reg;
        sext_ln12_9_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln12_9_fu_188_p0),28));

    sext_ln12_fu_146_p0 <= delta_k_0_0_val_int_reg;
        sext_ln12_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln12_fu_146_p0),32));

    sext_ln13_1_fu_164_p0 <= output_kmin1_0_1_val_int_reg;
        sext_ln13_1_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln13_1_fu_164_p0),32));

        sext_ln13_2_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_kmin1_0_0_val_read_reg_780),28));

    sext_ln13_3_fu_168_p0 <= output_kmin1_0_1_val_int_reg;
        sext_ln13_3_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln13_3_fu_168_p0),28));

    sext_ln13_fu_150_p0 <= output_kmin1_0_0_val_int_reg;
        sext_ln13_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln13_fu_150_p0),32));

        sext_ln22_1_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_fu_507_p4),16));

        sext_ln22_3_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_2_fu_563_p4),16));

        sext_ln23_1_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(error_fu_593_p4),16));

        sext_ln23_3_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(error_2_fu_624_p4),16));

    shl_ln14_1_fu_344_p3 <= (p_read_1_reg_803_pp0_iter1_reg & ap_const_lv24_0);
    shl_ln14_2_fu_366_p3 <= (p_read_2_reg_808_pp0_iter1_reg & ap_const_lv24_0);
    shl_ln14_3_fu_395_p3 <= (p_read_reg_798_pp0_iter1_reg & ap_const_lv24_0);
    shl_ln_fu_315_p3 <= (p_read101_reg_814_pp0_iter1_reg & ap_const_lv24_0);
    weight_out_sum_delta_out_1_fu_536_p1 <= grp_fu_751_p3;
    weight_out_sum_delta_out_1_fu_536_p4 <= weight_out_sum_delta_out_1_fu_536_p1(27 downto 12);
    weight_out_sum_delta_out_fu_527_p1 <= grp_fu_742_p3;
    weight_out_sum_delta_out_fu_527_p4 <= weight_out_sum_delta_out_fu_527_p1(27 downto 12);
    weight_out_sum_output_out_1_fu_460_p1 <= grp_fu_724_p3;
    weight_out_sum_output_out_1_fu_460_p4 <= weight_out_sum_output_out_1_fu_460_p1(27 downto 12);
    weight_out_sum_output_out_fu_417_p1 <= grp_fu_715_p3;
    weight_out_sum_output_out_fu_417_p4 <= weight_out_sum_output_out_fu_417_p1(27 downto 12);
end behav;
