-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accelerator_model_array is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    p_read10 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read29 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read30 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read31 : IN STD_LOGIC_VECTOR (15 downto 0);
    biases_0_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    biases_0_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    output_kmin1_0_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    output_kmin1_0_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    delta_k_0_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    delta_k_0_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
    training : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of accelerator_model_array is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv40_FFFFFFFE67 : STD_LOGIC_VECTOR (39 downto 0) := "1111111111111111111111111111111001100111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv26_199 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000110011001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal delta_k_0_0_val_read_reg_782 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal output_kmin1_0_0_val_read_reg_787 : STD_LOGIC_VECTOR (15 downto 0);
    signal biases_0_1_val_read_reg_793 : STD_LOGIC_VECTOR (15 downto 0);
    signal biases_0_1_val_read_reg_793_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal biases_0_1_val_read_reg_793_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal biases_0_0_val_read_reg_799 : STD_LOGIC_VECTOR (15 downto 0);
    signal biases_0_0_val_read_reg_799_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal biases_0_0_val_read_reg_799_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_reg_805 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_1_reg_810 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_2_reg_815 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_3_reg_820 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_fu_158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_reg_831 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_2_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_2_reg_836 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_4_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_4_reg_846 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln12_6_fu_188_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln12_6_reg_851 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln13_3_fu_192_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln12_7_fu_196_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln12_7_reg_863 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln12_8_fu_200_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln12_9_fu_204_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln14_7_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_7_reg_881 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp_i_i_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i_reg_886 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i_reg_886_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i_reg_886_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_reg_892 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_reg_892_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_reg_892_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_out_weight_change_reg_897 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_reg_897_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_902 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_907 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_1_reg_912 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_1_reg_912_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_2_reg_917 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_2_reg_917_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_922 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_927 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_3_reg_932 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_weight_change_3_reg_932_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln19_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_937 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_937_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln14_1_fu_126_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mul_ln14_5_fu_131_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln14_6_fu_136_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln14_8_fu_141_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln12_fu_146_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_fu_154_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_fu_158_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln12_fu_146_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_fu_158_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_fu_154_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln13_1_fu_164_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_2_fu_168_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_2_fu_168_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_1_fu_164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln12_2_fu_174_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_4_fu_182_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln12_2_fu_174_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_4_fu_182_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln12_6_fu_188_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_3_fu_192_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln12_7_fu_196_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln12_8_fu_200_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln12_9_fu_204_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_7_fu_208_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_7_fu_208_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln19_1_fu_220_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln12_fu_232_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln12_3_fu_226_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln12_fu_232_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln12_4_fu_229_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln13_fu_241_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln13_fu_241_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_2_fu_238_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln_fu_251_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln14_1_fu_126_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln14_fu_258_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln13_fu_241_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln12_fu_232_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln12_1_fu_302_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln12_1_fu_302_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln14_2_fu_307_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln14_5_fu_131_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln14_1_fu_314_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln13_2_fu_330_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln13_2_fu_330_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln14_3_fu_335_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln14_6_fu_136_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln14_2_fu_342_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln12_1_fu_302_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln13_2_fu_330_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln14_4_fu_382_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln14_8_fu_141_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln14_3_fu_389_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_728_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal weight_out_sum_output_out_fu_461_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_737_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal weight_out_sum_output_out_fu_461_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_out_net_sum_fu_470_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln22_fu_487_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln22_fu_487_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal output_1_fu_493_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_fu_475_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln22_1_fu_503_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_sum_delta_out_fu_515_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_746_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal weight_out_sum_delta_out_1_fu_524_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_755_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal weight_out_sum_output_out_1_fu_533_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_764_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal weight_out_sum_output_out_1_fu_533_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_773_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal bias_out_net_sum_1_fu_542_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln22_1_fu_568_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln22_1_fu_568_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal output_fu_574_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_5_fu_556_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln22_3_fu_584_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_sum_delta_out_fu_515_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_fu_600_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln23_fu_600_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal error_fu_606_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln23_1_fu_616_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_sum_delta_out_1_fu_524_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_1_fu_631_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln23_1_fu_631_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal error_2_fu_637_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln23_3_fu_647_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal error_1_fu_620_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal error_3_fu_651_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_4_fu_507_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_3_fu_588_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal agg_result_delta_kmin1_0_0_fu_658_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal agg_result_delta_kmin1_1_0_fu_665_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_728_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_728_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_737_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_737_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_746_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_746_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_755_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_755_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_755_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_764_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_764_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_764_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_773_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_773_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_728_ce : STD_LOGIC;
    signal grp_fu_737_ce : STD_LOGIC;
    signal grp_fu_746_ce : STD_LOGIC;
    signal grp_fu_755_ce : STD_LOGIC;
    signal grp_fu_764_ce : STD_LOGIC;
    signal grp_fu_773_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_reset_start_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component accelerator_mul_32s_10s_40_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component accelerator_mul_16s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component accelerator_mul_16s_16s_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component accelerator_mul_16s_10ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component accelerator_mac_mulsub_16s_9ns_28s_28_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component accelerator_mac_muladd_16s_16s_28ns_28_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;



begin
    mul_32s_10s_40_1_1_U17 : component accelerator_mul_32s_10s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 10,
        dout_WIDTH => 40)
    port map (
        din0 => mul_ln14_reg_831,
        din1 => mul_ln14_1_fu_126_p1,
        dout => mul_ln14_1_fu_126_p2);

    mul_32s_10s_40_1_1_U18 : component accelerator_mul_32s_10s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 10,
        dout_WIDTH => 40)
    port map (
        din0 => mul_ln14_2_reg_836,
        din1 => mul_ln14_5_fu_131_p1,
        dout => mul_ln14_5_fu_131_p2);

    mul_32s_10s_40_1_1_U19 : component accelerator_mul_32s_10s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 10,
        dout_WIDTH => 40)
    port map (
        din0 => mul_ln14_4_reg_846,
        din1 => mul_ln14_6_fu_136_p1,
        dout => mul_ln14_6_fu_136_p2);

    mul_32s_10s_40_1_1_U20 : component accelerator_mul_32s_10s_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 10,
        dout_WIDTH => 40)
    port map (
        din0 => mul_ln14_7_reg_881,
        din1 => mul_ln14_8_fu_141_p1,
        dout => mul_ln14_8_fu_141_p2);

    mul_16s_16s_32_1_1_U21 : component accelerator_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln14_fu_158_p0,
        din1 => mul_ln14_fu_158_p1,
        dout => mul_ln14_fu_158_p2);

    mul_16s_16s_32_1_1_U22 : component accelerator_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln14_2_fu_168_p0,
        din1 => mul_ln14_2_fu_168_p1,
        dout => mul_ln14_2_fu_168_p2);

    mul_16s_16s_32_1_1_U23 : component accelerator_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln14_4_fu_182_p0,
        din1 => mul_ln14_4_fu_182_p1,
        dout => mul_ln14_4_fu_182_p2);

    mul_16s_16s_32_1_1_U24 : component accelerator_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln14_7_fu_208_p0,
        din1 => mul_ln14_7_fu_208_p1,
        dout => mul_ln14_7_fu_208_p2);

    mul_16s_16s_28_1_1_U25 : component accelerator_mul_16s_16s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln12_fu_232_p0,
        din1 => mul_ln12_fu_232_p1,
        dout => mul_ln12_fu_232_p2);

    mul_16s_16s_28_1_1_U26 : component accelerator_mul_16s_16s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln13_fu_241_p0,
        din1 => mul_ln13_fu_241_p1,
        dout => mul_ln13_fu_241_p2);

    mul_16s_16s_28_1_1_U27 : component accelerator_mul_16s_16s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln12_1_fu_302_p0,
        din1 => mul_ln12_1_fu_302_p1,
        dout => mul_ln12_1_fu_302_p2);

    mul_16s_16s_28_1_1_U28 : component accelerator_mul_16s_16s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln13_2_fu_330_p0,
        din1 => mul_ln13_2_fu_330_p1,
        dout => mul_ln13_2_fu_330_p2);

    mul_16s_10ns_26_1_1_U29 : component accelerator_mul_16s_10ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        din0 => bias_out_net_sum_fu_470_p2,
        din1 => mul_ln22_fu_487_p1,
        dout => mul_ln22_fu_487_p2);

    mul_16s_10ns_26_1_1_U30 : component accelerator_mul_16s_10ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        din0 => bias_out_net_sum_1_fu_542_p2,
        din1 => mul_ln22_1_fu_568_p1,
        dout => mul_ln22_1_fu_568_p2);

    mul_16s_10ns_26_1_1_U31 : component accelerator_mul_16s_10ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        din0 => weight_out_sum_delta_out_fu_515_p4,
        din1 => mul_ln23_fu_600_p1,
        dout => mul_ln23_fu_600_p2);

    mul_16s_10ns_26_1_1_U32 : component accelerator_mul_16s_10ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        din0 => weight_out_sum_delta_out_1_fu_524_p4,
        din1 => mul_ln23_1_fu_631_p1,
        dout => mul_ln23_1_fu_631_p2);

    mac_mulsub_16s_9ns_28s_28_4_1_U33 : component accelerator_mac_mulsub_16s_9ns_28s_28_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => delta_k_0_0_val,
        din1 => grp_fu_728_p1,
        din2 => grp_fu_728_p2,
        ce => grp_fu_728_ce,
        dout => grp_fu_728_p3);

    mac_muladd_16s_16s_28ns_28_4_1_U34 : component accelerator_mac_muladd_16s_16s_28ns_28_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read29,
        din1 => grp_fu_737_p1,
        din2 => grp_fu_737_p2,
        ce => grp_fu_737_ce,
        dout => grp_fu_737_p3);

    mac_muladd_16s_16s_28ns_28_4_1_U35 : component accelerator_mac_muladd_16s_16s_28ns_28_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read30,
        din1 => grp_fu_746_p1,
        din2 => grp_fu_746_p2,
        ce => grp_fu_746_ce,
        dout => grp_fu_746_p3);

    mac_muladd_16s_16s_28ns_28_4_1_U36 : component accelerator_mac_muladd_16s_16s_28ns_28_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_755_p0,
        din1 => grp_fu_755_p1,
        din2 => grp_fu_755_p2,
        ce => grp_fu_755_ce,
        dout => grp_fu_755_p3);

    mac_muladd_16s_16s_28ns_28_4_1_U37 : component accelerator_mac_muladd_16s_16s_28ns_28_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_764_p0,
        din1 => grp_fu_764_p1,
        din2 => grp_fu_764_p2,
        ce => grp_fu_764_ce,
        dout => grp_fu_764_p3);

    mac_mulsub_16s_9ns_28s_28_4_1_U38 : component accelerator_mac_mulsub_16s_9ns_28s_28_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => delta_k_0_1_val,
        din1 => grp_fu_773_p1,
        din2 => grp_fu_773_p2,
        ce => grp_fu_773_ce,
        dout => grp_fu_773_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                biases_0_0_val_read_reg_799 <= biases_0_0_val;
                biases_0_0_val_read_reg_799_pp0_iter1_reg <= biases_0_0_val_read_reg_799;
                biases_0_1_val_read_reg_793 <= biases_0_1_val;
                biases_0_1_val_read_reg_793_pp0_iter1_reg <= biases_0_1_val_read_reg_793;
                cmp_i_i_reg_886 <= cmp_i_i_fu_214_p2;
                cmp_i_i_reg_886_pp0_iter1_reg <= cmp_i_i_reg_886;
                delta_k_0_0_val_read_reg_782 <= delta_k_0_0_val;
                icmp_ln19_1_reg_892 <= icmp_ln19_1_fu_220_p2;
                icmp_ln19_1_reg_892_pp0_iter1_reg <= icmp_ln19_1_reg_892;
                icmp_ln19_reg_937 <= icmp_ln19_fu_405_p2;
                mul_ln14_2_reg_836 <= mul_ln14_2_fu_168_p2;
                mul_ln14_4_reg_846 <= mul_ln14_4_fu_182_p2;
                mul_ln14_7_reg_881 <= mul_ln14_7_fu_208_p2;
                mul_ln14_reg_831 <= mul_ln14_fu_158_p2;
                output_kmin1_0_0_val_read_reg_787 <= output_kmin1_0_0_val;
                p_read_1_reg_810 <= p_read30;
                p_read_2_reg_815 <= p_read29;
                p_read_3_reg_820 <= p_read10;
                p_read_reg_805 <= p_read31;
                sext_ln12_6_reg_851 <= sext_ln12_6_fu_188_p1;
                sext_ln12_7_reg_863 <= sext_ln12_7_fu_196_p1;
                tmp_1_reg_907 <= mul_ln12_fu_232_p2(27 downto 12);
                tmp_2_reg_922 <= mul_ln12_1_fu_302_p2(27 downto 12);
                tmp_3_reg_927 <= mul_ln13_2_fu_330_p2(27 downto 12);
                tmp_reg_902 <= mul_ln13_fu_241_p2(27 downto 12);
                weight_out_weight_change_1_reg_912 <= add_ln14_1_fu_314_p2(39 downto 24);
                weight_out_weight_change_2_reg_917 <= add_ln14_2_fu_342_p2(39 downto 24);
                weight_out_weight_change_3_reg_932 <= add_ln14_3_fu_389_p2(39 downto 24);
                weight_out_weight_change_reg_897 <= add_ln14_fu_258_p2(39 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                biases_0_0_val_read_reg_799_pp0_iter2_reg <= biases_0_0_val_read_reg_799_pp0_iter1_reg;
                biases_0_1_val_read_reg_793_pp0_iter2_reg <= biases_0_1_val_read_reg_793_pp0_iter1_reg;
                cmp_i_i_reg_886_pp0_iter2_reg <= cmp_i_i_reg_886_pp0_iter1_reg;
                icmp_ln19_1_reg_892_pp0_iter2_reg <= icmp_ln19_1_reg_892_pp0_iter1_reg;
                icmp_ln19_reg_937_pp0_iter2_reg <= icmp_ln19_reg_937;
                weight_out_weight_change_1_reg_912_pp0_iter2_reg <= weight_out_weight_change_1_reg_912;
                weight_out_weight_change_2_reg_917_pp0_iter2_reg <= weight_out_weight_change_2_reg_917;
                weight_out_weight_change_3_reg_932_pp0_iter2_reg <= weight_out_weight_change_3_reg_932;
                weight_out_weight_change_reg_897_pp0_iter2_reg <= weight_out_weight_change_reg_897;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_reset_start_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln14_1_fu_314_p2 <= std_logic_vector(unsigned(shl_ln14_2_fu_307_p3) + unsigned(mul_ln14_5_fu_131_p2));
    add_ln14_2_fu_342_p2 <= std_logic_vector(unsigned(shl_ln14_3_fu_335_p3) + unsigned(mul_ln14_6_fu_136_p2));
    add_ln14_3_fu_389_p2 <= std_logic_vector(unsigned(shl_ln14_4_fu_382_p3) + unsigned(mul_ln14_8_fu_141_p2));
    add_ln14_fu_258_p2 <= std_logic_vector(unsigned(shl_ln_fu_251_p3) + unsigned(mul_ln14_1_fu_126_p2));
    agg_result_delta_kmin1_0_0_fu_658_p3 <= 
        ap_const_lv16_0 when (cmp_i_i_reg_886_pp0_iter2_reg(0) = '1') else 
        error_1_fu_620_p3;
    agg_result_delta_kmin1_1_0_fu_665_p3 <= 
        ap_const_lv16_0 when (cmp_i_i_reg_886_pp0_iter2_reg(0) = '1') else 
        error_3_fu_651_p3;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_start_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_start = ap_const_logic_1))) then 
            ap_reset_start_pp0 <= ap_const_logic_1;
        else 
            ap_reset_start_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= output_4_fu_507_p3;
    ap_return_1 <= output_3_fu_588_p3;
    ap_return_2 <= agg_result_delta_kmin1_0_0_fu_658_p3;
    ap_return_3 <= agg_result_delta_kmin1_1_0_fu_665_p3;
    ap_return_4 <= weight_out_weight_change_reg_897_pp0_iter2_reg;
    ap_return_5 <= weight_out_weight_change_1_reg_912_pp0_iter2_reg;
    ap_return_6 <= weight_out_weight_change_2_reg_917_pp0_iter2_reg;
    ap_return_7 <= weight_out_weight_change_3_reg_932_pp0_iter2_reg;
    ap_return_8 <= grp_fu_728_p3(27 downto 12);
    ap_return_9 <= grp_fu_773_p3(27 downto 12);
    bias_out_net_sum_1_fu_542_p2 <= std_logic_vector(unsigned(weight_out_sum_output_out_1_fu_533_p4) + unsigned(biases_0_1_val_read_reg_793_pp0_iter2_reg));
    bias_out_net_sum_fu_470_p2 <= std_logic_vector(unsigned(weight_out_sum_output_out_fu_461_p4) + unsigned(biases_0_0_val_read_reg_799_pp0_iter2_reg));
    cmp_i_i_fu_214_p2 <= "1" when (training = ap_const_lv16_0) else "0";
    error_1_fu_620_p3 <= 
        weight_out_sum_delta_out_fu_515_p4 when (icmp_ln19_reg_937_pp0_iter2_reg(0) = '1') else 
        sext_ln23_1_fu_616_p1;
    error_2_fu_637_p4 <= mul_ln23_1_fu_631_p2(25 downto 12);
    error_3_fu_651_p3 <= 
        weight_out_sum_delta_out_1_fu_524_p4 when (icmp_ln19_1_reg_892_pp0_iter2_reg(0) = '1') else 
        sext_ln23_3_fu_647_p1;
    error_fu_606_p4 <= mul_ln23_fu_600_p2(25 downto 12);

    grp_fu_728_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_728_ce <= ap_const_logic_1;
        else 
            grp_fu_728_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_728_p1 <= ap_const_lv26_199(9 - 1 downto 0);
    grp_fu_728_p2 <= (biases_0_0_val_read_reg_799_pp0_iter1_reg & ap_const_lv12_0);

    grp_fu_737_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_737_ce <= ap_const_logic_1;
        else 
            grp_fu_737_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_737_p1 <= sext_ln13_3_fu_192_p1(16 - 1 downto 0);
    grp_fu_737_p2 <= (tmp_reg_902 & ap_const_lv12_0);

    grp_fu_746_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_746_ce <= ap_const_logic_1;
        else 
            grp_fu_746_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_746_p1 <= sext_ln12_8_fu_200_p1(16 - 1 downto 0);
    grp_fu_746_p2 <= (tmp_1_reg_907 & ap_const_lv12_0);

    grp_fu_755_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_755_ce <= ap_const_logic_1;
        else 
            grp_fu_755_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_755_p0 <= sext_ln12_9_fu_204_p1(16 - 1 downto 0);
    grp_fu_755_p1 <= sext_ln12_8_fu_200_p1(16 - 1 downto 0);
    grp_fu_755_p2 <= (tmp_2_reg_922 & ap_const_lv12_0);

    grp_fu_764_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_764_ce <= ap_const_logic_1;
        else 
            grp_fu_764_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_764_p0 <= sext_ln12_9_fu_204_p1(16 - 1 downto 0);
    grp_fu_764_p1 <= sext_ln13_3_fu_192_p1(16 - 1 downto 0);
    grp_fu_764_p2 <= (tmp_3_reg_927 & ap_const_lv12_0);

    grp_fu_773_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_773_ce <= ap_const_logic_1;
        else 
            grp_fu_773_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_773_p1 <= ap_const_lv26_199(9 - 1 downto 0);
    grp_fu_773_p2 <= (biases_0_1_val_read_reg_793_pp0_iter1_reg & ap_const_lv12_0);
    icmp_ln19_1_fu_220_p0 <= output_kmin1_0_1_val;
    icmp_ln19_1_fu_220_p2 <= "1" when (signed(icmp_ln19_1_fu_220_p0) > signed(ap_const_lv16_0)) else "0";
    icmp_ln19_fu_405_p2 <= "1" when (signed(output_kmin1_0_0_val_read_reg_787) > signed(ap_const_lv16_0)) else "0";
    mul_ln12_1_fu_302_p0 <= sext_ln12_6_reg_851(16 - 1 downto 0);
    mul_ln12_1_fu_302_p1 <= sext_ln12_4_fu_229_p1(16 - 1 downto 0);
    mul_ln12_fu_232_p0 <= sext_ln12_3_fu_226_p1(16 - 1 downto 0);
    mul_ln12_fu_232_p1 <= sext_ln12_4_fu_229_p1(16 - 1 downto 0);
    mul_ln13_2_fu_330_p0 <= sext_ln12_7_reg_863(16 - 1 downto 0);
    mul_ln13_2_fu_330_p1 <= sext_ln13_2_fu_238_p1(16 - 1 downto 0);
    mul_ln13_fu_241_p0 <= sext_ln12_3_fu_226_p1(16 - 1 downto 0);
    mul_ln13_fu_241_p1 <= sext_ln13_2_fu_238_p1(16 - 1 downto 0);
    mul_ln14_1_fu_126_p1 <= ap_const_lv40_FFFFFFFE67(10 - 1 downto 0);
    mul_ln14_2_fu_168_p0 <= sext_ln12_fu_146_p1(16 - 1 downto 0);
    mul_ln14_2_fu_168_p1 <= sext_ln13_1_fu_164_p1(16 - 1 downto 0);
    mul_ln14_4_fu_182_p0 <= sext_ln12_2_fu_174_p1(16 - 1 downto 0);
    mul_ln14_4_fu_182_p1 <= sext_ln13_fu_154_p1(16 - 1 downto 0);
    mul_ln14_5_fu_131_p1 <= ap_const_lv40_FFFFFFFE67(10 - 1 downto 0);
    mul_ln14_6_fu_136_p1 <= ap_const_lv40_FFFFFFFE67(10 - 1 downto 0);
    mul_ln14_7_fu_208_p0 <= sext_ln12_2_fu_174_p1(16 - 1 downto 0);
    mul_ln14_7_fu_208_p1 <= sext_ln13_1_fu_164_p1(16 - 1 downto 0);
    mul_ln14_8_fu_141_p1 <= ap_const_lv40_FFFFFFFE67(10 - 1 downto 0);
    mul_ln14_fu_158_p0 <= sext_ln12_fu_146_p1(16 - 1 downto 0);
    mul_ln14_fu_158_p1 <= sext_ln13_fu_154_p1(16 - 1 downto 0);
    mul_ln22_1_fu_568_p1 <= ap_const_lv26_199(10 - 1 downto 0);
    mul_ln22_fu_487_p1 <= ap_const_lv26_199(10 - 1 downto 0);
    mul_ln23_1_fu_631_p1 <= ap_const_lv26_199(10 - 1 downto 0);
    mul_ln23_fu_600_p1 <= ap_const_lv26_199(10 - 1 downto 0);
    output_1_fu_493_p4 <= mul_ln22_fu_487_p2(25 downto 12);
    output_3_fu_588_p3 <= 
        sext_ln22_3_fu_584_p1 when (tmp_5_fu_556_p3(0) = '1') else 
        bias_out_net_sum_1_fu_542_p2;
    output_4_fu_507_p3 <= 
        sext_ln22_1_fu_503_p1 when (tmp_4_fu_475_p3(0) = '1') else 
        bias_out_net_sum_fu_470_p2;
    output_fu_574_p4 <= mul_ln22_1_fu_568_p2(25 downto 12);
    sext_ln12_2_fu_174_p0 <= delta_k_0_1_val;
        sext_ln12_2_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln12_2_fu_174_p0),32));

        sext_ln12_3_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_3_reg_820),28));

        sext_ln12_4_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(delta_k_0_0_val_read_reg_782),28));

    sext_ln12_6_fu_188_p0 <= p_read29;
        sext_ln12_6_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln12_6_fu_188_p0),28));

    sext_ln12_7_fu_196_p0 <= p_read30;
        sext_ln12_7_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln12_7_fu_196_p0),28));

    sext_ln12_8_fu_200_p0 <= delta_k_0_1_val;
        sext_ln12_8_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln12_8_fu_200_p0),28));

    sext_ln12_9_fu_204_p0 <= p_read31;
        sext_ln12_9_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln12_9_fu_204_p0),28));

    sext_ln12_fu_146_p0 <= delta_k_0_0_val;
        sext_ln12_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln12_fu_146_p0),32));

    sext_ln13_1_fu_164_p0 <= output_kmin1_0_1_val;
        sext_ln13_1_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln13_1_fu_164_p0),32));

        sext_ln13_2_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_kmin1_0_0_val_read_reg_787),28));

    sext_ln13_3_fu_192_p0 <= output_kmin1_0_1_val;
        sext_ln13_3_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln13_3_fu_192_p0),28));

    sext_ln13_fu_154_p0 <= output_kmin1_0_0_val;
        sext_ln13_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln13_fu_154_p0),32));

        sext_ln22_1_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_1_fu_493_p4),16));

        sext_ln22_3_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_fu_574_p4),16));

        sext_ln23_1_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(error_fu_606_p4),16));

        sext_ln23_3_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(error_2_fu_637_p4),16));

    shl_ln14_2_fu_307_p3 <= (p_read_2_reg_815 & ap_const_lv24_0);
    shl_ln14_3_fu_335_p3 <= (p_read_1_reg_810 & ap_const_lv24_0);
    shl_ln14_4_fu_382_p3 <= (p_read_reg_805 & ap_const_lv24_0);
    shl_ln_fu_251_p3 <= (p_read_3_reg_820 & ap_const_lv24_0);
    tmp_4_fu_475_p3 <= bias_out_net_sum_fu_470_p2(15 downto 15);
    tmp_5_fu_556_p3 <= bias_out_net_sum_1_fu_542_p2(15 downto 15);
    weight_out_sum_delta_out_1_fu_524_p1 <= grp_fu_755_p3;
    weight_out_sum_delta_out_1_fu_524_p4 <= weight_out_sum_delta_out_1_fu_524_p1(27 downto 12);
    weight_out_sum_delta_out_fu_515_p1 <= grp_fu_746_p3;
    weight_out_sum_delta_out_fu_515_p4 <= weight_out_sum_delta_out_fu_515_p1(27 downto 12);
    weight_out_sum_output_out_1_fu_533_p1 <= grp_fu_764_p3;
    weight_out_sum_output_out_1_fu_533_p4 <= weight_out_sum_output_out_1_fu_533_p1(27 downto 12);
    weight_out_sum_output_out_fu_461_p1 <= grp_fu_737_p3;
    weight_out_sum_output_out_fu_461_p4 <= weight_out_sum_output_out_fu_461_p1(27 downto 12);
end behav;
