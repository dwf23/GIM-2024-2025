// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module accelerator_accelerator_Pipeline_VITIS_LOOP_47_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        w1_address0,
        w1_ce0,
        w1_q0,
        w1_address1,
        w1_ce1,
        w1_q1,
        w2_address0,
        w2_ce0,
        w2_q0,
        w2_address1,
        w2_ce1,
        w2_q1,
        bias_1_address0,
        bias_1_ce0,
        bias_1_q0,
        bias_2_address0,
        bias_2_ce0,
        bias_2_q0,
        w2_local_3_out,
        w2_local_3_out_ap_vld,
        w2_local_2_out,
        w2_local_2_out_ap_vld,
        w1_local_3_out,
        w1_local_3_out_ap_vld,
        w1_local_2_out,
        w1_local_2_out_ap_vld,
        bias_2_local_1_out,
        bias_2_local_1_out_ap_vld,
        bias_1_local_1_out,
        bias_1_local_1_out_ap_vld,
        w2_local_1_out,
        w2_local_1_out_ap_vld,
        w2_local_out,
        w2_local_out_ap_vld,
        w1_local_1_out,
        w1_local_1_out_ap_vld,
        w1_local_out,
        w1_local_out_ap_vld,
        bias_2_local_out,
        bias_2_local_out_ap_vld,
        bias_1_local_out,
        bias_1_local_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] w1_address0;
output   w1_ce0;
input  [15:0] w1_q0;
output  [1:0] w1_address1;
output   w1_ce1;
input  [15:0] w1_q1;
output  [1:0] w2_address0;
output   w2_ce0;
input  [15:0] w2_q0;
output  [1:0] w2_address1;
output   w2_ce1;
input  [15:0] w2_q1;
output  [0:0] bias_1_address0;
output   bias_1_ce0;
input  [15:0] bias_1_q0;
output  [0:0] bias_2_address0;
output   bias_2_ce0;
input  [15:0] bias_2_q0;
output  [15:0] w2_local_3_out;
output   w2_local_3_out_ap_vld;
output  [15:0] w2_local_2_out;
output   w2_local_2_out_ap_vld;
output  [15:0] w1_local_3_out;
output   w1_local_3_out_ap_vld;
output  [15:0] w1_local_2_out;
output   w1_local_2_out_ap_vld;
output  [15:0] bias_2_local_1_out;
output   bias_2_local_1_out_ap_vld;
output  [15:0] bias_1_local_1_out;
output   bias_1_local_1_out_ap_vld;
output  [15:0] w2_local_1_out;
output   w2_local_1_out_ap_vld;
output  [15:0] w2_local_out;
output   w2_local_out_ap_vld;
output  [15:0] w1_local_1_out;
output   w1_local_1_out_ap_vld;
output  [15:0] w1_local_out;
output   w1_local_out_ap_vld;
output  [15:0] bias_2_local_out;
output   bias_2_local_out_ap_vld;
output  [15:0] bias_1_local_out;
output   bias_1_local_out_ap_vld;

reg ap_idle;
reg w2_local_3_out_ap_vld;
reg w2_local_2_out_ap_vld;
reg w1_local_3_out_ap_vld;
reg w1_local_2_out_ap_vld;
reg bias_2_local_1_out_ap_vld;
reg bias_1_local_1_out_ap_vld;
reg w2_local_1_out_ap_vld;
reg w2_local_out_ap_vld;
reg w1_local_1_out_ap_vld;
reg w1_local_out_ap_vld;
reg bias_2_local_out_ap_vld;
reg bias_1_local_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln47_fu_350_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln48_fu_398_p2;
reg   [0:0] icmp_ln48_reg_768;
wire   [63:0] zext_ln51_fu_378_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln51_1_fu_392_p1;
wire   [63:0] zext_ln47_fu_366_p1;
reg   [1:0] n_fu_70;
wire   [1:0] add_ln47_fu_356_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_n_1;
reg   [15:0] bias_1_local_fu_74;
wire   [15:0] select_ln48_11_fu_522_p3;
reg   [15:0] bias_2_local_fu_78;
wire   [15:0] select_ln48_10_fu_515_p3;
reg   [15:0] w1_local_fu_82;
wire   [15:0] select_ln48_9_fu_508_p3;
reg   [15:0] w1_local_1_fu_86;
wire   [15:0] select_ln48_8_fu_501_p3;
reg   [15:0] w2_local_fu_90;
wire   [15:0] select_ln48_7_fu_494_p3;
reg   [15:0] w2_local_1_fu_94;
wire   [15:0] select_ln48_6_fu_487_p3;
reg   [15:0] bias_1_local_1_fu_98;
wire   [15:0] select_ln48_5_fu_480_p3;
reg   [15:0] bias_2_local_1_fu_102;
wire   [15:0] select_ln48_4_fu_473_p3;
reg   [15:0] w1_local_2_fu_106;
wire   [15:0] select_ln48_3_fu_466_p3;
reg   [15:0] w1_local_3_fu_110;
wire   [15:0] select_ln48_2_fu_459_p3;
reg   [15:0] w2_local_2_fu_114;
wire   [15:0] select_ln48_1_fu_452_p3;
reg   [15:0] w2_local_3_fu_118;
wire   [15:0] select_ln48_fu_445_p3;
wire    ap_block_pp0_stage0_01001;
reg    bias_1_ce0_local;
reg    bias_2_ce0_local;
reg    w1_ce1_local;
reg    w1_ce0_local;
reg    w2_ce1_local;
reg    w2_ce0_local;
wire   [1:0] shl_ln51_fu_372_p2;
wire   [0:0] trunc_ln47_fu_362_p1;
wire   [1:0] tmp_s_fu_384_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 n_fu_70 = 2'd0;
#0 bias_1_local_fu_74 = 16'd0;
#0 bias_2_local_fu_78 = 16'd0;
#0 w1_local_fu_82 = 16'd0;
#0 w1_local_1_fu_86 = 16'd0;
#0 w2_local_fu_90 = 16'd0;
#0 w2_local_1_fu_94 = 16'd0;
#0 bias_1_local_1_fu_98 = 16'd0;
#0 bias_2_local_1_fu_102 = 16'd0;
#0 w1_local_2_fu_106 = 16'd0;
#0 w1_local_3_fu_110 = 16'd0;
#0 w2_local_2_fu_114 = 16'd0;
#0 w2_local_3_fu_118 = 16'd0;
#0 ap_done_reg = 1'b0;
end

accelerator_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            bias_1_local_1_fu_98 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            bias_1_local_1_fu_98 <= select_ln48_5_fu_480_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            bias_1_local_fu_74 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            bias_1_local_fu_74 <= select_ln48_11_fu_522_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            bias_2_local_1_fu_102 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            bias_2_local_1_fu_102 <= select_ln48_4_fu_473_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            bias_2_local_fu_78 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            bias_2_local_fu_78 <= select_ln48_10_fu_515_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln47_fu_350_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            n_fu_70 <= add_ln47_fu_356_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n_fu_70 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            w1_local_1_fu_86 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            w1_local_1_fu_86 <= select_ln48_8_fu_501_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            w1_local_2_fu_106 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            w1_local_2_fu_106 <= select_ln48_3_fu_466_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            w1_local_3_fu_110 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            w1_local_3_fu_110 <= select_ln48_2_fu_459_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            w1_local_fu_82 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            w1_local_fu_82 <= select_ln48_9_fu_508_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            w2_local_1_fu_94 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            w2_local_1_fu_94 <= select_ln48_6_fu_487_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            w2_local_2_fu_114 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            w2_local_2_fu_114 <= select_ln48_1_fu_452_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            w2_local_3_fu_118 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            w2_local_3_fu_118 <= select_ln48_fu_445_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            w2_local_fu_90 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            w2_local_fu_90 <= select_ln48_7_fu_494_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln48_reg_768 <= icmp_ln48_fu_398_p2;
    end
end

always @ (*) begin
    if (((icmp_ln47_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_n_1 = 2'd0;
    end else begin
        ap_sig_allocacmp_n_1 = n_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_1_ce0_local = 1'b1;
    end else begin
        bias_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln47_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_1_local_1_out_ap_vld = 1'b1;
    end else begin
        bias_1_local_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln47_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_1_local_out_ap_vld = 1'b1;
    end else begin
        bias_1_local_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_2_ce0_local = 1'b1;
    end else begin
        bias_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln47_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_2_local_1_out_ap_vld = 1'b1;
    end else begin
        bias_2_local_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln47_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_2_local_out_ap_vld = 1'b1;
    end else begin
        bias_2_local_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w1_ce0_local = 1'b1;
    end else begin
        w1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w1_ce1_local = 1'b1;
    end else begin
        w1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln47_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w1_local_1_out_ap_vld = 1'b1;
    end else begin
        w1_local_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln47_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w1_local_2_out_ap_vld = 1'b1;
    end else begin
        w1_local_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln47_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w1_local_3_out_ap_vld = 1'b1;
    end else begin
        w1_local_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln47_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w1_local_out_ap_vld = 1'b1;
    end else begin
        w1_local_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w2_ce0_local = 1'b1;
    end else begin
        w2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w2_ce1_local = 1'b1;
    end else begin
        w2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln47_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w2_local_1_out_ap_vld = 1'b1;
    end else begin
        w2_local_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln47_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w2_local_2_out_ap_vld = 1'b1;
    end else begin
        w2_local_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln47_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w2_local_3_out_ap_vld = 1'b1;
    end else begin
        w2_local_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln47_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w2_local_out_ap_vld = 1'b1;
    end else begin
        w2_local_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln47_fu_356_p2 = (ap_sig_allocacmp_n_1 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign bias_1_address0 = zext_ln47_fu_366_p1;

assign bias_1_ce0 = bias_1_ce0_local;

assign bias_1_local_1_out = bias_1_local_1_fu_98;

assign bias_1_local_out = bias_1_local_fu_74;

assign bias_2_address0 = zext_ln47_fu_366_p1;

assign bias_2_ce0 = bias_2_ce0_local;

assign bias_2_local_1_out = bias_2_local_1_fu_102;

assign bias_2_local_out = bias_2_local_fu_78;

assign icmp_ln47_fu_350_p2 = ((ap_sig_allocacmp_n_1 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_398_p2 = ((ap_sig_allocacmp_n_1 == 2'd0) ? 1'b1 : 1'b0);

assign select_ln48_10_fu_515_p3 = ((icmp_ln48_reg_768[0:0] == 1'b1) ? bias_2_local_fu_78 : bias_2_q0);

assign select_ln48_11_fu_522_p3 = ((icmp_ln48_reg_768[0:0] == 1'b1) ? bias_1_local_fu_74 : bias_1_q0);

assign select_ln48_1_fu_452_p3 = ((icmp_ln48_reg_768[0:0] == 1'b1) ? w2_q1 : w2_local_2_fu_114);

assign select_ln48_2_fu_459_p3 = ((icmp_ln48_reg_768[0:0] == 1'b1) ? w1_q0 : w1_local_3_fu_110);

assign select_ln48_3_fu_466_p3 = ((icmp_ln48_reg_768[0:0] == 1'b1) ? w1_q1 : w1_local_2_fu_106);

assign select_ln48_4_fu_473_p3 = ((icmp_ln48_reg_768[0:0] == 1'b1) ? bias_2_q0 : bias_2_local_1_fu_102);

assign select_ln48_5_fu_480_p3 = ((icmp_ln48_reg_768[0:0] == 1'b1) ? bias_1_q0 : bias_1_local_1_fu_98);

assign select_ln48_6_fu_487_p3 = ((icmp_ln48_reg_768[0:0] == 1'b1) ? w2_local_1_fu_94 : w2_q0);

assign select_ln48_7_fu_494_p3 = ((icmp_ln48_reg_768[0:0] == 1'b1) ? w2_local_fu_90 : w2_q1);

assign select_ln48_8_fu_501_p3 = ((icmp_ln48_reg_768[0:0] == 1'b1) ? w1_local_1_fu_86 : w1_q0);

assign select_ln48_9_fu_508_p3 = ((icmp_ln48_reg_768[0:0] == 1'b1) ? w1_local_fu_82 : w1_q1);

assign select_ln48_fu_445_p3 = ((icmp_ln48_reg_768[0:0] == 1'b1) ? w2_q0 : w2_local_3_fu_118);

assign shl_ln51_fu_372_p2 = ap_sig_allocacmp_n_1 << 2'd1;

assign tmp_s_fu_384_p3 = {{trunc_ln47_fu_362_p1}, {1'd1}};

assign trunc_ln47_fu_362_p1 = ap_sig_allocacmp_n_1[0:0];

assign w1_address0 = zext_ln51_1_fu_392_p1;

assign w1_address1 = zext_ln51_fu_378_p1;

assign w1_ce0 = w1_ce0_local;

assign w1_ce1 = w1_ce1_local;

assign w1_local_1_out = w1_local_1_fu_86;

assign w1_local_2_out = w1_local_2_fu_106;

assign w1_local_3_out = w1_local_3_fu_110;

assign w1_local_out = w1_local_fu_82;

assign w2_address0 = zext_ln51_1_fu_392_p1;

assign w2_address1 = zext_ln51_fu_378_p1;

assign w2_ce0 = w2_ce0_local;

assign w2_ce1 = w2_ce1_local;

assign w2_local_1_out = w2_local_1_fu_94;

assign w2_local_2_out = w2_local_2_fu_114;

assign w2_local_3_out = w2_local_3_fu_118;

assign w2_local_out = w2_local_fu_90;

assign zext_ln47_fu_366_p1 = ap_sig_allocacmp_n_1;

assign zext_ln51_1_fu_392_p1 = tmp_s_fu_384_p3;

assign zext_ln51_fu_378_p1 = shl_ln51_fu_372_p2;

endmodule //accelerator_accelerator_Pipeline_VITIS_LOOP_47_1
