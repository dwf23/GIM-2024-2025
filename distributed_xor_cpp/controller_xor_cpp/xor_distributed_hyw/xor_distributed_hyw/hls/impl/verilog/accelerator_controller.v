// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="accelerator_controller_accelerator_controller,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sfvc784-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.929000,HLS_SYN_LAT=54,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=298,HLS_SYN_LUT=600,HLS_VERSION=2024_1}" *)

module accelerator_controller (
        ap_clk,
        ap_rst_n,
        w1_address0,
        w1_ce0,
        w1_q0,
        w1_address1,
        w1_ce1,
        w1_q1,
        bias_1_address0,
        bias_1_ce0,
        bias_1_q0,
        training,
        data_out_din,
        data_out_full_n,
        data_out_write,
        data_in,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [1:0] w1_address0;
output   w1_ce0;
input  [15:0] w1_q0;
output  [1:0] w1_address1;
output   w1_ce1;
input  [15:0] w1_q1;
output  [0:0] bias_1_address0;
output   bias_1_ce0;
input  [15:0] bias_1_q0;
input  [15:0] training;
output  [63:0] data_out_din;
input   data_out_full_n;
output   data_out_write;
input  [63:0] data_in;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg data_out_write;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [0:0] expecting_input;
wire   [0:0] cmp_i_i58_fu_156_p2;
reg   [0:0] cmp_i_i58_reg_242;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln57_fu_165_p2;
reg   [0:0] icmp_ln57_reg_247;
wire    ap_CS_fsm_state4;
wire   [3:0] i_2_fu_171_p2;
reg   [3:0] i_2_reg_251;
wire    grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_start;
wire    grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_done;
wire    grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_idle;
wire    grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_ready;
wire   [1:0] grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_address0;
wire    grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_ce0;
wire   [1:0] grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_address1;
wire    grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_ce1;
wire   [0:0] grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_bias_1_address0;
wire    grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_bias_1_ce0;
wire   [15:0] grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_4_out;
wire    grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_4_out_ap_vld;
wire   [15:0] grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_out;
wire    grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_out_ap_vld;
wire   [15:0] grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_6_out;
wire    grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_6_out_ap_vld;
wire   [15:0] grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_5_out;
wire    grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_5_out_ap_vld;
wire   [15:0] grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_array_back1_bias_change_1_out;
wire    grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_array_back1_bias_change_1_out_ap_vld;
wire   [15:0] grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_array_back1_bias_change_out;
wire    grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_array_back1_bias_change_out_ap_vld;
wire    grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_start;
wire    grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_done;
wire    grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_idle;
wire    grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_ready;
wire   [63:0] grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_data_out_din;
wire    grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_data_out_write;
reg    grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_start_reg;
wire    ap_CS_fsm_state5;
reg   [3:0] i_fu_72;
reg    ap_block_state5_on_subcall_done;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_start_reg = 1'b0;
#0 grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_start_reg = 1'b0;
#0 i_fu_72 = 4'd0;
end

accelerator_controller_accelerator_controller_Pipeline_VITIS_LOOP_26_1 grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_start),
    .ap_done(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_done),
    .ap_idle(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_idle),
    .ap_ready(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_ready),
    .w1_address0(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_address0),
    .w1_ce0(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_ce0),
    .w1_q0(w1_q0),
    .w1_address1(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_address1),
    .w1_ce1(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_ce1),
    .w1_q1(w1_q1),
    .bias_1_address0(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_bias_1_address0),
    .bias_1_ce0(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_bias_1_ce0),
    .bias_1_q0(bias_1_q0),
    .w1_local_4_out(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_4_out),
    .w1_local_4_out_ap_vld(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_4_out_ap_vld),
    .w1_local_out(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_out),
    .w1_local_out_ap_vld(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_out_ap_vld),
    .w1_local_6_out(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_6_out),
    .w1_local_6_out_ap_vld(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_6_out_ap_vld),
    .w1_local_5_out(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_5_out),
    .w1_local_5_out_ap_vld(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_5_out_ap_vld),
    .array_back1_bias_change_1_out(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_array_back1_bias_change_1_out),
    .array_back1_bias_change_1_out_ap_vld(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_array_back1_bias_change_1_out_ap_vld),
    .array_back1_bias_change_out(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_array_back1_bias_change_out),
    .array_back1_bias_change_out_ap_vld(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_array_back1_bias_change_out_ap_vld)
);

accelerator_controller_accelerator_controller_Pipeline_VITIS_LOOP_60_4 grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_start),
    .ap_done(grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_done),
    .ap_idle(grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_idle),
    .ap_ready(grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_ready),
    .sext_ln13(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_out),
    .sext_ln13_1(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_4_out),
    .array_back1_bias_change_reload(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_array_back1_bias_change_out),
    .sext_ln13_2(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_5_out),
    .sext_ln13_3(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_6_out),
    .array_back1_bias_change_1_reload(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_array_back1_bias_change_1_out),
    .data_out_din(grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_data_out_din),
    .data_out_full_n(data_out_full_n),
    .data_out_write(grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_data_out_write),
    .cmp_i_i58(cmp_i_i58_reg_242)
);

accelerator_controller_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .expecting_input(expecting_input),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_start_reg <= 1'b1;
        end else if ((grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_ready == 1'b1)) begin
            grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln57_fu_165_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_start_reg <= 1'b1;
        end else if ((grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_ready == 1'b1)) begin
            grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_72 <= 4'd0;
    end else if (((icmp_ln57_reg_247 == 1'd0) & (cmp_i_i58_reg_242 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
        i_fu_72 <= i_2_reg_251;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cmp_i_i58_reg_242 <= cmp_i_i58_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_2_reg_251 <= i_2_fu_171_p2;
        icmp_ln57_reg_247 <= icmp_ln57_fu_165_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_on_subcall_done)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done) & ((icmp_ln57_reg_247 == 1'd1) | (cmp_i_i58_reg_242 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done) & ((icmp_ln57_reg_247 == 1'd1) | (cmp_i_i58_reg_242 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln57_reg_247 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        data_out_write = grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_data_out_write;
    end else begin
        data_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done) & ((icmp_ln57_reg_247 == 1'd1) | (cmp_i_i58_reg_242 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln57_reg_247 == 1'd0) & (cmp_i_i58_reg_242 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state5_on_subcall_done = ((grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_done == 1'b0) & (icmp_ln57_reg_247 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bias_1_address0 = grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_bias_1_address0;

assign bias_1_ce0 = grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_bias_1_ce0;

assign cmp_i_i58_fu_156_p2 = ((training == 16'd0) ? 1'b1 : 1'b0);

assign data_out_din = grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_data_out_din;

assign grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_start = grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_start_reg;

assign grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_start = grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_start_reg;

assign i_2_fu_171_p2 = (i_fu_72 + 4'd1);

assign icmp_ln57_fu_165_p2 = ((i_fu_72 == 4'd10) ? 1'b1 : 1'b0);

assign w1_address0 = grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_address0;

assign w1_address1 = grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_address1;

assign w1_ce0 = grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_ce0;

assign w1_ce1 = grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_ce1;

endmodule //accelerator_controller
