-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accelerator_accelerator_Pipeline_VITIS_LOOP_157_9 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_0_0_01214_3_1_lcssa : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_01214_3_lcssa : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_01217_3_1_lcssa : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_01217_3_lcssa : IN STD_LOGIC_VECTOR (15 downto 0);
    mux_case_1138 : IN STD_LOGIC_VECTOR (15 downto 0);
    mux_case_0137 : IN STD_LOGIC_VECTOR (15 downto 0);
    mux_case_1140 : IN STD_LOGIC_VECTOR (15 downto 0);
    mux_case_0139 : IN STD_LOGIC_VECTOR (15 downto 0);
    mux_case_1142 : IN STD_LOGIC_VECTOR (15 downto 0);
    mux_case_0141 : IN STD_LOGIC_VECTOR (15 downto 0);
    mux_case_1144 : IN STD_LOGIC_VECTOR (15 downto 0);
    mux_case_0143 : IN STD_LOGIC_VECTOR (15 downto 0);
    retval_4_1_0_0_0_load175_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    retval_4_1_0_0_0_load175_out_ap_vld : OUT STD_LOGIC;
    retval_4_0_0_0_0_load173_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    retval_4_0_0_0_0_load173_out_ap_vld : OUT STD_LOGIC;
    retval_3_1_0_0_0_load171_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    retval_3_1_0_0_0_load171_out_ap_vld : OUT STD_LOGIC;
    retval_3_0_0_0_0_load169_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    retval_3_0_0_0_0_load169_out_ap_vld : OUT STD_LOGIC;
    retval_2_1_1_0_0_0_load167_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    retval_2_1_1_0_0_0_load167_out_ap_vld : OUT STD_LOGIC;
    retval_2_1_0_0_0_0_load165_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    retval_2_1_0_0_0_0_load165_out_ap_vld : OUT STD_LOGIC;
    retval_2_0_1_0_0_0_load163_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    retval_2_0_1_0_0_0_load163_out_ap_vld : OUT STD_LOGIC;
    retval_2_0_0_0_0_0_load161_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    retval_2_0_0_0_0_0_load161_out_ap_vld : OUT STD_LOGIC;
    retval_1_1_1_0_0_0_load159_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    retval_1_1_1_0_0_0_load159_out_ap_vld : OUT STD_LOGIC;
    retval_1_1_0_0_0_0_load157_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    retval_1_1_0_0_0_0_load157_out_ap_vld : OUT STD_LOGIC;
    retval_1_0_1_0_0_0_load155_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    retval_1_0_1_0_0_0_load155_out_ap_vld : OUT STD_LOGIC;
    retval_1_0_0_0_0_0_load153_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    retval_1_0_0_0_0_0_load153_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of accelerator_accelerator_Pipeline_VITIS_LOOP_157_9 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln157_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal n_1_fu_76 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln157_fu_298_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n : STD_LOGIC_VECTOR (1 downto 0);
    signal retval_1_0_0_0_0_0_load153_fu_80 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal select_ln158_2_fu_416_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal retval_1_0_1_0_0_0_load155_fu_84 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal select_ln158_9_fu_472_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal retval_1_1_0_0_0_0_load157_fu_88 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal select_ln158_3_fu_424_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal retval_1_1_1_0_0_0_load159_fu_92 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal select_ln158_8_fu_464_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal retval_2_0_0_0_0_0_load161_fu_96 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal select_ln158_fu_400_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal retval_2_0_1_0_0_0_load163_fu_100 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal select_ln158_11_fu_488_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal retval_2_1_0_0_0_0_load165_fu_104 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal select_ln158_1_fu_408_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal retval_2_1_1_0_0_0_load167_fu_108 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal select_ln158_10_fu_480_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal retval_3_0_0_0_0_load169_fu_112 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal select_ln158_4_fu_432_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal retval_3_1_0_0_0_load171_fu_116 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal select_ln158_5_fu_440_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal retval_4_0_0_0_0_load173_fu_120 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal select_ln158_7_fu_456_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal retval_4_1_0_0_0_load175_fu_124 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal select_ln158_6_fu_448_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln158_1_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_array_new_w2_fu_384_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_array_new_w1_fu_368_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_array_new_b1_fu_346_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_array_new_b2_fu_360_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_array_new_w1_1_fu_376_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_array_new_w2_1_fu_392_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component accelerator_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component accelerator_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    n_1_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln157_fu_292_p2 = ap_const_lv1_0)) then 
                    n_1_fu_76 <= add_ln157_fu_298_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_1_fu_76 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln157_fu_292_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                retval_1_0_0_0_0_0_load153_fu_80 <= select_ln158_2_fu_416_p3;
                retval_1_0_1_0_0_0_load155_fu_84 <= select_ln158_9_fu_472_p3;
                retval_1_1_0_0_0_0_load157_fu_88 <= select_ln158_3_fu_424_p3;
                retval_1_1_1_0_0_0_load159_fu_92 <= select_ln158_8_fu_464_p3;
                retval_2_0_0_0_0_0_load161_fu_96 <= select_ln158_fu_400_p3;
                retval_2_0_1_0_0_0_load163_fu_100 <= select_ln158_11_fu_488_p3;
                retval_2_1_0_0_0_0_load165_fu_104 <= select_ln158_1_fu_408_p3;
                retval_2_1_1_0_0_0_load167_fu_108 <= select_ln158_10_fu_480_p3;
                retval_3_0_0_0_0_load169_fu_112 <= select_ln158_4_fu_432_p3;
                retval_3_1_0_0_0_load171_fu_116 <= select_ln158_5_fu_440_p3;
                retval_4_0_0_0_0_load173_fu_120 <= select_ln158_7_fu_456_p3;
                retval_4_1_0_0_0_load175_fu_124 <= select_ln158_6_fu_448_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln157_fu_298_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln157_fu_292_p2)
    begin
        if (((icmp_ln157_fu_292_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n_assign_proc : process(ap_CS_fsm_state1, n_1_fu_76, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_n <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_n <= n_1_fu_76;
        end if; 
    end process;

    icmp_ln157_fu_292_p2 <= "1" when (ap_sig_allocacmp_n = ap_const_lv2_2) else "0";
    icmp_ln158_1_fu_340_p2 <= "1" when (ap_sig_allocacmp_n = ap_const_lv2_1) else "0";
    icmp_ln158_fu_354_p2 <= "1" when (ap_sig_allocacmp_n = ap_const_lv2_0) else "0";
    output_array_new_b1_fu_346_p3 <= 
        p_0_0_01214_3_1_lcssa when (icmp_ln158_1_fu_340_p2(0) = '1') else 
        p_0_0_01214_3_lcssa;
    output_array_new_b2_fu_360_p3 <= 
        p_0_0_01217_3_1_lcssa when (icmp_ln158_1_fu_340_p2(0) = '1') else 
        p_0_0_01217_3_lcssa;
    output_array_new_w1_1_fu_376_p3 <= 
        mux_case_1140 when (icmp_ln158_1_fu_340_p2(0) = '1') else 
        mux_case_0139;
    output_array_new_w1_fu_368_p3 <= 
        mux_case_1138 when (icmp_ln158_1_fu_340_p2(0) = '1') else 
        mux_case_0137;
    output_array_new_w2_1_fu_392_p3 <= 
        mux_case_1144 when (icmp_ln158_1_fu_340_p2(0) = '1') else 
        mux_case_0143;
    output_array_new_w2_fu_384_p3 <= 
        mux_case_1142 when (icmp_ln158_1_fu_340_p2(0) = '1') else 
        mux_case_0141;
    retval_1_0_0_0_0_0_load153_out <= retval_1_0_0_0_0_0_load153_fu_80;

    retval_1_0_0_0_0_0_load153_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln157_fu_292_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln157_fu_292_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            retval_1_0_0_0_0_0_load153_out_ap_vld <= ap_const_logic_1;
        else 
            retval_1_0_0_0_0_0_load153_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    retval_1_0_1_0_0_0_load155_out <= retval_1_0_1_0_0_0_load155_fu_84;

    retval_1_0_1_0_0_0_load155_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln157_fu_292_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln157_fu_292_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            retval_1_0_1_0_0_0_load155_out_ap_vld <= ap_const_logic_1;
        else 
            retval_1_0_1_0_0_0_load155_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    retval_1_1_0_0_0_0_load157_out <= retval_1_1_0_0_0_0_load157_fu_88;

    retval_1_1_0_0_0_0_load157_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln157_fu_292_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln157_fu_292_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            retval_1_1_0_0_0_0_load157_out_ap_vld <= ap_const_logic_1;
        else 
            retval_1_1_0_0_0_0_load157_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    retval_1_1_1_0_0_0_load159_out <= retval_1_1_1_0_0_0_load159_fu_92;

    retval_1_1_1_0_0_0_load159_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln157_fu_292_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln157_fu_292_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            retval_1_1_1_0_0_0_load159_out_ap_vld <= ap_const_logic_1;
        else 
            retval_1_1_1_0_0_0_load159_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    retval_2_0_0_0_0_0_load161_out <= retval_2_0_0_0_0_0_load161_fu_96;

    retval_2_0_0_0_0_0_load161_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln157_fu_292_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln157_fu_292_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            retval_2_0_0_0_0_0_load161_out_ap_vld <= ap_const_logic_1;
        else 
            retval_2_0_0_0_0_0_load161_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    retval_2_0_1_0_0_0_load163_out <= retval_2_0_1_0_0_0_load163_fu_100;

    retval_2_0_1_0_0_0_load163_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln157_fu_292_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln157_fu_292_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            retval_2_0_1_0_0_0_load163_out_ap_vld <= ap_const_logic_1;
        else 
            retval_2_0_1_0_0_0_load163_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    retval_2_1_0_0_0_0_load165_out <= retval_2_1_0_0_0_0_load165_fu_104;

    retval_2_1_0_0_0_0_load165_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln157_fu_292_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln157_fu_292_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            retval_2_1_0_0_0_0_load165_out_ap_vld <= ap_const_logic_1;
        else 
            retval_2_1_0_0_0_0_load165_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    retval_2_1_1_0_0_0_load167_out <= retval_2_1_1_0_0_0_load167_fu_108;

    retval_2_1_1_0_0_0_load167_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln157_fu_292_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln157_fu_292_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            retval_2_1_1_0_0_0_load167_out_ap_vld <= ap_const_logic_1;
        else 
            retval_2_1_1_0_0_0_load167_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    retval_3_0_0_0_0_load169_out <= retval_3_0_0_0_0_load169_fu_112;

    retval_3_0_0_0_0_load169_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln157_fu_292_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln157_fu_292_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            retval_3_0_0_0_0_load169_out_ap_vld <= ap_const_logic_1;
        else 
            retval_3_0_0_0_0_load169_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    retval_3_1_0_0_0_load171_out <= retval_3_1_0_0_0_load171_fu_116;

    retval_3_1_0_0_0_load171_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln157_fu_292_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln157_fu_292_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            retval_3_1_0_0_0_load171_out_ap_vld <= ap_const_logic_1;
        else 
            retval_3_1_0_0_0_load171_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    retval_4_0_0_0_0_load173_out <= retval_4_0_0_0_0_load173_fu_120;

    retval_4_0_0_0_0_load173_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln157_fu_292_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln157_fu_292_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            retval_4_0_0_0_0_load173_out_ap_vld <= ap_const_logic_1;
        else 
            retval_4_0_0_0_0_load173_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    retval_4_1_0_0_0_load175_out <= retval_4_1_0_0_0_load175_fu_124;

    retval_4_1_0_0_0_load175_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln157_fu_292_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln157_fu_292_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            retval_4_1_0_0_0_load175_out_ap_vld <= ap_const_logic_1;
        else 
            retval_4_1_0_0_0_load175_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln158_10_fu_480_p3 <= 
        retval_2_1_1_0_0_0_load167_fu_108 when (icmp_ln158_fu_354_p2(0) = '1') else 
        output_array_new_w2_1_fu_392_p3;
    select_ln158_11_fu_488_p3 <= 
        output_array_new_w2_1_fu_392_p3 when (icmp_ln158_fu_354_p2(0) = '1') else 
        retval_2_0_1_0_0_0_load163_fu_100;
    select_ln158_1_fu_408_p3 <= 
        retval_2_1_0_0_0_0_load165_fu_104 when (icmp_ln158_fu_354_p2(0) = '1') else 
        output_array_new_w2_fu_384_p3;
    select_ln158_2_fu_416_p3 <= 
        output_array_new_w1_fu_368_p3 when (icmp_ln158_fu_354_p2(0) = '1') else 
        retval_1_0_0_0_0_0_load153_fu_80;
    select_ln158_3_fu_424_p3 <= 
        retval_1_1_0_0_0_0_load157_fu_88 when (icmp_ln158_fu_354_p2(0) = '1') else 
        output_array_new_w1_fu_368_p3;
    select_ln158_4_fu_432_p3 <= 
        output_array_new_b1_fu_346_p3 when (icmp_ln158_fu_354_p2(0) = '1') else 
        retval_3_0_0_0_0_load169_fu_112;
    select_ln158_5_fu_440_p3 <= 
        retval_3_1_0_0_0_load171_fu_116 when (icmp_ln158_fu_354_p2(0) = '1') else 
        output_array_new_b1_fu_346_p3;
    select_ln158_6_fu_448_p3 <= 
        retval_4_1_0_0_0_load175_fu_124 when (icmp_ln158_fu_354_p2(0) = '1') else 
        output_array_new_b2_fu_360_p3;
    select_ln158_7_fu_456_p3 <= 
        output_array_new_b2_fu_360_p3 when (icmp_ln158_fu_354_p2(0) = '1') else 
        retval_4_0_0_0_0_load173_fu_120;
    select_ln158_8_fu_464_p3 <= 
        retval_1_1_1_0_0_0_load159_fu_92 when (icmp_ln158_fu_354_p2(0) = '1') else 
        output_array_new_w1_1_fu_376_p3;
    select_ln158_9_fu_472_p3 <= 
        output_array_new_w1_1_fu_376_p3 when (icmp_ln158_fu_354_p2(0) = '1') else 
        retval_1_0_1_0_0_0_load155_fu_84;
    select_ln158_fu_400_p3 <= 
        output_array_new_w2_fu_384_p3 when (icmp_ln158_fu_354_p2(0) = '1') else 
        retval_2_0_0_0_0_0_load161_fu_96;
end behav;
