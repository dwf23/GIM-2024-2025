// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module accelerator_controller_accelerator_controller_Pipeline_VITIS_LOOP_60_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln13,
        sext_ln13_1,
        array_back1_bias_change_reload,
        sext_ln13_2,
        sext_ln13_3,
        array_back1_bias_change_1_reload,
        data_out_din,
        data_out_full_n,
        data_out_write,
        cmp_i_i58
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] sext_ln13;
input  [15:0] sext_ln13_1;
input  [15:0] array_back1_bias_change_reload;
input  [15:0] sext_ln13_2;
input  [15:0] sext_ln13_3;
input  [15:0] array_back1_bias_change_1_reload;
output  [63:0] data_out_din;
input   data_out_full_n;
output   data_out_write;
input  [0:0] cmp_i_i58;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] and_ln109_fu_221_p2;
wire   [0:0] icmp_ln60_fu_171_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire  signed [27:0] sext_ln13_2_cast_fu_151_p1;
reg  signed [27:0] sext_ln13_2_cast_reg_466;
wire  signed [27:0] sext_ln13_cast_fu_159_p1;
reg  signed [27:0] sext_ln13_cast_reg_476;
reg   [0:0] icmp_ln60_reg_481;
reg   [0:0] icmp_ln60_reg_481_pp0_iter1_reg;
reg   [0:0] icmp_ln60_reg_481_pp0_iter2_reg;
wire   [1:0] trunc_ln60_fu_183_p1;
reg   [1:0] trunc_ln60_reg_485;
reg   [1:0] trunc_ln60_reg_485_pp0_iter1_reg;
wire   [27:0] zext_ln13_1_fu_211_p1;
reg   [2:0] j_fu_94;
wire   [2:0] add_ln60_fu_177_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln81_fu_421_p1;
wire    ap_block_pp0_stage0_01001;
reg    data_out_write_local;
wire   [12:0] zext_ln13_1_cast_fu_187_p9;
wire   [1:0] zext_ln13_1_cast_fu_187_p10;
wire   [12:0] zext_ln13_1_cast_fu_187_p11;
wire   [0:0] icmp_ln109_fu_215_p2;
wire   [12:0] zext_ln13_cast_fu_232_p9;
wire   [12:0] zext_ln13_cast_fu_232_p11;
wire  signed [15:0] mul_ln13_fu_259_p0;
wire   [12:0] mul_ln13_fu_259_p1;
wire   [27:0] zext_ln13_fu_255_p1;
wire   [27:0] mul_ln13_fu_259_p2;
wire   [15:0] tmp_2_fu_264_p4;
wire  signed [15:0] mul_ln13_2_fu_282_p0;
wire   [12:0] mul_ln13_2_fu_282_p1;
wire   [27:0] mul_ln13_2_fu_282_p2;
wire   [15:0] tmp_3_fu_287_p4;
wire  signed [27:0] trunc_ln1_fu_305_p1;
wire   [27:0] grp_fu_426_p3;
wire   [15:0] trunc_ln1_fu_305_p4;
wire  signed [15:0] add_ln13_1_fu_314_p2;
wire   [9:0] mul_ln22_fu_331_p1;
wire   [25:0] mul_ln22_fu_331_p2;
wire   [13:0] trunc_ln2_fu_337_p4;
wire   [0:0] tmp_fu_319_p3;
wire  signed [15:0] sext_ln22_1_fu_347_p1;
wire  signed [27:0] weight_out_sum_output_out_fu_359_p1;
wire   [27:0] grp_fu_435_p3;
wire   [15:0] weight_out_sum_output_out_fu_359_p4;
wire  signed [15:0] bias_out_net_sum_fu_368_p2;
wire   [9:0] mul_ln22_1_fu_385_p1;
wire   [25:0] mul_ln22_1_fu_385_p2;
wire   [13:0] output_fu_391_p4;
wire   [0:0] tmp_1_fu_373_p3;
wire  signed [15:0] sext_ln22_3_fu_401_p1;
wire   [15:0] output_2_fu_405_p3;
wire   [15:0] array_out1_output_k_fu_351_p3;
wire   [31:0] tmp_4_fu_413_p3;
wire   [12:0] grp_fu_426_p1;
wire   [27:0] grp_fu_426_p2;
wire   [12:0] grp_fu_435_p1;
wire   [27:0] grp_fu_435_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_374;
wire   [1:0] zext_ln13_1_cast_fu_187_p1;
wire   [1:0] zext_ln13_1_cast_fu_187_p3;
wire  signed [1:0] zext_ln13_1_cast_fu_187_p5;
wire  signed [1:0] zext_ln13_1_cast_fu_187_p7;
wire   [1:0] zext_ln13_cast_fu_232_p1;
wire   [1:0] zext_ln13_cast_fu_232_p3;
wire  signed [1:0] zext_ln13_cast_fu_232_p5;
wire  signed [1:0] zext_ln13_cast_fu_232_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 j_fu_94 = 3'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) accelerator_controller_sparsemux_9_2_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 13 ))
sparsemux_9_2_13_1_1_U9(
    .din0(13'd0),
    .din1(13'd4096),
    .din2(13'd0),
    .din3(13'd4096),
    .def(zext_ln13_1_cast_fu_187_p9),
    .sel(zext_ln13_1_cast_fu_187_p10),
    .dout(zext_ln13_1_cast_fu_187_p11)
);

(* dissolve_hierarchy = "yes" *) accelerator_controller_sparsemux_9_2_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 13 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 13 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 13 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 13 ),
    .def_WIDTH( 13 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 13 ))
sparsemux_9_2_13_1_1_U10(
    .din0(13'd0),
    .din1(13'd0),
    .din2(13'd4096),
    .din3(13'd4096),
    .def(zext_ln13_cast_fu_232_p9),
    .sel(trunc_ln60_reg_485_pp0_iter1_reg),
    .dout(zext_ln13_cast_fu_232_p11)
);

accelerator_controller_mul_16s_13ns_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 28 ))
mul_16s_13ns_28_1_1_U11(
    .din0(mul_ln13_fu_259_p0),
    .din1(mul_ln13_fu_259_p1),
    .dout(mul_ln13_fu_259_p2)
);

accelerator_controller_mul_16s_13ns_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 28 ))
mul_16s_13ns_28_1_1_U12(
    .din0(mul_ln13_2_fu_282_p0),
    .din1(mul_ln13_2_fu_282_p1),
    .dout(mul_ln13_2_fu_282_p2)
);

accelerator_controller_mul_16s_10ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 26 ))
mul_16s_10ns_26_1_1_U13(
    .din0(add_ln13_1_fu_314_p2),
    .din1(mul_ln22_fu_331_p1),
    .dout(mul_ln22_fu_331_p2)
);

accelerator_controller_mul_16s_10ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 26 ))
mul_16s_10ns_26_1_1_U14(
    .din0(bias_out_net_sum_fu_368_p2),
    .din1(mul_ln22_1_fu_385_p1),
    .dout(mul_ln22_1_fu_385_p2)
);

accelerator_controller_mac_muladd_16s_13ns_28ns_28_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 13 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
mac_muladd_16s_13ns_28ns_28_4_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sext_ln13_1),
    .din1(grp_fu_426_p1),
    .din2(grp_fu_426_p2),
    .ce(1'b1),
    .dout(grp_fu_426_p3)
);

accelerator_controller_mac_muladd_16s_13ns_28ns_28_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 13 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
mac_muladd_16s_13ns_28ns_28_4_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sext_ln13_3),
    .din1(grp_fu_435_p1),
    .din2(grp_fu_435_p2),
    .ce(1'b1),
    .dout(grp_fu_435_p3)
);

accelerator_controller_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_374)) begin
            j_fu_94 <= add_ln60_fu_177_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_94 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln60_reg_481 <= icmp_ln60_fu_171_p2;
        icmp_ln60_reg_481_pp0_iter1_reg <= icmp_ln60_reg_481;
        sext_ln13_2_cast_reg_466 <= sext_ln13_2_cast_fu_151_p1;
        sext_ln13_cast_reg_476 <= sext_ln13_cast_fu_159_p1;
        trunc_ln60_reg_485 <= trunc_ln60_fu_183_p1;
        trunc_ln60_reg_485_pp0_iter1_reg <= trunc_ln60_reg_485;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln60_reg_481_pp0_iter2_reg <= icmp_ln60_reg_481_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((icmp_ln60_fu_171_p2 == 1'd1) | (1'd1 == and_ln109_fu_221_p2)))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_94;
    end
end

always @ (*) begin
    if (((icmp_ln60_reg_481_pp0_iter2_reg == 1'd0) & (data_out_full_n == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        data_out_write_local = 1'b1;
    end else begin
        data_out_write_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_1_fu_314_p2 = (trunc_ln1_fu_305_p4 + array_back1_bias_change_reload);

assign add_ln60_fu_177_p2 = (ap_sig_allocacmp_j_1 + 3'd1);

assign and_ln109_fu_221_p2 = (icmp_ln109_fu_215_p2 & cmp_i_i58);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_374 = ((icmp_ln60_fu_171_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'd0 == and_ln109_fu_221_p2));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign array_out1_output_k_fu_351_p3 = ((tmp_fu_319_p3[0:0] == 1'b1) ? sext_ln22_1_fu_347_p1 : add_ln13_1_fu_314_p2);

assign bias_out_net_sum_fu_368_p2 = (weight_out_sum_output_out_fu_359_p4 + array_back1_bias_change_1_reload);

assign data_out_din = zext_ln81_fu_421_p1;

assign data_out_write = data_out_write_local;

assign grp_fu_426_p1 = zext_ln13_1_fu_211_p1;

assign grp_fu_426_p2 = {{tmp_2_fu_264_p4}, {12'd0}};

assign grp_fu_435_p1 = zext_ln13_1_fu_211_p1;

assign grp_fu_435_p2 = {{tmp_3_fu_287_p4}, {12'd0}};

assign icmp_ln109_fu_215_p2 = ((ap_sig_allocacmp_j_1 == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_171_p2 = ((ap_sig_allocacmp_j_1 == 3'd4) ? 1'b1 : 1'b0);

assign mul_ln13_2_fu_282_p0 = sext_ln13_2_cast_reg_466;

assign mul_ln13_2_fu_282_p1 = zext_ln13_fu_255_p1;

assign mul_ln13_fu_259_p0 = sext_ln13_cast_reg_476;

assign mul_ln13_fu_259_p1 = zext_ln13_fu_255_p1;

assign mul_ln22_1_fu_385_p1 = 26'd409;

assign mul_ln22_fu_331_p1 = 26'd409;

assign output_2_fu_405_p3 = ((tmp_1_fu_373_p3[0:0] == 1'b1) ? sext_ln22_3_fu_401_p1 : bias_out_net_sum_fu_368_p2);

assign output_fu_391_p4 = {{mul_ln22_1_fu_385_p2[25:12]}};

assign sext_ln13_2_cast_fu_151_p1 = $signed(sext_ln13_2);

assign sext_ln13_cast_fu_159_p1 = $signed(sext_ln13);

assign sext_ln22_1_fu_347_p1 = $signed(trunc_ln2_fu_337_p4);

assign sext_ln22_3_fu_401_p1 = $signed(output_fu_391_p4);

assign tmp_1_fu_373_p3 = bias_out_net_sum_fu_368_p2[32'd15];

assign tmp_2_fu_264_p4 = {{mul_ln13_fu_259_p2[27:12]}};

assign tmp_3_fu_287_p4 = {{mul_ln13_2_fu_282_p2[27:12]}};

assign tmp_4_fu_413_p3 = {{output_2_fu_405_p3}, {array_out1_output_k_fu_351_p3}};

assign tmp_fu_319_p3 = add_ln13_1_fu_314_p2[32'd15];

assign trunc_ln1_fu_305_p1 = grp_fu_426_p3;

assign trunc_ln1_fu_305_p4 = {{trunc_ln1_fu_305_p1[27:12]}};

assign trunc_ln2_fu_337_p4 = {{mul_ln22_fu_331_p2[25:12]}};

assign trunc_ln60_fu_183_p1 = ap_sig_allocacmp_j_1[1:0];

assign weight_out_sum_output_out_fu_359_p1 = grp_fu_435_p3;

assign weight_out_sum_output_out_fu_359_p4 = {{weight_out_sum_output_out_fu_359_p1[27:12]}};

assign zext_ln13_1_cast_fu_187_p10 = ap_sig_allocacmp_j_1[1:0];

assign zext_ln13_1_cast_fu_187_p9 = 'bx;

assign zext_ln13_1_fu_211_p1 = zext_ln13_1_cast_fu_187_p11;

assign zext_ln13_cast_fu_232_p9 = 'bx;

assign zext_ln13_fu_255_p1 = zext_ln13_cast_fu_232_p11;

assign zext_ln81_fu_421_p1 = tmp_4_fu_413_p3;

endmodule //accelerator_controller_accelerator_controller_Pipeline_VITIS_LOOP_60_4
