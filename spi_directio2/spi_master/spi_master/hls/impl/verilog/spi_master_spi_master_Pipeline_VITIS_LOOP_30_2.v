// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module spi_master_spi_master_Pipeline_VITIS_LOOP_30_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sclk_ap_ack,
        mosi_ap_ack,
        miso_ap_vld,
        received_data,
        sclk,
        sclk_ap_vld,
        send_data,
        mosi,
        mosi_ap_vld,
        miso,
        miso_ap_ack,
        received_data_3_out,
        received_data_3_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   sclk_ap_ack;
input   mosi_ap_ack;
input   miso_ap_vld;
input  [31:0] received_data;
output  [0:0] sclk;
output   sclk_ap_vld;
input  [31:0] send_data;
output  [0:0] mosi;
output   mosi_ap_vld;
input  [0:0] miso;
output   miso_ap_ack;
output  [31:0] received_data_3_out;
output   received_data_3_out_ap_vld;

reg ap_idle;
reg[0:0] sclk;
reg sclk_ap_vld;
reg mosi_ap_vld;
reg miso_ap_ack;
reg received_data_3_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln30_fu_134_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln30_reg_212;
reg    ap_block_state2_pp0_stage1_iter0_grp1;
reg    ap_block_pp0_stage1_subdone_grp1_done_reg;
reg    ap_block_pp0_stage1_subdone_grp1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_state2_pp0_stage1_iter0_grp2;
reg    ap_block_pp0_stage1_subdone_grp2_done_reg;
reg    ap_block_pp0_stage1_subdone_grp2;
reg   [0:0] tmp_2_reg_221;
reg    ap_predicate_op31_read_state2;
reg    ap_block_state2_pp0_stage1_iter0_grp3;
reg    ap_block_pp0_stage1_subdone_grp3_done_reg;
reg    ap_block_pp0_stage1_subdone_grp3;
reg    ap_enable_reg_pp0_iter0_reg;
reg    sclk_blk_n;
wire    ap_block_pp0_stage1_grp1;
wire    ap_block_pp0_stage0_grp4;
reg    mosi_blk_n;
wire    ap_block_pp0_stage1_grp2;
reg    miso_blk_n;
wire    ap_block_pp0_stage1_grp3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] tobool_fu_160_p3;
reg   [0:0] tobool_reg_216;
wire   [0:0] tmp_2_nbreadreq_fu_84_p3;
reg   [6:0] i_fu_64;
wire   [6:0] i_2_fu_140_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0;
reg   [31:0] received_data_1_fu_68;
wire   [31:0] received_data_2_fu_180_p3;
reg    ap_block_pp0_stage1_11001_grp3;
wire    ap_block_pp0_stage0_11001_grp0;
reg    ap_block_pp0_stage0_subdone_grp0_done_reg;
wire    ap_block_pp0_stage0_subdone_grp0;
wire    ap_block_pp0_stage0_grp0;
reg    ap_block_pp0_stage1_01001_grp1;
reg    ap_block_pp0_stage0_01001_grp4;
reg    ap_block_pp0_stage1_11001_grp1;
reg    ap_block_pp0_stage0_11001_grp4;
reg    ap_block_pp0_stage1_01001_grp2;
reg    ap_block_pp0_stage1_11001_grp2;
wire    ap_block_pp0_stage0_01001_grp0;
wire   [5:0] trunc_ln30_fu_146_p1;
wire   [5:0] xor_ln36_fu_150_p2;
wire   [31:0] tobool_fu_160_p2;
wire   [30:0] trunc_ln44_fu_176_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [0:0] tobool_fu_160_p0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp1_done_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp2_done_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp3_done_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 i_fu_64 = 7'd0;
#0 received_data_1_fu_68 = 32'd0;
#0 ap_block_pp0_stage0_subdone_grp0_done_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

spi_master_bitselect_1ns_32ns_32ns_1_1_1 #(
    .DATAWIDTH( 32 ),
    .ADDRWIDTH( 32 ))
bitselect_1ns_32ns_32ns_1_1_1_U1(
    .din(send_data),
    .sel(tobool_fu_160_p2),
    .dout(tobool_fu_160_p3)
);

spi_master_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp0)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp1_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp1_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp1)) begin
                ap_block_pp0_stage1_subdone_grp1_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp2_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp2_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp2)) begin
                ap_block_pp0_stage1_subdone_grp2_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp3_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp3_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp3)) begin
                ap_block_pp0_stage1_subdone_grp3_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln30_fu_134_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_64 <= i_2_fu_140_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_64 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        received_data_1_fu_68 <= received_data;
    end else if (((tmp_2_reg_221 == 1'd1) & (icmp_ln30_reg_212 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp3) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
        received_data_1_fu_68 <= received_data_2_fu_180_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln30_reg_212 <= icmp_ln30_fu_134_p2;
        tmp_2_reg_221 <= tmp_2_nbreadreq_fu_84_p3;
        tobool_reg_216 <= tobool_fu_160_p3;
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_134_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_64;
    end
end

always @ (*) begin
    if (((ap_predicate_op31_read_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp3) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
        miso_ap_ack = 1'b1;
    end else begin
        miso_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op31_read_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg) & (1'b0 == ap_block_pp0_stage1_grp3) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
        miso_blk_n = miso_ap_vld;
    end else begin
        miso_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_212 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone_grp2_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp2) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
        mosi_ap_vld = 1'b1;
    end else begin
        mosi_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_212 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone_grp2_done_reg) & (1'b0 == ap_block_pp0_stage1_grp2) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
        mosi_blk_n = mosi_ap_ack;
    end else begin
        mosi_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln30_fu_134_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        received_data_3_out_ap_vld = 1'b1;
    end else begin
        received_data_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001_grp4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sclk = 1'd1;
    end else if (((icmp_ln30_reg_212 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage1_01001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
        sclk = 1'd0;
    end else begin
        sclk = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_212 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001_grp4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        sclk_ap_vld = 1'b1;
    end else begin
        sclk_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_212 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage1_grp1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_grp4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        sclk_blk_n = sclk_ap_ack;
    end else begin
        sclk_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp4 = ((sclk_ap_ack == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((sclk_ap_ack == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001_grp4 = ((sclk_ap_ack == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((sclk_ap_ack == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001_grp1 = ((1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg) & (1'b1 == ap_block_state2_pp0_stage1_iter0_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_01001_grp2 = ((1'b0 == ap_block_pp0_stage1_subdone_grp2_done_reg) & (1'b1 == ap_block_state2_pp0_stage1_iter0_grp2) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_grp1 = ((1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg) & (1'b1 == ap_block_state2_pp0_stage1_iter0_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_grp2 = ((1'b0 == ap_block_pp0_stage1_subdone_grp2_done_reg) & (1'b1 == ap_block_state2_pp0_stage1_iter0_grp2) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_grp3 = ((1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg) & (1'b1 == ap_block_state2_pp0_stage1_iter0_grp3) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage1_grp1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_grp2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_grp3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (((1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg) & (1'b1 == ap_block_state2_pp0_stage1_iter0_grp3)) | ((1'b0 == ap_block_pp0_stage1_subdone_grp2_done_reg) & (1'b1 == ap_block_state2_pp0_stage1_iter0_grp2)) | ((1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg) & (1'b1 == ap_block_state2_pp0_stage1_iter0_grp1))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone_grp1 = ((1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg) & (1'b1 == ap_block_state2_pp0_stage1_iter0_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone_grp2 = ((1'b0 == ap_block_pp0_stage1_subdone_grp2_done_reg) & (1'b1 == ap_block_state2_pp0_stage1_iter0_grp2) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone_grp3 = ((1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg) & (1'b1 == ap_block_state2_pp0_stage1_iter0_grp3) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0_grp1 = ((icmp_ln30_reg_212 == 1'd0) & (sclk_ap_ack == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0_grp2 = ((icmp_ln30_reg_212 == 1'd0) & (mosi_ap_ack == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0_grp3 = ((ap_predicate_op31_read_state2 == 1'b1) & (miso_ap_vld == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op31_read_state2 = ((tmp_2_reg_221 == 1'd1) & (icmp_ln30_reg_212 == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign i_2_fu_140_p2 = (ap_sig_allocacmp_i_1 + 7'd1);

assign icmp_ln30_fu_134_p2 = ((ap_sig_allocacmp_i_1 == 7'd64) ? 1'b1 : 1'b0);

assign mosi = tobool_reg_216;

assign received_data_2_fu_180_p3 = {{trunc_ln44_fu_176_p1}, {miso}};

assign received_data_3_out = received_data_1_fu_68;

assign tmp_2_nbreadreq_fu_84_p3 = miso_ap_vld;

assign tobool_fu_160_p2 = xor_ln36_fu_150_p2;

assign trunc_ln30_fu_146_p1 = ap_sig_allocacmp_i_1[5:0];

assign trunc_ln44_fu_176_p1 = received_data_1_fu_68[30:0];

assign xor_ln36_fu_150_p2 = (trunc_ln30_fu_146_p1 ^ 6'd63);

endmodule //spi_master_spi_master_Pipeline_VITIS_LOOP_30_2
