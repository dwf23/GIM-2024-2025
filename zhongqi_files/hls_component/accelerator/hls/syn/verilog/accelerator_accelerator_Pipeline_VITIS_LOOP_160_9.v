// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module accelerator_accelerator_Pipeline_VITIS_LOOP_160_9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_0_0_01382_1_lcssa_lcssa,
        p_0_0_01382_lcssa_lcssa,
        p_0_0_01385_1_lcssa_lcssa,
        p_0_0_01385_lcssa_lcssa,
        mux_case_173,
        mux_case_072,
        mux_case_175,
        mux_case_074,
        mux_case_177,
        mux_case_076,
        mux_case_179,
        mux_case_078,
        retval_4_1_0_0_0_load134_out,
        retval_4_1_0_0_0_load134_out_ap_vld,
        retval_4_0_0_0_0_load132_out,
        retval_4_0_0_0_0_load132_out_ap_vld,
        retval_3_1_0_0_0_load130_out,
        retval_3_1_0_0_0_load130_out_ap_vld,
        retval_3_0_0_0_0_load128_out,
        retval_3_0_0_0_0_load128_out_ap_vld,
        retval_2_1_1_0_0_0_load126_out,
        retval_2_1_1_0_0_0_load126_out_ap_vld,
        retval_2_1_0_0_0_0_load124_out,
        retval_2_1_0_0_0_0_load124_out_ap_vld,
        retval_2_0_1_0_0_0_load122_out,
        retval_2_0_1_0_0_0_load122_out_ap_vld,
        retval_2_0_0_0_0_0_load120_out,
        retval_2_0_0_0_0_0_load120_out_ap_vld,
        retval_1_1_1_0_0_0_load118_out,
        retval_1_1_1_0_0_0_load118_out_ap_vld,
        retval_1_1_0_0_0_0_load116_out,
        retval_1_1_0_0_0_0_load116_out_ap_vld,
        retval_1_0_1_0_0_0_load114_out,
        retval_1_0_1_0_0_0_load114_out_ap_vld,
        retval_1_0_0_0_0_0_load112_out,
        retval_1_0_0_0_0_0_load112_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] p_0_0_01382_1_lcssa_lcssa;
input  [15:0] p_0_0_01382_lcssa_lcssa;
input  [15:0] p_0_0_01385_1_lcssa_lcssa;
input  [15:0] p_0_0_01385_lcssa_lcssa;
input  [15:0] mux_case_173;
input  [15:0] mux_case_072;
input  [15:0] mux_case_175;
input  [15:0] mux_case_074;
input  [15:0] mux_case_177;
input  [15:0] mux_case_076;
input  [15:0] mux_case_179;
input  [15:0] mux_case_078;
output  [15:0] retval_4_1_0_0_0_load134_out;
output   retval_4_1_0_0_0_load134_out_ap_vld;
output  [15:0] retval_4_0_0_0_0_load132_out;
output   retval_4_0_0_0_0_load132_out_ap_vld;
output  [15:0] retval_3_1_0_0_0_load130_out;
output   retval_3_1_0_0_0_load130_out_ap_vld;
output  [15:0] retval_3_0_0_0_0_load128_out;
output   retval_3_0_0_0_0_load128_out_ap_vld;
output  [15:0] retval_2_1_1_0_0_0_load126_out;
output   retval_2_1_1_0_0_0_load126_out_ap_vld;
output  [15:0] retval_2_1_0_0_0_0_load124_out;
output   retval_2_1_0_0_0_0_load124_out_ap_vld;
output  [15:0] retval_2_0_1_0_0_0_load122_out;
output   retval_2_0_1_0_0_0_load122_out_ap_vld;
output  [15:0] retval_2_0_0_0_0_0_load120_out;
output   retval_2_0_0_0_0_0_load120_out_ap_vld;
output  [15:0] retval_1_1_1_0_0_0_load118_out;
output   retval_1_1_1_0_0_0_load118_out_ap_vld;
output  [15:0] retval_1_1_0_0_0_0_load116_out;
output   retval_1_1_0_0_0_0_load116_out_ap_vld;
output  [15:0] retval_1_0_1_0_0_0_load114_out;
output   retval_1_0_1_0_0_0_load114_out_ap_vld;
output  [15:0] retval_1_0_0_0_0_0_load112_out;
output   retval_1_0_0_0_0_0_load112_out_ap_vld;

reg ap_idle;
reg retval_4_1_0_0_0_load134_out_ap_vld;
reg retval_4_0_0_0_0_load132_out_ap_vld;
reg retval_3_1_0_0_0_load130_out_ap_vld;
reg retval_3_0_0_0_0_load128_out_ap_vld;
reg retval_2_1_1_0_0_0_load126_out_ap_vld;
reg retval_2_1_0_0_0_0_load124_out_ap_vld;
reg retval_2_0_1_0_0_0_load122_out_ap_vld;
reg retval_2_0_0_0_0_0_load120_out_ap_vld;
reg retval_1_1_1_0_0_0_load118_out_ap_vld;
reg retval_1_1_0_0_0_0_load116_out_ap_vld;
reg retval_1_0_1_0_0_0_load114_out_ap_vld;
reg retval_1_0_0_0_0_0_load112_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln160_fu_292_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [1:0] n_1_fu_76;
wire   [1:0] add_ln160_fu_298_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_n;
reg   [15:0] retval_1_0_0_0_0_0_load112_fu_80;
wire   [15:0] select_ln161_2_fu_416_p3;
reg   [15:0] retval_1_0_1_0_0_0_load114_fu_84;
wire   [15:0] select_ln161_9_fu_472_p3;
reg   [15:0] retval_1_1_0_0_0_0_load116_fu_88;
wire   [15:0] select_ln161_3_fu_424_p3;
reg   [15:0] retval_1_1_1_0_0_0_load118_fu_92;
wire   [15:0] select_ln161_8_fu_464_p3;
reg   [15:0] retval_2_0_0_0_0_0_load120_fu_96;
wire   [15:0] select_ln161_fu_400_p3;
reg   [15:0] retval_2_0_1_0_0_0_load122_fu_100;
wire   [15:0] select_ln161_11_fu_488_p3;
reg   [15:0] retval_2_1_0_0_0_0_load124_fu_104;
wire   [15:0] select_ln161_1_fu_408_p3;
reg   [15:0] retval_2_1_1_0_0_0_load126_fu_108;
wire   [15:0] select_ln161_10_fu_480_p3;
reg   [15:0] retval_3_0_0_0_0_load128_fu_112;
wire   [15:0] select_ln161_4_fu_432_p3;
reg   [15:0] retval_3_1_0_0_0_load130_fu_116;
wire   [15:0] select_ln161_5_fu_440_p3;
reg   [15:0] retval_4_0_0_0_0_load132_fu_120;
wire   [15:0] select_ln161_7_fu_456_p3;
reg   [15:0] retval_4_1_0_0_0_load134_fu_124;
wire   [15:0] select_ln161_6_fu_448_p3;
wire   [0:0] icmp_ln161_1_fu_340_p2;
wire   [0:0] icmp_ln161_fu_354_p2;
wire   [15:0] output_array_new_w2_fu_384_p3;
wire   [15:0] output_array_new_w1_fu_368_p3;
wire   [15:0] output_array_new_b1_fu_346_p3;
wire   [15:0] output_array_new_b2_fu_360_p3;
wire   [15:0] output_array_new_w1_1_fu_376_p3;
wire   [15:0] output_array_new_w2_1_fu_392_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 n_1_fu_76 = 2'd0;
#0 retval_1_0_0_0_0_0_load112_fu_80 = 16'd0;
#0 retval_1_0_1_0_0_0_load114_fu_84 = 16'd0;
#0 retval_1_1_0_0_0_0_load116_fu_88 = 16'd0;
#0 retval_1_1_1_0_0_0_load118_fu_92 = 16'd0;
#0 retval_2_0_0_0_0_0_load120_fu_96 = 16'd0;
#0 retval_2_0_1_0_0_0_load122_fu_100 = 16'd0;
#0 retval_2_1_0_0_0_0_load124_fu_104 = 16'd0;
#0 retval_2_1_1_0_0_0_load126_fu_108 = 16'd0;
#0 retval_3_0_0_0_0_load128_fu_112 = 16'd0;
#0 retval_3_1_0_0_0_load130_fu_116 = 16'd0;
#0 retval_4_0_0_0_0_load132_fu_120 = 16'd0;
#0 retval_4_1_0_0_0_load134_fu_124 = 16'd0;
#0 ap_done_reg = 1'b0;
end

accelerator_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln160_fu_292_p2 == 1'd0)) begin
            n_1_fu_76 <= add_ln160_fu_298_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n_1_fu_76 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln160_fu_292_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        retval_1_0_0_0_0_0_load112_fu_80 <= select_ln161_2_fu_416_p3;
        retval_1_0_1_0_0_0_load114_fu_84 <= select_ln161_9_fu_472_p3;
        retval_1_1_0_0_0_0_load116_fu_88 <= select_ln161_3_fu_424_p3;
        retval_1_1_1_0_0_0_load118_fu_92 <= select_ln161_8_fu_464_p3;
        retval_2_0_0_0_0_0_load120_fu_96 <= select_ln161_fu_400_p3;
        retval_2_0_1_0_0_0_load122_fu_100 <= select_ln161_11_fu_488_p3;
        retval_2_1_0_0_0_0_load124_fu_104 <= select_ln161_1_fu_408_p3;
        retval_2_1_1_0_0_0_load126_fu_108 <= select_ln161_10_fu_480_p3;
        retval_3_0_0_0_0_load128_fu_112 <= select_ln161_4_fu_432_p3;
        retval_3_1_0_0_0_load130_fu_116 <= select_ln161_5_fu_440_p3;
        retval_4_0_0_0_0_load132_fu_120 <= select_ln161_7_fu_456_p3;
        retval_4_1_0_0_0_load134_fu_124 <= select_ln161_6_fu_448_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln160_fu_292_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_n = 2'd0;
    end else begin
        ap_sig_allocacmp_n = n_1_fu_76;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        retval_1_0_0_0_0_0_load112_out_ap_vld = 1'b1;
    end else begin
        retval_1_0_0_0_0_0_load112_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        retval_1_0_1_0_0_0_load114_out_ap_vld = 1'b1;
    end else begin
        retval_1_0_1_0_0_0_load114_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        retval_1_1_0_0_0_0_load116_out_ap_vld = 1'b1;
    end else begin
        retval_1_1_0_0_0_0_load116_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        retval_1_1_1_0_0_0_load118_out_ap_vld = 1'b1;
    end else begin
        retval_1_1_1_0_0_0_load118_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        retval_2_0_0_0_0_0_load120_out_ap_vld = 1'b1;
    end else begin
        retval_2_0_0_0_0_0_load120_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        retval_2_0_1_0_0_0_load122_out_ap_vld = 1'b1;
    end else begin
        retval_2_0_1_0_0_0_load122_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        retval_2_1_0_0_0_0_load124_out_ap_vld = 1'b1;
    end else begin
        retval_2_1_0_0_0_0_load124_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        retval_2_1_1_0_0_0_load126_out_ap_vld = 1'b1;
    end else begin
        retval_2_1_1_0_0_0_load126_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        retval_3_0_0_0_0_load128_out_ap_vld = 1'b1;
    end else begin
        retval_3_0_0_0_0_load128_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        retval_3_1_0_0_0_load130_out_ap_vld = 1'b1;
    end else begin
        retval_3_1_0_0_0_load130_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        retval_4_0_0_0_0_load132_out_ap_vld = 1'b1;
    end else begin
        retval_4_0_0_0_0_load132_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln160_fu_292_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        retval_4_1_0_0_0_load134_out_ap_vld = 1'b1;
    end else begin
        retval_4_1_0_0_0_load134_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln160_fu_298_p2 = (ap_sig_allocacmp_n + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln160_fu_292_p2 = ((ap_sig_allocacmp_n == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln161_1_fu_340_p2 = ((ap_sig_allocacmp_n == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln161_fu_354_p2 = ((ap_sig_allocacmp_n == 2'd0) ? 1'b1 : 1'b0);

assign output_array_new_b1_fu_346_p3 = ((icmp_ln161_1_fu_340_p2[0:0] == 1'b1) ? p_0_0_01382_1_lcssa_lcssa : p_0_0_01382_lcssa_lcssa);

assign output_array_new_b2_fu_360_p3 = ((icmp_ln161_1_fu_340_p2[0:0] == 1'b1) ? p_0_0_01385_1_lcssa_lcssa : p_0_0_01385_lcssa_lcssa);

assign output_array_new_w1_1_fu_376_p3 = ((icmp_ln161_1_fu_340_p2[0:0] == 1'b1) ? mux_case_175 : mux_case_074);

assign output_array_new_w1_fu_368_p3 = ((icmp_ln161_1_fu_340_p2[0:0] == 1'b1) ? mux_case_173 : mux_case_072);

assign output_array_new_w2_1_fu_392_p3 = ((icmp_ln161_1_fu_340_p2[0:0] == 1'b1) ? mux_case_179 : mux_case_078);

assign output_array_new_w2_fu_384_p3 = ((icmp_ln161_1_fu_340_p2[0:0] == 1'b1) ? mux_case_177 : mux_case_076);

assign retval_1_0_0_0_0_0_load112_out = retval_1_0_0_0_0_0_load112_fu_80;

assign retval_1_0_1_0_0_0_load114_out = retval_1_0_1_0_0_0_load114_fu_84;

assign retval_1_1_0_0_0_0_load116_out = retval_1_1_0_0_0_0_load116_fu_88;

assign retval_1_1_1_0_0_0_load118_out = retval_1_1_1_0_0_0_load118_fu_92;

assign retval_2_0_0_0_0_0_load120_out = retval_2_0_0_0_0_0_load120_fu_96;

assign retval_2_0_1_0_0_0_load122_out = retval_2_0_1_0_0_0_load122_fu_100;

assign retval_2_1_0_0_0_0_load124_out = retval_2_1_0_0_0_0_load124_fu_104;

assign retval_2_1_1_0_0_0_load126_out = retval_2_1_1_0_0_0_load126_fu_108;

assign retval_3_0_0_0_0_load128_out = retval_3_0_0_0_0_load128_fu_112;

assign retval_3_1_0_0_0_load130_out = retval_3_1_0_0_0_load130_fu_116;

assign retval_4_0_0_0_0_load132_out = retval_4_0_0_0_0_load132_fu_120;

assign retval_4_1_0_0_0_load134_out = retval_4_1_0_0_0_load134_fu_124;

assign select_ln161_10_fu_480_p3 = ((icmp_ln161_fu_354_p2[0:0] == 1'b1) ? retval_2_1_1_0_0_0_load126_fu_108 : output_array_new_w2_1_fu_392_p3);

assign select_ln161_11_fu_488_p3 = ((icmp_ln161_fu_354_p2[0:0] == 1'b1) ? output_array_new_w2_1_fu_392_p3 : retval_2_0_1_0_0_0_load122_fu_100);

assign select_ln161_1_fu_408_p3 = ((icmp_ln161_fu_354_p2[0:0] == 1'b1) ? retval_2_1_0_0_0_0_load124_fu_104 : output_array_new_w2_fu_384_p3);

assign select_ln161_2_fu_416_p3 = ((icmp_ln161_fu_354_p2[0:0] == 1'b1) ? output_array_new_w1_fu_368_p3 : retval_1_0_0_0_0_0_load112_fu_80);

assign select_ln161_3_fu_424_p3 = ((icmp_ln161_fu_354_p2[0:0] == 1'b1) ? retval_1_1_0_0_0_0_load116_fu_88 : output_array_new_w1_fu_368_p3);

assign select_ln161_4_fu_432_p3 = ((icmp_ln161_fu_354_p2[0:0] == 1'b1) ? output_array_new_b1_fu_346_p3 : retval_3_0_0_0_0_load128_fu_112);

assign select_ln161_5_fu_440_p3 = ((icmp_ln161_fu_354_p2[0:0] == 1'b1) ? retval_3_1_0_0_0_load130_fu_116 : output_array_new_b1_fu_346_p3);

assign select_ln161_6_fu_448_p3 = ((icmp_ln161_fu_354_p2[0:0] == 1'b1) ? retval_4_1_0_0_0_load134_fu_124 : output_array_new_b2_fu_360_p3);

assign select_ln161_7_fu_456_p3 = ((icmp_ln161_fu_354_p2[0:0] == 1'b1) ? output_array_new_b2_fu_360_p3 : retval_4_0_0_0_0_load132_fu_120);

assign select_ln161_8_fu_464_p3 = ((icmp_ln161_fu_354_p2[0:0] == 1'b1) ? retval_1_1_1_0_0_0_load118_fu_92 : output_array_new_w1_1_fu_376_p3);

assign select_ln161_9_fu_472_p3 = ((icmp_ln161_fu_354_p2[0:0] == 1'b1) ? output_array_new_w1_1_fu_376_p3 : retval_1_0_1_0_0_0_load114_fu_84);

assign select_ln161_fu_400_p3 = ((icmp_ln161_fu_354_p2[0:0] == 1'b1) ? output_array_new_w2_fu_384_p3 : retval_2_0_0_0_0_0_load120_fu_96);

endmodule //accelerator_accelerator_Pipeline_VITIS_LOOP_160_9
