-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity spi_master_logic is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    data_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_ap_vld : OUT STD_LOGIC;
    data_in : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_ap_vld : IN STD_LOGIC );
end;


architecture behav of spi_master_logic is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "spi_master_logic_spi_master_logic,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sfvc784-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.489000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1,HLS_SYN_LUT=27,HLS_VERSION=2024_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "00001111111111111111111111111111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal data_out_ap_ack : STD_LOGIC;
    signal data_in_ap_ack : STD_LOGIC;
    signal data_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal data_in_blk_n : STD_LOGIC;
    signal tmp_nbreadreq_fu_34_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln24_fu_66_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_test_data_phi_fu_58_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(data_out_ap_ack, data_in_ap_vld, tmp_nbreadreq_fu_34_p3)
    begin
                ap_block_state1 <= ((data_out_ap_ack = ap_const_logic_0) or ((tmp_nbreadreq_fu_34_p3 = ap_const_lv1_1) and (data_in_ap_vld = ap_const_logic_0)));
    end process;


    ap_phi_mux_test_data_phi_fu_58_p4_assign_proc : process(ap_CS_fsm_state1, tmp_nbreadreq_fu_34_p3, shl_ln24_fu_66_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((tmp_nbreadreq_fu_34_p3 = ap_const_lv1_0)) then 
                ap_phi_mux_test_data_phi_fu_58_p4 <= ap_const_lv32_FFFFFFF;
            elsif ((tmp_nbreadreq_fu_34_p3 = ap_const_lv1_1)) then 
                ap_phi_mux_test_data_phi_fu_58_p4 <= shl_ln24_fu_66_p2;
            else 
                ap_phi_mux_test_data_phi_fu_58_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_test_data_phi_fu_58_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_in_ap_ack_assign_proc : process(ap_CS_fsm_state1, tmp_nbreadreq_fu_34_p3, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (tmp_nbreadreq_fu_34_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_in_ap_ack <= ap_const_logic_1;
        else 
            data_in_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    data_in_blk_n_assign_proc : process(data_in_ap_vld, ap_CS_fsm_state1, tmp_nbreadreq_fu_34_p3)
    begin
        if (((tmp_nbreadreq_fu_34_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_in_blk_n <= data_in_ap_vld;
        else 
            data_in_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_out <= ap_phi_mux_test_data_phi_fu_58_p4;
    data_out_ap_ack <= ap_const_logic_1;

    data_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_out_ap_vld <= ap_const_logic_1;
        else 
            data_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    data_out_blk_n <= ap_const_logic_1;
    shl_ln24_fu_66_p2 <= std_logic_vector(shift_left(unsigned(data_in),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_nbreadreq_fu_34_p3 <= (0=>(data_in_ap_vld), others=>'-');
end behav;
