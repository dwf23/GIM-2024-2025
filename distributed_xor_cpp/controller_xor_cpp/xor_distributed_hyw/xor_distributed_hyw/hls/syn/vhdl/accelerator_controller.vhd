-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accelerator_controller is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    w1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    w1_ce0 : OUT STD_LOGIC;
    w1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    w1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    w1_ce1 : OUT STD_LOGIC;
    w1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    bias_1_ce0 : OUT STD_LOGIC;
    bias_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    training : IN STD_LOGIC_VECTOR (15 downto 0);
    data_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    data_out_full_n : IN STD_LOGIC;
    data_out_write : OUT STD_LOGIC;
    data_in : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of accelerator_controller is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "accelerator_controller_accelerator_controller,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sfvc784-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.929000,HLS_SYN_LAT=54,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=298,HLS_SYN_LUT=600,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal expecting_input : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i58_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i58_reg_242 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln57_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_reg_247 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_2_fu_171_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_251 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_start : STD_LOGIC;
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_done : STD_LOGIC;
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_idle : STD_LOGIC;
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_ready : STD_LOGIC;
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_ce0 : STD_LOGIC;
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_ce1 : STD_LOGIC;
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_bias_1_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_bias_1_ce0 : STD_LOGIC;
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_4_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_4_out_ap_vld : STD_LOGIC;
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_out_ap_vld : STD_LOGIC;
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_6_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_6_out_ap_vld : STD_LOGIC;
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_5_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_5_out_ap_vld : STD_LOGIC;
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_array_back1_bias_change_1_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_array_back1_bias_change_1_out_ap_vld : STD_LOGIC;
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_array_back1_bias_change_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_array_back1_bias_change_out_ap_vld : STD_LOGIC;
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_start : STD_LOGIC;
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_done : STD_LOGIC;
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_idle : STD_LOGIC;
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_ready : STD_LOGIC;
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_data_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_data_out_write : STD_LOGIC;
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_fu_72 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component accelerator_controller_accelerator_controller_Pipeline_VITIS_LOOP_26_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        w1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        w1_ce0 : OUT STD_LOGIC;
        w1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        w1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        w1_ce1 : OUT STD_LOGIC;
        w1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        bias_1_ce0 : OUT STD_LOGIC;
        bias_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        w1_local_4_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        w1_local_4_out_ap_vld : OUT STD_LOGIC;
        w1_local_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        w1_local_out_ap_vld : OUT STD_LOGIC;
        w1_local_6_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        w1_local_6_out_ap_vld : OUT STD_LOGIC;
        w1_local_5_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        w1_local_5_out_ap_vld : OUT STD_LOGIC;
        array_back1_bias_change_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        array_back1_bias_change_1_out_ap_vld : OUT STD_LOGIC;
        array_back1_bias_change_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        array_back1_bias_change_out_ap_vld : OUT STD_LOGIC );
    end component;


    component accelerator_controller_accelerator_controller_Pipeline_VITIS_LOOP_60_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sext_ln13 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln13_1 : IN STD_LOGIC_VECTOR (15 downto 0);
        array_back1_bias_change_reload : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln13_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln13_3 : IN STD_LOGIC_VECTOR (15 downto 0);
        array_back1_bias_change_1_reload : IN STD_LOGIC_VECTOR (15 downto 0);
        data_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        data_out_full_n : IN STD_LOGIC;
        data_out_write : OUT STD_LOGIC;
        cmp_i_i58 : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component accelerator_controller_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        expecting_input : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106 : component accelerator_controller_accelerator_controller_Pipeline_VITIS_LOOP_26_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_start,
        ap_done => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_done,
        ap_idle => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_idle,
        ap_ready => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_ready,
        w1_address0 => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_address0,
        w1_ce0 => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_ce0,
        w1_q0 => w1_q0,
        w1_address1 => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_address1,
        w1_ce1 => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_ce1,
        w1_q1 => w1_q1,
        bias_1_address0 => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_bias_1_address0,
        bias_1_ce0 => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_bias_1_ce0,
        bias_1_q0 => bias_1_q0,
        w1_local_4_out => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_4_out,
        w1_local_4_out_ap_vld => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_4_out_ap_vld,
        w1_local_out => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_out,
        w1_local_out_ap_vld => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_out_ap_vld,
        w1_local_6_out => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_6_out,
        w1_local_6_out_ap_vld => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_6_out_ap_vld,
        w1_local_5_out => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_5_out,
        w1_local_5_out_ap_vld => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_5_out_ap_vld,
        array_back1_bias_change_1_out => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_array_back1_bias_change_1_out,
        array_back1_bias_change_1_out_ap_vld => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_array_back1_bias_change_1_out_ap_vld,
        array_back1_bias_change_out => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_array_back1_bias_change_out,
        array_back1_bias_change_out_ap_vld => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_array_back1_bias_change_out_ap_vld);

    grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120 : component accelerator_controller_accelerator_controller_Pipeline_VITIS_LOOP_60_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_start,
        ap_done => grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_done,
        ap_idle => grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_idle,
        ap_ready => grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_ready,
        sext_ln13 => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_out,
        sext_ln13_1 => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_4_out,
        array_back1_bias_change_reload => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_array_back1_bias_change_out,
        sext_ln13_2 => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_5_out,
        sext_ln13_3 => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_local_6_out,
        array_back1_bias_change_1_reload => grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_array_back1_bias_change_1_out,
        data_out_din => grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_data_out_din,
        data_out_full_n => data_out_full_n,
        data_out_write => grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_data_out_write,
        cmp_i_i58 => cmp_i_i58_reg_242);

    control_s_axi_U : component accelerator_controller_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        expecting_input => expecting_input,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_ready = ap_const_logic_1)) then 
                    grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln57_fu_165_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_ready = ap_const_logic_1)) then 
                    grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_72 <= ap_const_lv4_0;
            elsif (((icmp_ln57_reg_247 = ap_const_lv1_0) and (cmp_i_i58_reg_242 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then 
                i_fu_72 <= i_2_reg_251;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                cmp_i_i58_reg_242 <= cmp_i_i58_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_2_reg_251 <= i_2_fu_171_p2;
                icmp_ln57_reg_247 <= icmp_ln57_fu_165_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, cmp_i_i58_reg_242, icmp_ln57_reg_247, grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done) and ((icmp_ln57_reg_247 = ap_const_lv1_1) or (cmp_i_i58_reg_242 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln57_reg_247 = ap_const_lv1_0) and (cmp_i_i58_reg_242 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_done)
    begin
        if ((grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(ap_block_state5_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state5_on_subcall_done)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state5_on_subcall_done_assign_proc : process(icmp_ln57_reg_247, grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_done)
    begin
                ap_block_state5_on_subcall_done <= ((grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_done = ap_const_logic_0) and (icmp_ln57_reg_247 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(cmp_i_i58_reg_242, icmp_ln57_reg_247, ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done) and ((icmp_ln57_reg_247 = ap_const_lv1_1) or (cmp_i_i58_reg_242 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(cmp_i_i58_reg_242, icmp_ln57_reg_247, ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done) and ((icmp_ln57_reg_247 = ap_const_lv1_1) or (cmp_i_i58_reg_242 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bias_1_address0 <= grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_bias_1_address0;
    bias_1_ce0 <= grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_bias_1_ce0;
    cmp_i_i58_fu_156_p2 <= "1" when (training = ap_const_lv16_0) else "0";
    data_out_din <= grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_data_out_din;

    data_out_write_assign_proc : process(icmp_ln57_reg_247, grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_data_out_write, ap_CS_fsm_state5)
    begin
        if (((icmp_ln57_reg_247 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data_out_write <= grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_data_out_write;
        else 
            data_out_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_start <= grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_ap_start_reg;
    grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_start <= grp_accelerator_controller_Pipeline_VITIS_LOOP_60_4_fu_120_ap_start_reg;
    i_2_fu_171_p2 <= std_logic_vector(unsigned(i_fu_72) + unsigned(ap_const_lv4_1));
    icmp_ln57_fu_165_p2 <= "1" when (i_fu_72 = ap_const_lv4_A) else "0";
    w1_address0 <= grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_address0;
    w1_address1 <= grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_address1;
    w1_ce0 <= grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_ce0;
    w1_ce1 <= grp_accelerator_controller_Pipeline_VITIS_LOOP_26_1_fu_106_w1_ce1;
end behav;
