-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accelerator_controller_accelerator_controller_Pipeline_VITIS_LOOP_60_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sext_ln13 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln13_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    array_back1_bias_change_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln13_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln13_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    array_back1_bias_change_1_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    data_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    data_out_full_n : IN STD_LOGIC;
    data_out_write : OUT STD_LOGIC;
    cmp_i_i58 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of accelerator_controller_accelerator_controller_Pipeline_VITIS_LOOP_60_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv26_199 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000110011001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal and_ln109_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln13_2_cast_fu_151_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln13_2_cast_reg_466 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln13_cast_fu_159_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln13_cast_reg_476 : STD_LOGIC_VECTOR (27 downto 0);
    signal icmp_ln60_reg_481 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_481_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_481_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln60_fu_183_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln60_reg_485 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln60_reg_485_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln13_1_fu_211_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal j_fu_94 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln60_fu_177_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln81_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal data_out_write_local : STD_LOGIC;
    signal zext_ln13_1_cast_fu_187_p9 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln13_1_cast_fu_187_p10 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln13_1_cast_fu_187_p11 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln109_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_cast_fu_232_p9 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln13_cast_fu_232_p11 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln13_fu_259_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln13_fu_259_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln13_fu_255_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln13_fu_259_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_2_fu_264_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln13_2_fu_282_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln13_2_fu_282_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln13_2_fu_282_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_3_fu_287_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1_fu_305_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_426_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln1_fu_305_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln13_1_fu_314_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln22_fu_331_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln22_fu_331_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln2_fu_337_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_fu_319_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln22_1_fu_347_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_out_sum_output_out_fu_359_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_435_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal weight_out_sum_output_out_fu_359_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_out_net_sum_fu_368_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln22_1_fu_385_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln22_1_fu_385_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal output_fu_391_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1_fu_373_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln22_3_fu_401_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_2_fu_405_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal array_out1_output_k_fu_351_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_413_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_426_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_426_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_435_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_435_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_374 : BOOLEAN;
    signal zext_ln13_1_cast_fu_187_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln13_1_cast_fu_187_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln13_1_cast_fu_187_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln13_1_cast_fu_187_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln13_cast_fu_232_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln13_cast_fu_232_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln13_cast_fu_232_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln13_cast_fu_232_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component accelerator_controller_sparsemux_9_2_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (1 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        din3 : IN STD_LOGIC_VECTOR (12 downto 0);
        def : IN STD_LOGIC_VECTOR (12 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component accelerator_controller_mul_16s_13ns_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component accelerator_controller_mul_16s_10ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component accelerator_controller_mac_muladd_16s_13ns_28ns_28_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component accelerator_controller_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_9_2_13_1_1_U9 : component accelerator_controller_sparsemux_9_2_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 13,
        CASE1 => "01",
        din1_WIDTH => 13,
        CASE2 => "10",
        din2_WIDTH => 13,
        CASE3 => "11",
        din3_WIDTH => 13,
        def_WIDTH => 13,
        sel_WIDTH => 2,
        dout_WIDTH => 13)
    port map (
        din0 => ap_const_lv13_0,
        din1 => ap_const_lv13_1000,
        din2 => ap_const_lv13_0,
        din3 => ap_const_lv13_1000,
        def => zext_ln13_1_cast_fu_187_p9,
        sel => zext_ln13_1_cast_fu_187_p10,
        dout => zext_ln13_1_cast_fu_187_p11);

    sparsemux_9_2_13_1_1_U10 : component accelerator_controller_sparsemux_9_2_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 13,
        CASE1 => "01",
        din1_WIDTH => 13,
        CASE2 => "10",
        din2_WIDTH => 13,
        CASE3 => "11",
        din3_WIDTH => 13,
        def_WIDTH => 13,
        sel_WIDTH => 2,
        dout_WIDTH => 13)
    port map (
        din0 => ap_const_lv13_0,
        din1 => ap_const_lv13_0,
        din2 => ap_const_lv13_1000,
        din3 => ap_const_lv13_1000,
        def => zext_ln13_cast_fu_232_p9,
        sel => trunc_ln60_reg_485_pp0_iter1_reg,
        dout => zext_ln13_cast_fu_232_p11);

    mul_16s_13ns_28_1_1_U11 : component accelerator_controller_mul_16s_13ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln13_fu_259_p0,
        din1 => mul_ln13_fu_259_p1,
        dout => mul_ln13_fu_259_p2);

    mul_16s_13ns_28_1_1_U12 : component accelerator_controller_mul_16s_13ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln13_2_fu_282_p0,
        din1 => mul_ln13_2_fu_282_p1,
        dout => mul_ln13_2_fu_282_p2);

    mul_16s_10ns_26_1_1_U13 : component accelerator_controller_mul_16s_10ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        din0 => add_ln13_1_fu_314_p2,
        din1 => mul_ln22_fu_331_p1,
        dout => mul_ln22_fu_331_p2);

    mul_16s_10ns_26_1_1_U14 : component accelerator_controller_mul_16s_10ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        din0 => bias_out_net_sum_fu_368_p2,
        din1 => mul_ln22_1_fu_385_p1,
        dout => mul_ln22_1_fu_385_p2);

    mac_muladd_16s_13ns_28ns_28_4_1_U15 : component accelerator_controller_mac_muladd_16s_13ns_28ns_28_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sext_ln13_1,
        din1 => grp_fu_426_p1,
        din2 => grp_fu_426_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_426_p3);

    mac_muladd_16s_13ns_28ns_28_4_1_U16 : component accelerator_controller_mac_muladd_16s_13ns_28ns_28_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sext_ln13_3,
        din1 => grp_fu_435_p1,
        din2 => grp_fu_435_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_435_p3);

    flow_control_loop_pipe_sequential_init_U : component accelerator_controller_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    j_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_const_boolean_1 = ap_condition_374)) then 
                    j_fu_94 <= add_ln60_fu_177_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_94 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln60_reg_481 <= icmp_ln60_fu_171_p2;
                icmp_ln60_reg_481_pp0_iter1_reg <= icmp_ln60_reg_481;
                sext_ln13_2_cast_reg_466 <= sext_ln13_2_cast_fu_151_p1;
                sext_ln13_cast_reg_476 <= sext_ln13_cast_fu_159_p1;
                trunc_ln60_reg_485 <= trunc_ln60_fu_183_p1;
                trunc_ln60_reg_485_pp0_iter1_reg <= trunc_ln60_reg_485;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln60_reg_481_pp0_iter2_reg <= icmp_ln60_reg_481_pp0_iter1_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln13_1_fu_314_p2 <= std_logic_vector(unsigned(trunc_ln1_fu_305_p4) + unsigned(array_back1_bias_change_reload));
    add_ln60_fu_177_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_1) + unsigned(ap_const_lv3_1));
    and_ln109_fu_221_p2 <= (icmp_ln109_fu_215_p2 and cmp_i_i58);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_374_assign_proc : process(ap_enable_reg_pp0_iter0, and_ln109_fu_221_p2, icmp_ln60_fu_171_p2)
    begin
                ap_condition_374 <= ((icmp_ln60_fu_171_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_lv1_0 = and_ln109_fu_221_p2));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, and_ln109_fu_221_p2, icmp_ln60_fu_171_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((icmp_ln60_fu_171_p2 = ap_const_lv1_1) or (ap_const_lv1_1 = and_ln109_fu_221_p2)))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, j_fu_94, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_94;
        end if; 
    end process;

    array_out1_output_k_fu_351_p3 <= 
        sext_ln22_1_fu_347_p1 when (tmp_fu_319_p3(0) = '1') else 
        add_ln13_1_fu_314_p2;
    bias_out_net_sum_fu_368_p2 <= std_logic_vector(unsigned(weight_out_sum_output_out_fu_359_p4) + unsigned(array_back1_bias_change_1_reload));
    data_out_din <= zext_ln81_fu_421_p1;
    data_out_write <= data_out_write_local;

    data_out_write_local_assign_proc : process(ap_enable_reg_pp0_iter3, data_out_full_n, ap_block_pp0_stage0_11001, icmp_ln60_reg_481_pp0_iter2_reg)
    begin
        if (((icmp_ln60_reg_481_pp0_iter2_reg = ap_const_lv1_0) and (data_out_full_n = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            data_out_write_local <= ap_const_logic_1;
        else 
            data_out_write_local <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_426_p1 <= zext_ln13_1_fu_211_p1(13 - 1 downto 0);
    grp_fu_426_p2 <= (tmp_2_fu_264_p4 & ap_const_lv12_0);
    grp_fu_435_p1 <= zext_ln13_1_fu_211_p1(13 - 1 downto 0);
    grp_fu_435_p2 <= (tmp_3_fu_287_p4 & ap_const_lv12_0);
    icmp_ln109_fu_215_p2 <= "1" when (ap_sig_allocacmp_j_1 = ap_const_lv3_3) else "0";
    icmp_ln60_fu_171_p2 <= "1" when (ap_sig_allocacmp_j_1 = ap_const_lv3_4) else "0";
    mul_ln13_2_fu_282_p0 <= sext_ln13_2_cast_reg_466(16 - 1 downto 0);
    mul_ln13_2_fu_282_p1 <= zext_ln13_fu_255_p1(13 - 1 downto 0);
    mul_ln13_fu_259_p0 <= sext_ln13_cast_reg_476(16 - 1 downto 0);
    mul_ln13_fu_259_p1 <= zext_ln13_fu_255_p1(13 - 1 downto 0);
    mul_ln22_1_fu_385_p1 <= ap_const_lv26_199(10 - 1 downto 0);
    mul_ln22_fu_331_p1 <= ap_const_lv26_199(10 - 1 downto 0);
    output_2_fu_405_p3 <= 
        sext_ln22_3_fu_401_p1 when (tmp_1_fu_373_p3(0) = '1') else 
        bias_out_net_sum_fu_368_p2;
    output_fu_391_p4 <= mul_ln22_1_fu_385_p2(25 downto 12);
        sext_ln13_2_cast_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln13_2),28));

        sext_ln13_cast_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln13),28));

        sext_ln22_1_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_337_p4),16));

        sext_ln22_3_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_fu_391_p4),16));

    tmp_1_fu_373_p3 <= bias_out_net_sum_fu_368_p2(15 downto 15);
    tmp_2_fu_264_p4 <= mul_ln13_fu_259_p2(27 downto 12);
    tmp_3_fu_287_p4 <= mul_ln13_2_fu_282_p2(27 downto 12);
    tmp_4_fu_413_p3 <= (output_2_fu_405_p3 & array_out1_output_k_fu_351_p3);
    tmp_fu_319_p3 <= add_ln13_1_fu_314_p2(15 downto 15);
    trunc_ln1_fu_305_p1 <= grp_fu_426_p3;
    trunc_ln1_fu_305_p4 <= trunc_ln1_fu_305_p1(27 downto 12);
    trunc_ln2_fu_337_p4 <= mul_ln22_fu_331_p2(25 downto 12);
    trunc_ln60_fu_183_p1 <= ap_sig_allocacmp_j_1(2 - 1 downto 0);
    weight_out_sum_output_out_fu_359_p1 <= grp_fu_435_p3;
    weight_out_sum_output_out_fu_359_p4 <= weight_out_sum_output_out_fu_359_p1(27 downto 12);
    zext_ln13_1_cast_fu_187_p10 <= ap_sig_allocacmp_j_1(2 - 1 downto 0);
    zext_ln13_1_cast_fu_187_p9 <= "XXXXXXXXXXXXX";
    zext_ln13_1_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln13_1_cast_fu_187_p11),28));
    zext_ln13_cast_fu_232_p9 <= "XXXXXXXXXXXXX";
    zext_ln13_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln13_cast_fu_232_p11),28));
    zext_ln81_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_413_p3),64));
end behav;
